#ifndef ERR_ASSEMBLER_WRN_ENUM_H_
#define ERR_ASSEMBLER_WRN_ENUM_H_

#include "message_group.h"
#include "message_info.h"
#include "singleton.h"

#include <set>
#include <map>

namespace codasip {
    // Forward declaration
    class FormatPattern;
}

namespace codasip {
namespace assembler {
namespace wrn {

typedef enum : unsigned int {
    ENUM_UNKNOWN = 4294967295,
    ENUM_DIRECTIVE_WARNING = 1,
    ENUM_UNSUPPORTED_DIRECTIVE = 3,
    ENUM_IGNORE_DIRECTIVE = 4,
    ENUM_IGNORE_SECTION_FLAGS = 5,
    ENUM_UNEXPECTED_SECTION_TYPE_ARGUMENT = 6,
    ENUM_IGNORE_TYPE_DIRECTIVE_SPECIFIER = 8,
    ENUM_IGNORE_LOC_OPTION_SPECIFIER = 9,
    ENUM_IGNORE_LOC_OPTION = 10,
    ENUM_UNEXPECTED_SIGN_FOR_RELATIVE_RELOCATION = 11,
    ENUM_RELOCATION_OVERFLOW = 13,
    ENUM_NON_CODE_SECTION_LINE_INFORMATION = 14,
    ENUM_UNDETERMINED_ELF_FILE_ENDIANESS = 15,
    ENUM_RETURN_COLUMN_INFO_NOT_SET = 16,
    ENUM_LAST_FUNCTION_HAS_NOT_LAST_ADDRESS_SET = 17,
    ENUM_CURRENT_FUNCTION_HAS_NOT_START_ADDRESS_SET = 18,
    ENUM_CFI_START_PROC_CFI_END_PROC_IN_DIFFERENT_SECTIONS = 19,
    ENUM_CIE_INFORMATION_DOES_NOT_FIT_CURRENT_SECTION = 20,
    ENUM_CFI_SAME_VALUE_NON_NEGATIVE_ARGUMENT = 21,
    ENUM_MISSING_CFI_RETURN_COLUMN_SPECIFICATION = 22,
    ENUM_MULTIPLE_RETVAL_REGS_OR_RETSTRUC_REGS = 23,
    ENUM_DIRECTIVE_LOC_IN_DIFFERENT_SECTIONS = 24,
    ENUM_DWARF_AND_NO_DEBUGLINE_SECTION = 25,
    ENUM_DWARF_ADDRESS_SIZE_RETRIEVAL = 26,
    ENUM_DWARF_COULD_NOT_RETRIEVE_ADDRESS_SIZE = 27,
    ENUM_DWARF_INVALID_ADDRESS_SIZE_RETRIEVED = 28,
    ENUM_DWARF_SAME_LINE_INFO_FOR_MULTIPLE_LINES = 29,
    ENUM_ABSOLUTE_SYMBOL_WITH_DEFINED_SECTION = 30,
    ENUM_INSTRUCTION_NOT_DIVISIBLE_BY_PARCEL_BITS_SIZE = 31,
    ENUM_SECTION_FLAGS_DO_NOT_MATCH_TYPE_SPECIFIER = 32,
    ENUM_SECTION_UNKNOWN_FLAGS = 33,
    ENUM_DIRECTIVE_ALIGNMENT_MAX_BYTES_TO_BE_SKIPPED = 34,
    ENUM_DIRECTIVE_INCBIN_COUNT = 35,
    ENUM_DIRECTIVE_INCBIN_SKIP_ADDED_TO_COUNT = 36,
    ENUM_PREVIOUS_WITHOUT_CORRESPONDING_SECTION = 37
} WarningCode;

typedef codasip::MessageInfo<> WarningInfo;

class WarningManager : public codasip::Singleton<WarningManager>
{
    SINGLETON(WarningManager);

public:
    static const WarningInfo& GetInfo(const WarningCode code);
    static const codasip::FormatPattern& GetPattern(const WarningCode code);

private:
    typedef std::map<WarningCode, WarningInfo> WarningInfos;

    codasip::FormatPattern& CreatePattern(const WarningCode);

    WarningInfos m_Infos;
};

}   // namespace wrn
}   // namespace assembler
}   // namespace codasip

#endif // ERR_ASSEMBLER_WRN_ENUM_H_
