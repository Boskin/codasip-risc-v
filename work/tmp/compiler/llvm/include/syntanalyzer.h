/**
 * Codasip Ltd
 *
 * CONFIDENTIAL
 *
 * Copyright 2014 Codasip Ltd
 *
 * All Rights Reserved.
 *
 * NOTICE: All information contained in this file, is and shall remain the property of Codasip Ltd
 * and its suppliers, if any.
 *
 * The intellectual and technical concepts contained herein are confidential and proprietary to
 * Codasip Ltd and are protected by trade secret and copyright law.  In addition, elements of the
 * technical concepts may be patent pending.
 *
 * This file is part of the Codasip Studio product. No part of the Studio product, including this
 * file, may be use, copied, modified, or distributed except in accordance with the terms contained
 * in Codasip license agreement under which you obtained this file.
 *
 *  \file
 *  \brief   This file contains class SyntAnalyzer that is used by asm control unit
 *           to start first assembler pass. In fact only starts bison generated parser.
 *  \author  Adam Husar
 *  \date    Jan 1, 2009
 */

#if !defined(EA_F3A321B0_827D_47f4_8FB9_D85A47FE5CCD__INCLUDED_)
#define EA_F3A321B0_827D_47f4_8FB9_D85A47FE5CCD__INCLUDED_

#include <stdio.h>

#include "asmsection.h"
#include "exprhandlerunit.h"
#include "instrcoderunit.h"


namespace codasip {
namespace assembler {


class SyntAnalyzer;


/// the one and only global object of syntactic analyzer class
extern SyntAnalyzer g_SyntAnalyzer;

////////////////////////////////////////////////////////////////////////////////////////////////////
/**
 *  \brief This is a class that provides method parse to start first assembler pass,
 *         also contains directive handler unit object and will contain expression handler unit and
 *         instruction coder.
 *         Is defined as global object because parser generated by bison (bisonbase.yy)
 *         must have access to contained objects.
 */
class SyntAnalyzer
{
public:
    /**
     * \brief Starts syntactic analyzer function.
     * \param[in] fin Input file to be parsed. Must be opened for reading.
     */
    void Parse(FILE* fin);

    SyntAnalyzer();

public:
    /// Expression handler unit used by syntactic analyzer to create expressions from
    /// AST created by actions from expressions rules.
    ExprHandlerUnit exprHandler;

    /// Class that receives instruction set grammar tokens and sends them
    /// to generated pair automata in order to translate instructs.
    InstructionCoder instrCoder;

    /// Unit used to store data to section and fixup tables.
    /// Used only by directive handler and instruction coder.
    DataAndFixupStoreUnit dataAndFixupStoreUnit;

    /// Unit used to store instructions, generated from BUNDLE section,
    /// if bundle section is not present, simply passes data to sections table.
    BundlingUnit bundlingUnit;
};

}   // codasip::assembler
}   // codasip

#endif  // !defined(EA_F3A321B0_827D_47f4_8FB9_D85A47FE5CCD__INCLUDED_)
