/**
 * Codasip Ltd
 *
 * CONFIDENTIAL
 *
 * Copyright 2014 Codasip Ltd
 *
 * All Rights Reserved.
 *
 * NOTICE: All information contained in this file, is and shall remain the property of Codasip Ltd
 * and its suppliers, if any.
 *
 * The intellectual and technical concepts contained herein are confidential and proprietary to
 * Codasip Ltd and are protected by trade secret and copyright law.  In addition, elements of the
 * technical concepts may be patent pending.
 *
 * This file is part of the Codasip Studio product. No part of the Studio product, including this
 * file, may be use, copied, modified, or distributed except in accordance with the terms contained
 * in Codasip license agreement under which you obtained this file.
 *
 *  \file
 *  \brief  In this file is defined a simple structure, that describes form of a triple:
 *          token number - token name and token string representation. This structure is used when
 *          generating information mainly about token string representation for assembler.
 *          File is included by asmmain and also by asmgenl. Data using this structure are
 *          generated by asmgenl.
 *   Part of assembler
 *  \author  Adam Husar
 *  \date    Jan 1, 2009
 */

#ifndef TOKEN_ID_INFO_H_
#define TOKEN_ID_INFO_H_

#include <string>


namespace codasip {
namespace assembler {


////////////////////////////////////////////////////////////////////////////////////////////////////
/**
 * \brief Triplet token number, name and string representation.
 */
class TokenIdInfo
{
public:
    TokenIdInfo(const int id, const std::string& name, const std::string& representation)
      : m_Id(id),
        m_Name(name),
        m_Representation(representation)
    {}

    inline int GetId() const;
    inline const std::string& GetName() const;
    inline const std::string& GetRepresentation() const;

private:
    /**
     * Token id used when generating %token number.
     * Assigned by SymbolNameAssigner.
     */
    int m_Id;
    /// Token name (like T_10 or T_DELIM).
    const std::string m_Name;
    /**
     * String that is recognized by lexical analyzer as token with id and name.
     * Used by instruction coder.
     */
    const std::string m_Representation;
};

////////////////////////////////////////////////////////////////////////////////////////////////////
inline int TokenIdInfo::GetId() const
{
    return m_Id;
}

inline const std::string& TokenIdInfo::GetName() const
{
    return m_Name;
}

inline const std::string& TokenIdInfo::GetRepresentation() const
{
    return m_Representation;
}

}   // codasip::assembler
}   // codasip

#endif  // TOKEN_ID_INFO_H_
