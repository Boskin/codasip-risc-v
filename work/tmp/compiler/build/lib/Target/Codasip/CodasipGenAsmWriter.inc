/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|* Assembly Writer Source Fragment                                            *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/

/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
void CodasipInstPrinter::printInstruction(const MCInst *MI, raw_ostream &O) {
  static const char AsmStrs[] = {
  /* 0 */ 's', 'b', 32, 'x', '0', ',', 32, '0', 32, '(', 32, 0,
  /* 12 */ 's', 'h', 32, 'x', '0', ',', 32, '0', 32, '(', 32, 0,
  /* 24 */ 's', 'w', 32, 'x', '0', ',', 32, '0', 32, '(', 32, 0,
  /* 36 */ 'b', 'g', 'e', 32, 'x', '0', ',', 32, 'x', '0', ',', 32, 0,
  /* 49 */ 'b', 'l', 'e', 32, 'x', '0', ',', 32, 'x', '0', ',', 32, 0,
  /* 62 */ 'b', 'e', 'q', 32, 'x', '0', ',', 32, 'x', '0', ',', 32, 0,
  /* 75 */ 'b', 'g', 'e', 'u', 32, 'x', '0', ',', 32, 'x', '0', ',', 32, 0,
  /* 89 */ 'b', 'g', 'e', 'u', 32, 'x', '1', ',', 32, 'x', '0', ',', 32, 0,
  /* 103 */ 'l', 'b', 32, 'x', '0', ',', 32, 0,
  /* 111 */ 's', 'b', 32, 'x', '0', ',', 32, 0,
  /* 119 */ 'b', 'g', 'e', 32, 'x', '0', ',', 32, 0,
  /* 128 */ 'b', 'l', 'e', 32, 'x', '0', ',', 32, 0,
  /* 137 */ 'b', 'n', 'e', 32, 'x', '0', ',', 32, 0,
  /* 146 */ 'l', 'h', 32, 'x', '0', ',', 32, 0,
  /* 154 */ 's', 'h', 32, 'x', '0', ',', 32, 0,
  /* 162 */ 'j', 'a', 'l', 32, 'x', '0', ',', 32, 0,
  /* 171 */ 'b', 'e', 'q', 32, 'x', '0', ',', 32, 0,
  /* 180 */ 'j', 'a', 'l', 'r', 32, 'x', '0', ',', 32, 0,
  /* 190 */ 'b', 'g', 't', 32, 'x', '0', ',', 32, 0,
  /* 199 */ 'b', 'l', 't', 32, 'x', '0', ',', 32, 0,
  /* 208 */ 'l', 'b', 'u', 32, 'x', '0', ',', 32, 0,
  /* 217 */ 'b', 'g', 'e', 'u', 32, 'x', '0', ',', 32, 0,
  /* 227 */ 'b', 'l', 'e', 'u', 32, 'x', '0', ',', 32, 0,
  /* 237 */ 'l', 'h', 'u', 32, 'x', '0', ',', 32, 0,
  /* 246 */ 'b', 'l', 't', 'u', 32, 'x', '0', ',', 32, 0,
  /* 256 */ 'l', 'w', 32, 'x', '0', ',', 32, 0,
  /* 264 */ 's', 'w', 32, 'x', '0', ',', 32, 0,
  /* 272 */ 'b', 'g', 'e', 'z', 32, 'x', '0', ',', 32, 0,
  /* 282 */ 'b', 'l', 'e', 'z', 32, 'x', '0', ',', 32, 0,
  /* 292 */ 'b', 'e', 'q', 'z', 32, 'x', '0', ',', 32, 0,
  /* 302 */ '#', 'C', 'A', 'L', 'L', 'S', 'E', 'Q', '_', 'E', 'N', 'D', 32, 0,
  /* 316 */ '#', 'C', 'A', 'L', 'L', 'S', 'E', 'Q', '_', 'S', 'T', 'A', 'R', 'T', 32, 0,
  /* 332 */ 's', 'r', 'a', 32, 0,
  /* 337 */ 'l', 'b', 32, 0,
  /* 341 */ 's', 'b', 32, 0,
  /* 345 */ 's', 'u', 'b', 32, 0,
  /* 350 */ 'a', 'u', 'i', 'p', 'c', 32, 0,
  /* 357 */ 'a', 'd', 'd', 32, 0,
  /* 362 */ 'a', 'n', 'd', 32, 0,
  /* 367 */ 'b', 'g', 'e', 32, 0,
  /* 372 */ 'b', 'l', 'e', 32, 0,
  /* 377 */ 'b', 'n', 'e', 32, 0,
  /* 382 */ 'n', 'e', 'g', 32, 0,
  /* 387 */ 'c', 'a', 'l', 'l', '_', 'r', 'e', 'g', 32, 0,
  /* 397 */ 'l', 'h', 32, 0,
  /* 401 */ 's', 'h', 32, 0,
  /* 405 */ 's', 'r', 'a', 'i', 32, 0,
  /* 411 */ 'a', 'd', 'd', 'i', 32, 0,
  /* 417 */ 'a', 'n', 'd', 'i', 32, 0,
  /* 423 */ 's', 'l', 'l', 'i', 32, 0,
  /* 429 */ 's', 'r', 'l', 'i', 32, 0,
  /* 435 */ 'x', 'o', 'r', 'i', 32, 0,
  /* 441 */ 's', 'l', 't', 'i', 32, 0,
  /* 447 */ 'l', 'u', 'i', 32, 0,
  /* 452 */ 'j', 32, 0,
  /* 455 */ 'j', 'a', 'l', 32, 0,
  /* 460 */ 'c', 'a', 'l', 'l', 32, 0,
  /* 466 */ 's', 'l', 'l', 32, 0,
  /* 471 */ 's', 'r', 'l', 32, 0,
  /* 476 */ 'b', 'e', 'q', 32, 0,
  /* 481 */ 'j', 'r', 32, 0,
  /* 485 */ 'j', 'a', 'l', 'r', 32, 0,
  /* 491 */ 'x', 'o', 'r', 32, 0,
  /* 496 */ 'b', 'g', 't', 32, 0,
  /* 501 */ 'b', 'l', 't', 32, 0,
  /* 506 */ 's', 'l', 't', 32, 0,
  /* 511 */ 'n', 'o', 't', 32, 0,
  /* 516 */ 'l', 'b', 'u', 32, 0,
  /* 521 */ 'b', 'g', 'e', 'u', 32, 0,
  /* 527 */ 'b', 'l', 'e', 'u', 32, 0,
  /* 533 */ 'l', 'h', 'u', 32, 0,
  /* 538 */ 's', 'l', 't', 'i', 'u', 32, 0,
  /* 545 */ 'b', 'g', 't', 'u', 32, 0,
  /* 551 */ 'b', 'l', 't', 'u', 32, 0,
  /* 557 */ 's', 'l', 't', 'u', 32, 0,
  /* 563 */ 'm', 'v', 32, 0,
  /* 567 */ 'l', 'w', 32, 0,
  /* 571 */ 's', 'w', 32, 0,
  /* 575 */ 'b', 'g', 'e', 'z', 32, 0,
  /* 581 */ 'b', 'l', 'e', 'z', 32, 0,
  /* 587 */ 'b', 'n', 'e', 'z', 32, 0,
  /* 593 */ 's', 'n', 'e', 'z', 32, 0,
  /* 599 */ 'b', 'e', 'q', 'z', 32, 0,
  /* 605 */ 's', 'e', 'q', 'z', 32, 0,
  /* 611 */ 'b', 'g', 't', 'z', 32, 0,
  /* 617 */ 's', 'g', 't', 'z', 32, 0,
  /* 623 */ 'b', 'l', 't', 'z', 32, 0,
  /* 629 */ 's', 'l', 't', 'z', 32, 0,
  /* 635 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'F', 'u', 'n', 'c', 't', 'i', 'o', 'n', 32, 'P', 'a', 't', 'c', 'h', 'a', 'b', 'l', 'e', 32, 'R', 'E', 'T', '.', 0,
  /* 666 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'F', 'u', 'n', 'c', 't', 'i', 'o', 'n', 32, 'E', 'n', 't', 'e', 'r', '.', 0,
  /* 689 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'T', 'a', 'i', 'l', 32, 'C', 'a', 'l', 'l', 32, 'E', 'x', 'i', 't', '.', 0,
  /* 712 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'F', 'u', 'n', 'c', 't', 'i', 'o', 'n', 32, 'E', 'x', 'i', 't', '.', 0,
  /* 734 */ 'b', 'n', 'e', 32, 'x', '0', ',', 32, 'x', '0', ',', 32, '0', 0,
  /* 748 */ 's', 'r', 'a', 'i', 32, 'x', '0', ',', 32, 'x', '0', ',', 32, '0', 0,
  /* 763 */ 'a', 'd', 'd', 'i', 32, 'x', '0', ',', 32, 'x', '0', ',', 32, '0', 0,
  /* 778 */ 'a', 'n', 'd', 'i', 32, 'x', '0', ',', 32, 'x', '0', ',', 32, '0', 0,
  /* 793 */ 's', 'l', 'l', 'i', 32, 'x', '0', ',', 32, 'x', '0', ',', 32, '0', 0,
  /* 808 */ 's', 'r', 'l', 'i', 32, 'x', '0', ',', 32, 'x', '0', ',', 32, '0', 0,
  /* 823 */ 'x', 'o', 'r', 'i', 32, 'x', '0', ',', 32, 'x', '0', ',', 32, '0', 0,
  /* 838 */ 's', 'l', 't', 'i', 32, 'x', '0', ',', 32, 'x', '0', ',', 32, '0', 0,
  /* 853 */ 'b', 'g', 't', 32, 'x', '0', ',', 32, 'x', '0', ',', 32, '0', 0,
  /* 867 */ 'b', 'l', 't', 32, 'x', '0', ',', 32, 'x', '0', ',', 32, '0', 0,
  /* 881 */ 'b', 'l', 'e', 'u', 32, 'x', '0', ',', 32, 'x', '0', ',', 32, '0', 0,
  /* 896 */ 's', 'l', 't', 'i', 'u', 32, 'x', '0', ',', 32, 'x', '0', ',', 32, '0', 0,
  /* 912 */ 'b', 'g', 't', 'u', 32, 'x', '0', ',', 32, 'x', '0', ',', 32, '0', 0,
  /* 927 */ 'b', 'l', 't', 'u', 32, 'x', '0', ',', 32, 'x', '0', ',', 32, '0', 0,
  /* 942 */ 'b', 'l', 'e', 'u', 32, 'x', '1', ',', 32, 'x', '0', ',', 32, '0', 0,
  /* 957 */ 'b', 'l', 't', 'u', 32, 'x', '1', ',', 32, 'x', '0', ',', 32, '0', 0,
  /* 972 */ 'a', 'u', 'i', 'p', 'c', 32, 'x', '0', ',', 32, '0', 0,
  /* 984 */ 'l', 'i', 32, 'x', '0', ',', 32, '0', 0,
  /* 993 */ 'l', 'u', 'i', 32, 'x', '0', ',', 32, '0', 0,
  /* 1003 */ 'b', 'n', 'e', 'z', 32, 'x', '0', ',', 32, '0', 0,
  /* 1014 */ 'b', 'g', 't', 'z', 32, 'x', '0', ',', 32, '0', 0,
  /* 1025 */ 'b', 'l', 't', 'z', 32, 'x', '0', ',', 32, '0', 0,
  /* 1036 */ 's', 'r', 'a', 'i', 32, 'x', '0', ',', 32, 'x', '1', ',', 32, '0', 0,
  /* 1051 */ 'a', 'd', 'd', 'i', 32, 'x', '0', ',', 32, 'x', '1', ',', 32, '0', 0,
  /* 1066 */ 'a', 'n', 'd', 'i', 32, 'x', '0', ',', 32, 'x', '1', ',', 32, '0', 0,
  /* 1081 */ 's', 'l', 'l', 'i', 32, 'x', '0', ',', 32, 'x', '1', ',', 32, '0', 0,
  /* 1096 */ 's', 'r', 'l', 'i', 32, 'x', '0', ',', 32, 'x', '1', ',', 32, '0', 0,
  /* 1111 */ 'x', 'o', 'r', 'i', 32, 'x', '0', ',', 32, 'x', '1', ',', 32, '0', 0,
  /* 1126 */ 's', 'l', 't', 'i', 32, 'x', '0', ',', 32, 'x', '1', ',', 32, '0', 0,
  /* 1141 */ 's', 'l', 't', 'i', 'u', 32, 'x', '0', ',', 32, 'x', '1', ',', 32, '0', 0,
  /* 1157 */ 'b', 'g', 't', 'u', 32, 'x', '0', ',', 32, 'x', '1', ',', 32, '0', 0,
  /* 1172 */ 's', 'r', 'a', 32, 'x', '0', ',', 32, 'x', '0', ',', 32, 'x', '0', 0,
  /* 1187 */ 's', 'u', 'b', 32, 'x', '0', ',', 32, 'x', '0', ',', 32, 'x', '0', 0,
  /* 1202 */ 'a', 'd', 'd', 32, 'x', '0', ',', 32, 'x', '0', ',', 32, 'x', '0', 0,
  /* 1217 */ 'a', 'n', 'd', 32, 'x', '0', ',', 32, 'x', '0', ',', 32, 'x', '0', 0,
  /* 1232 */ 's', 'l', 'l', 32, 'x', '0', ',', 32, 'x', '0', ',', 32, 'x', '0', 0,
  /* 1247 */ 's', 'r', 'l', 32, 'x', '0', ',', 32, 'x', '0', ',', 32, 'x', '0', 0,
  /* 1262 */ 'x', 'o', 'r', 32, 'x', '0', ',', 32, 'x', '0', ',', 32, 'x', '0', 0,
  /* 1277 */ 's', 'l', 't', 32, 'x', '0', ',', 32, 'x', '0', ',', 32, 'x', '0', 0,
  /* 1292 */ 's', 'l', 't', 'u', 32, 'x', '0', ',', 32, 'x', '0', ',', 32, 'x', '0', 0,
  /* 1308 */ 'n', 'e', 'g', 32, 'x', '0', ',', 32, 'x', '0', 0,
  /* 1319 */ 'n', 'o', 't', 32, 'x', '0', ',', 32, 'x', '0', 0,
  /* 1330 */ 'm', 'v', 32, 'x', '0', ',', 32, 'x', '0', 0,
  /* 1340 */ 's', 'n', 'e', 'z', 32, 'x', '0', ',', 32, 'x', '0', 0,
  /* 1352 */ 's', 'e', 'q', 'z', 32, 'x', '0', ',', 32, 'x', '0', 0,
  /* 1364 */ 's', 'g', 't', 'z', 32, 'x', '0', ',', 32, 'x', '0', 0,
  /* 1376 */ 's', 'l', 't', 'z', 32, 'x', '0', ',', 32, 'x', '0', 0,
  /* 1388 */ 's', 'r', 'a', 32, 'x', '0', ',', 32, 'x', '1', ',', 32, 'x', '0', 0,
  /* 1403 */ 's', 'u', 'b', 32, 'x', '0', ',', 32, 'x', '1', ',', 32, 'x', '0', 0,
  /* 1418 */ 'a', 'd', 'd', 32, 'x', '0', ',', 32, 'x', '1', ',', 32, 'x', '0', 0,
  /* 1433 */ 'a', 'n', 'd', 32, 'x', '0', ',', 32, 'x', '1', ',', 32, 'x', '0', 0,
  /* 1448 */ 's', 'l', 'l', 32, 'x', '0', ',', 32, 'x', '1', ',', 32, 'x', '0', 0,
  /* 1463 */ 's', 'r', 'l', 32, 'x', '0', ',', 32, 'x', '1', ',', 32, 'x', '0', 0,
  /* 1478 */ 'x', 'o', 'r', 32, 'x', '0', ',', 32, 'x', '1', ',', 32, 'x', '0', 0,
  /* 1493 */ 's', 'l', 't', 32, 'x', '0', ',', 32, 'x', '1', ',', 32, 'x', '0', 0,
  /* 1508 */ 's', 'l', 't', 'u', 32, 'x', '0', ',', 32, 'x', '1', ',', 32, 'x', '0', 0,
  /* 1524 */ 's', 'r', 'a', 32, 'x', '0', ',', 32, 'x', '0', ',', 32, 'x', '1', 0,
  /* 1539 */ 's', 'u', 'b', 32, 'x', '0', ',', 32, 'x', '0', ',', 32, 'x', '1', 0,
  /* 1554 */ 'a', 'd', 'd', 32, 'x', '0', ',', 32, 'x', '0', ',', 32, 'x', '1', 0,
  /* 1569 */ 'a', 'n', 'd', 32, 'x', '0', ',', 32, 'x', '0', ',', 32, 'x', '1', 0,
  /* 1584 */ 's', 'l', 'l', 32, 'x', '0', ',', 32, 'x', '0', ',', 32, 'x', '1', 0,
  /* 1599 */ 's', 'r', 'l', 32, 'x', '0', ',', 32, 'x', '0', ',', 32, 'x', '1', 0,
  /* 1614 */ 'x', 'o', 'r', 32, 'x', '0', ',', 32, 'x', '0', ',', 32, 'x', '1', 0,
  /* 1629 */ 's', 'l', 't', 32, 'x', '0', ',', 32, 'x', '0', ',', 32, 'x', '1', 0,
  /* 1644 */ 's', 'l', 't', 'u', 32, 'x', '0', ',', 32, 'x', '0', ',', 32, 'x', '1', 0,
  /* 1660 */ 'n', 'e', 'g', 32, 'x', '0', ',', 32, 'x', '1', 0,
  /* 1671 */ 'n', 'o', 't', 32, 'x', '0', ',', 32, 'x', '1', 0,
  /* 1682 */ 'm', 'v', 32, 'x', '0', ',', 32, 'x', '1', 0,
  /* 1692 */ 's', 'n', 'e', 'z', 32, 'x', '0', ',', 32, 'x', '1', 0,
  /* 1704 */ 's', 'e', 'q', 'z', 32, 'x', '0', ',', 32, 'x', '1', 0,
  /* 1716 */ 's', 'g', 't', 'z', 32, 'x', '0', ',', 32, 'x', '1', 0,
  /* 1728 */ 's', 'l', 't', 'z', 32, 'x', '0', ',', 32, 'x', '1', 0,
  /* 1740 */ 's', 'r', 'a', 32, 'x', '0', ',', 32, 'x', '1', ',', 32, 'x', '1', 0,
  /* 1755 */ 's', 'u', 'b', 32, 'x', '0', ',', 32, 'x', '1', ',', 32, 'x', '1', 0,
  /* 1770 */ 'a', 'd', 'd', 32, 'x', '0', ',', 32, 'x', '1', ',', 32, 'x', '1', 0,
  /* 1785 */ 'a', 'n', 'd', 32, 'x', '0', ',', 32, 'x', '1', ',', 32, 'x', '1', 0,
  /* 1800 */ 's', 'l', 'l', 32, 'x', '0', ',', 32, 'x', '1', ',', 32, 'x', '1', 0,
  /* 1815 */ 's', 'r', 'l', 32, 'x', '0', ',', 32, 'x', '1', ',', 32, 'x', '1', 0,
  /* 1830 */ 'x', 'o', 'r', 32, 'x', '0', ',', 32, 'x', '1', ',', 32, 'x', '1', 0,
  /* 1845 */ 's', 'l', 't', 32, 'x', '0', ',', 32, 'x', '1', ',', 32, 'x', '1', 0,
  /* 1860 */ 's', 'l', 't', 'u', 32, 'x', '0', ',', 32, 'x', '1', ',', 32, 'x', '1', 0,
  /* 1876 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'E', 'N', 'D', 0,
  /* 1889 */ 'B', 'U', 'N', 'D', 'L', 'E', 0,
  /* 1896 */ 'D', 'B', 'G', '_', 'V', 'A', 'L', 'U', 'E', 0,
  /* 1906 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'S', 'T', 'A', 'R', 'T', 0,
  /* 1921 */ 'n', 'o', 'p', 0,
  /* 1925 */ 'r', 'e', 't', 0,
  };

  static const uint16_t OpInfo0[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    1897U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    1890U,	// BUNDLE
    1907U,	// LIFETIME_START
    1877U,	// LIFETIME_END
    0U,	// STACKMAP
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_LOAD_OP
    0U,	// PATCHABLE_OP
    667U,	// PATCHABLE_FUNCTION_ENTER
    636U,	// PATCHABLE_RET
    713U,	// PATCHABLE_FUNCTION_EXIT
    690U,	// PATCHABLE_TAIL_CALL
    0U,	// G_ADD
    0U,	// G_SUB
    0U,	// G_MUL
    0U,	// G_SDIV
    0U,	// G_UDIV
    0U,	// G_SREM
    0U,	// G_UREM
    0U,	// G_AND
    0U,	// G_OR
    0U,	// G_XOR
    0U,	// G_FRAME_INDEX
    0U,	// G_GLOBAL_VALUE
    0U,	// G_EXTRACT
    0U,	// G_INSERT
    0U,	// G_SEQUENCE
    0U,	// G_PTRTOINT
    0U,	// G_INTTOPTR
    0U,	// G_BITCAST
    0U,	// G_LOAD
    0U,	// G_STORE
    0U,	// G_BRCOND
    0U,	// G_INTRINSIC
    0U,	// G_INTRINSIC_W_SIDE_EFFECTS
    0U,	// G_ANYEXT
    0U,	// G_TRUNC
    0U,	// G_CONSTANT
    0U,	// G_FCONSTANT
    0U,	// G_SEXT
    0U,	// G_ZEXT
    0U,	// G_SHL
    0U,	// G_LSHR
    0U,	// G_ASHR
    0U,	// G_ICMP
    0U,	// G_FCMP
    0U,	// G_SELECT
    0U,	// G_UADDE
    0U,	// G_USUBE
    0U,	// G_SADDO
    0U,	// G_SSUBO
    0U,	// G_UMULO
    0U,	// G_SMULO
    0U,	// G_FADD
    0U,	// G_FSUB
    0U,	// G_FMUL
    0U,	// G_FDIV
    0U,	// G_FREM
    0U,	// G_FPEXT
    0U,	// G_FPTRUNC
    0U,	// G_FPTOSI
    0U,	// G_FPTOUI
    0U,	// G_SITOFP
    0U,	// G_UITOFP
    0U,	// G_GEP
    0U,	// G_BR
    2351U,	// CALLEND
    10557U,	// CALLSTART
    0U,	// e_movi32__
    0U,	// e_movi32__BA
    0U,	// e_movi32__CP
    0U,	// e_movi32__ES
    0U,	// e_movi32__GA
    0U,	// e_movi32__JT
    1203U,	// i_alu__opc_add__x_0__x_0__x_0__
    1555U,	// i_alu__opc_add__x_0__x_0__xpr__
    1419U,	// i_alu__opc_add__x_0__xpr__x_0__
    1771U,	// i_alu__opc_add__x_0__xpr__xpr__
    18790U,	// i_alu__opc_add__xpr__x_0__x_0__
    26982U,	// i_alu__opc_add__xpr__x_0__xpr__
    2406U,	// i_alu__opc_add__xpr__xpr__x_0__
    2406U,	// i_alu__opc_add__xpr__xpr__xpr__
    1218U,	// i_alu__opc_and__x_0__x_0__x_0__
    1570U,	// i_alu__opc_and__x_0__x_0__xpr__
    1434U,	// i_alu__opc_and__x_0__xpr__x_0__
    1786U,	// i_alu__opc_and__x_0__xpr__xpr__
    18795U,	// i_alu__opc_and__xpr__x_0__x_0__
    35179U,	// i_alu__opc_and__xpr__x_0__xpr__
    43371U,	// i_alu__opc_and__xpr__xpr__x_0__
    2411U,	// i_alu__opc_and__xpr__xpr__xpr__
    1264U,	// i_alu__opc_or__x_0__x_0__x_0__
    1616U,	// i_alu__opc_or__x_0__x_0__xpr__
    1480U,	// i_alu__opc_or__x_0__xpr__x_0__
    1832U,	// i_alu__opc_or__x_0__xpr__xpr__
    18925U,	// i_alu__opc_or__xpr__x_0__x_0__
    27117U,	// i_alu__opc_or__xpr__x_0__xpr__
    2541U,	// i_alu__opc_or__xpr__xpr__x_0__
    2541U,	// i_alu__opc_or__xpr__xpr__xpr__
    1233U,	// i_alu__opc_sll__x_0__x_0__x_0__
    1585U,	// i_alu__opc_sll__x_0__x_0__xpr__
    1449U,	// i_alu__opc_sll__x_0__xpr__x_0__
    1801U,	// i_alu__opc_sll__x_0__xpr__xpr__
    18899U,	// i_alu__opc_sll__xpr__x_0__x_0__
    35283U,	// i_alu__opc_sll__xpr__x_0__xpr__
    2515U,	// i_alu__opc_sll__xpr__xpr__x_0__
    2515U,	// i_alu__opc_sll__xpr__xpr__xpr__
    1278U,	// i_alu__opc_slt__x_0__x_0__x_0__
    1630U,	// i_alu__opc_slt__x_0__x_0__xpr__
    1494U,	// i_alu__opc_slt__x_0__xpr__x_0__
    1846U,	// i_alu__opc_slt__x_0__xpr__xpr__
    18939U,	// i_alu__opc_slt__xpr__x_0__x_0__
    27131U,	// i_alu__opc_slt__xpr__x_0__xpr__
    2555U,	// i_alu__opc_slt__xpr__xpr__x_0__
    2555U,	// i_alu__opc_slt__xpr__xpr__xpr__
    2555U,	// i_alu__opc_slt__xpr__xpr__xpr__swappedCmpClone0__
    1293U,	// i_alu__opc_sltu__x_0__x_0__x_0__
    1645U,	// i_alu__opc_sltu__x_0__x_0__xpr__
    1509U,	// i_alu__opc_sltu__x_0__xpr__x_0__
    1861U,	// i_alu__opc_sltu__x_0__xpr__xpr__
    18990U,	// i_alu__opc_sltu__xpr__x_0__x_0__
    27182U,	// i_alu__opc_sltu__xpr__x_0__xpr__
    43566U,	// i_alu__opc_sltu__xpr__xpr__x_0__
    2606U,	// i_alu__opc_sltu__xpr__xpr__xpr__
    2606U,	// i_alu__opc_sltu__xpr__xpr__xpr__swappedCmpClone0__
    1173U,	// i_alu__opc_sra__x_0__x_0__x_0__
    1525U,	// i_alu__opc_sra__x_0__x_0__xpr__
    1389U,	// i_alu__opc_sra__x_0__xpr__x_0__
    1741U,	// i_alu__opc_sra__x_0__xpr__xpr__
    18765U,	// i_alu__opc_sra__xpr__x_0__x_0__
    35149U,	// i_alu__opc_sra__xpr__x_0__xpr__
    2381U,	// i_alu__opc_sra__xpr__xpr__x_0__
    2381U,	// i_alu__opc_sra__xpr__xpr__xpr__
    1248U,	// i_alu__opc_srl__x_0__x_0__x_0__
    1600U,	// i_alu__opc_srl__x_0__x_0__xpr__
    1464U,	// i_alu__opc_srl__x_0__xpr__x_0__
    1816U,	// i_alu__opc_srl__x_0__xpr__xpr__
    18904U,	// i_alu__opc_srl__xpr__x_0__x_0__
    35288U,	// i_alu__opc_srl__xpr__x_0__xpr__
    2520U,	// i_alu__opc_srl__xpr__xpr__x_0__
    2520U,	// i_alu__opc_srl__xpr__xpr__xpr__
    1188U,	// i_alu__opc_sub__x_0__x_0__x_0__
    1540U,	// i_alu__opc_sub__x_0__x_0__xpr__
    1404U,	// i_alu__opc_sub__x_0__xpr__x_0__
    1756U,	// i_alu__opc_sub__x_0__xpr__xpr__
    18778U,	// i_alu__opc_sub__xpr__x_0__x_0__
    26970U,	// i_alu__opc_sub__xpr__x_0__xpr__
    2394U,	// i_alu__opc_sub__xpr__xpr__x_0__
    2394U,	// i_alu__opc_sub__xpr__xpr__xpr__
    1263U,	// i_alu__opc_xor__x_0__x_0__x_0__
    1615U,	// i_alu__opc_xor__x_0__x_0__xpr__
    1479U,	// i_alu__opc_xor__x_0__xpr__x_0__
    1831U,	// i_alu__opc_xor__x_0__xpr__xpr__
    18924U,	// i_alu__opc_xor__xpr__x_0__x_0__
    27116U,	// i_alu__opc_xor__xpr__x_0__xpr__
    2540U,	// i_alu__opc_xor__xpr__xpr__x_0__
    2540U,	// i_alu__opc_xor__xpr__xpr__xpr__
    764U,	// i_alu_i__opc_addi__x_0__x_0__simm12__
    1052U,	// i_alu_i__opc_addi__x_0__xpr__simm12__
    27036U,	// i_alu_i__opc_addi__xpr__x_0__simm12__
    2460U,	// i_alu_i__opc_addi__xpr__xpr__simm12__
    0U,	// i_alu_i__opc_addi__xpr__xpr__simm12__6_BIGIMM_EMUL_
    0U,	// i_alu_i__opc_addi__xpr__xpr__simm12__7_BIGIMM_EMUL_
    0U,	// i_alu_i__opc_addi__xpr__xpr__simm12__8_BIGIMM_EMUL_
    2460U,	// i_alu_i__opc_addi__xpr__xpr__simm12__SPEC_CLONE_
    779U,	// i_alu_i__opc_andi__x_0__x_0__simm12__
    1067U,	// i_alu_i__opc_andi__x_0__xpr__simm12__
    51618U,	// i_alu_i__opc_andi__xpr__x_0__simm12__
    2466U,	// i_alu_i__opc_andi__xpr__xpr__simm12__
    825U,	// i_alu_i__opc_ori__x_0__x_0__simm12__
    1113U,	// i_alu_i__opc_ori__x_0__xpr__simm12__
    27061U,	// i_alu_i__opc_ori__xpr__x_0__simm12__
    27061U,	// i_alu_i__opc_ori__xpr__x_0__simm12__SYNTAX_CLONE_e_movi32__2_
    2485U,	// i_alu_i__opc_ori__xpr__xpr__simm12__
    839U,	// i_alu_i__opc_slti__x_0__x_0__simm12__
    1127U,	// i_alu_i__opc_slti__x_0__xpr__simm12__
    27066U,	// i_alu_i__opc_slti__xpr__x_0__simm12__
    51642U,	// i_alu_i__opc_slti__xpr__x_0__simm12__immSpecClone__imm_1__0__
    59834U,	// i_alu_i__opc_slti__xpr__x_0__simm12__immSpecClone__imm_1__1__
    2490U,	// i_alu_i__opc_slti__xpr__xpr__simm12__
    897U,	// i_alu_i__opc_sltiu__x_0__x_0__simm12__
    1142U,	// i_alu_i__opc_sltiu__x_0__xpr__simm12__
    27163U,	// i_alu_i__opc_sltiu__xpr__x_0__simm12__
    51739U,	// i_alu_i__opc_sltiu__xpr__x_0__simm12__immSpecClone__imm_1__0__
    59931U,	// i_alu_i__opc_sltiu__xpr__x_0__simm12__immSpecClone__imm_1__1__
    2587U,	// i_alu_i__opc_sltiu__xpr__xpr__simm12__
    824U,	// i_alu_i__opc_xori__x_0__x_0__simm12__
    1112U,	// i_alu_i__opc_xori__x_0__xpr__simm12__
    27060U,	// i_alu_i__opc_xori__xpr__x_0__simm12__
    2484U,	// i_alu_i__opc_xori__xpr__xpr__simm12__
    10533U,	// i_beqz_alias__x_0__rel_addr12__
    10533U,	// i_beqz_alias__x_0__rel_addr12__TAILCALL_CLONE_
    10533U,	// i_beqz_alias__x_0__rel_addr12__TAILCALL_CLONE_BA
    10533U,	// i_beqz_alias__x_0__rel_addr12__TAILCALL_CLONE_ES
    2648U,	// i_beqz_alias__xpr__rel_addr12__
    10513U,	// i_bgez_alias__x_0__rel_addr12__
    10513U,	// i_bgez_alias__x_0__rel_addr12__TAILCALL_CLONE_
    10513U,	// i_bgez_alias__x_0__rel_addr12__TAILCALL_CLONE_BA
    10513U,	// i_bgez_alias__x_0__rel_addr12__TAILCALL_CLONE_ES
    2624U,	// i_bgez_alias__xpr__rel_addr12__
    854U,	// i_bgt_alias__x_0__x_0__rel_addr12__
    2239U,	// i_bgt_alias__x_0__xpr__rel_addr12__
    27121U,	// i_bgt_alias__xpr__x_0__rel_addr12__
    2545U,	// i_bgt_alias__xpr__xpr__rel_addr12__
    4593U,	// i_bgt_alias__xpr__xpr__rel_addr12__swappedCmpClone0__
    913U,	// i_bgtu_alias__x_0__x_0__rel_addr12__
    1158U,	// i_bgtu_alias__x_0__xpr__rel_addr12__
    27170U,	// i_bgtu_alias__xpr__x_0__rel_addr12__
    2594U,	// i_bgtu_alias__xpr__xpr__rel_addr12__
    4642U,	// i_bgtu_alias__xpr__xpr__rel_addr12__swappedCmpClone0__
    1015U,	// i_bgtz_alias__x_0__rel_addr12__
    2660U,	// i_bgtz_alias__xpr__rel_addr12__
    10290U,	// i_ble_alias__x_0__x_0__rel_addr12__
    10290U,	// i_ble_alias__x_0__x_0__rel_addr12__TAILCALL_CLONE_
    10290U,	// i_ble_alias__x_0__x_0__rel_addr12__TAILCALL_CLONE_BA
    10290U,	// i_ble_alias__x_0__x_0__rel_addr12__TAILCALL_CLONE_ES
    2177U,	// i_ble_alias__x_0__xpr__rel_addr12__
    26997U,	// i_ble_alias__xpr__x_0__rel_addr12__
    2421U,	// i_ble_alias__xpr__xpr__rel_addr12__
    4469U,	// i_ble_alias__xpr__xpr__rel_addr12__swappedCmpClone0__
    882U,	// i_bleu_alias__x_0__x_0__rel_addr12__
    2276U,	// i_bleu_alias__x_0__xpr__rel_addr12__
    943U,	// i_bleu_alias__xpr__x_0__rel_addr12__
    2576U,	// i_bleu_alias__xpr__xpr__rel_addr12__
    4624U,	// i_bleu_alias__xpr__xpr__rel_addr12__swappedCmpClone0__
    10523U,	// i_blez_alias__x_0__rel_addr12__
    10523U,	// i_blez_alias__x_0__rel_addr12__TAILCALL_CLONE_
    10523U,	// i_blez_alias__x_0__rel_addr12__TAILCALL_CLONE_BA
    10523U,	// i_blez_alias__x_0__rel_addr12__TAILCALL_CLONE_ES
    2630U,	// i_blez_alias__xpr__rel_addr12__
    1026U,	// i_bltz_alias__x_0__rel_addr12__
    2672U,	// i_bltz_alias__xpr__rel_addr12__
    1004U,	// i_bnez_alias__x_0__rel_addr12__
    2636U,	// i_bnez_alias__xpr__rel_addr12__
    10303U,	// i_branch__opc_beq__x_0__x_0__rel_addr12__
    10303U,	// i_branch__opc_beq__x_0__x_0__rel_addr12__TAILCALL_CLONE_
    10303U,	// i_branch__opc_beq__x_0__x_0__rel_addr12__TAILCALL_CLONE_BA
    10303U,	// i_branch__opc_beq__x_0__x_0__rel_addr12__TAILCALL_CLONE_ES
    2220U,	// i_branch__opc_beq__x_0__xpr__rel_addr12__
    27101U,	// i_branch__opc_beq__xpr__x_0__rel_addr12__
    2525U,	// i_branch__opc_beq__xpr__xpr__rel_addr12__
    10277U,	// i_branch__opc_bge__x_0__x_0__rel_addr12__
    10277U,	// i_branch__opc_bge__x_0__x_0__rel_addr12__TAILCALL_CLONE_
    10277U,	// i_branch__opc_bge__x_0__x_0__rel_addr12__TAILCALL_CLONE_BA
    10277U,	// i_branch__opc_bge__x_0__x_0__rel_addr12__TAILCALL_CLONE_ES
    2168U,	// i_branch__opc_bge__x_0__xpr__rel_addr12__
    26992U,	// i_branch__opc_bge__xpr__x_0__rel_addr12__
    2416U,	// i_branch__opc_bge__xpr__xpr__rel_addr12__
    4464U,	// i_branch__opc_bge__xpr__xpr__rel_addr12__swappedCmpClone0__
    10316U,	// i_branch__opc_bgeu__x_0__x_0__rel_addr12__
    10316U,	// i_branch__opc_bgeu__x_0__x_0__rel_addr12__TAILCALL_CLONE_
    10316U,	// i_branch__opc_bgeu__x_0__x_0__rel_addr12__TAILCALL_CLONE_BA
    10316U,	// i_branch__opc_bgeu__x_0__x_0__rel_addr12__TAILCALL_CLONE_ES
    2266U,	// i_branch__opc_bgeu__x_0__xpr__rel_addr12__
    10330U,	// i_branch__opc_bgeu__xpr__x_0__rel_addr12__
    10330U,	// i_branch__opc_bgeu__xpr__x_0__rel_addr12__TAILCALL_CLONE_
    10330U,	// i_branch__opc_bgeu__xpr__x_0__rel_addr12__TAILCALL_CLONE_BA
    10330U,	// i_branch__opc_bgeu__xpr__x_0__rel_addr12__TAILCALL_CLONE_ES
    2570U,	// i_branch__opc_bgeu__xpr__xpr__rel_addr12__
    4618U,	// i_branch__opc_bgeu__xpr__xpr__rel_addr12__swappedCmpClone0__
    868U,	// i_branch__opc_blt__x_0__x_0__rel_addr12__
    2248U,	// i_branch__opc_blt__x_0__xpr__rel_addr12__
    27126U,	// i_branch__opc_blt__xpr__x_0__rel_addr12__
    2550U,	// i_branch__opc_blt__xpr__xpr__rel_addr12__
    4598U,	// i_branch__opc_blt__xpr__xpr__rel_addr12__swappedCmpClone0__
    928U,	// i_branch__opc_bltu__x_0__x_0__rel_addr12__
    2295U,	// i_branch__opc_bltu__x_0__xpr__rel_addr12__
    958U,	// i_branch__opc_bltu__xpr__x_0__rel_addr12__
    2600U,	// i_branch__opc_bltu__xpr__xpr__rel_addr12__
    4648U,	// i_branch__opc_bltu__xpr__xpr__rel_addr12__swappedCmpClone0__
    735U,	// i_branch__opc_bne__x_0__x_0__rel_addr12__
    2186U,	// i_branch__opc_bne__x_0__xpr__rel_addr12__
    27002U,	// i_branch__opc_bne__xpr__x_0__rel_addr12__
    2426U,	// i_branch__opc_bne__xpr__xpr__rel_addr12__
    10701U,	// i_call_alias__rel_addr20__
    10701U,	// i_call_alias__rel_addr20__BA
    10701U,	// i_call_alias__rel_addr20__ES
    10628U,	// i_call_reg_alias__xpr__
    10693U,	// i_j_alias__rel_addr20__
    10693U,	// i_j_alias__rel_addr20__TAILCALL_CLONE_
    10693U,	// i_j_alias__rel_addr20__TAILCALL_CLONE_BA
    10693U,	// i_j_alias__rel_addr20__TAILCALL_CLONE_ES
    10403U,	// i_jal__opc_jal__x_0__rel_addr20__
    10403U,	// i_jal__opc_jal__x_0__rel_addr20__TAILCALL_CLONE_
    10403U,	// i_jal__opc_jal__x_0__rel_addr20__TAILCALL_CLONE_BA
    10403U,	// i_jal__opc_jal__x_0__rel_addr20__TAILCALL_CLONE_ES
    2504U,	// i_jal__opc_jal__xpr__rel_addr20__
    2229U,	// i_jalr__opc_jalr__x_0__rel_jalr_addr12__x_0__
    2229U,	// i_jalr__opc_jalr__x_0__rel_jalr_addr12__x_0__TAILCALL_CLONE_
    2229U,	// i_jalr__opc_jalr__x_0__rel_jalr_addr12__x_0__TAILCALL_CLONE_BA
    2229U,	// i_jalr__opc_jalr__x_0__rel_jalr_addr12__x_0__TAILCALL_CLONE_ES
    2534U,	// i_jalr__opc_jalr__xpr__rel_jalr_addr12__x_0__
    10722U,	// i_jr_alias__xpr__
    10722U,	// i_jr_alias__xpr__TAILCALL_CLONE_
    985U,	// i_li_alias__x_0__simm12__
    2474U,	// i_li_alias__xpr__simm12__
    2152U,	// i_load__opc_lb__x_0__simm12__x_0__
    12392U,	// i_load__opc_lb__x_0__simm12__xpr__
    2386U,	// i_load__opc_lb__xpr__simm12__x_0__
    2386U,	// i_load__opc_lb__xpr__simm12__x_0__AEXT_CLONE_
    2386U,	// i_load__opc_lb__xpr__simm12__xpr__
    2386U,	// i_load__opc_lb__xpr__simm12__xpr__AEXT_CLONE_
    18770U,	// i_load__opc_lb__xpr__simm12__xpr__SPEC_CLONE_
    18770U,	// i_load__opc_lb__xpr__simm12__xpr__SPEC_CLONE_AEXT_CLONE_
    2257U,	// i_load__opc_lbu__x_0__simm12__x_0__
    12497U,	// i_load__opc_lbu__x_0__simm12__xpr__
    2565U,	// i_load__opc_lbu__xpr__simm12__x_0__
    2565U,	// i_load__opc_lbu__xpr__simm12__xpr__
    18949U,	// i_load__opc_lbu__xpr__simm12__xpr__SPEC_CLONE_
    2195U,	// i_load__opc_lh__x_0__simm12__x_0__
    12435U,	// i_load__opc_lh__x_0__simm12__xpr__
    2446U,	// i_load__opc_lh__xpr__simm12__x_0__
    2446U,	// i_load__opc_lh__xpr__simm12__x_0__AEXT_CLONE_
    2446U,	// i_load__opc_lh__xpr__simm12__xpr__
    2446U,	// i_load__opc_lh__xpr__simm12__xpr__AEXT_CLONE_
    18830U,	// i_load__opc_lh__xpr__simm12__xpr__SPEC_CLONE_
    18830U,	// i_load__opc_lh__xpr__simm12__xpr__SPEC_CLONE_AEXT_CLONE_
    2286U,	// i_load__opc_lhu__x_0__simm12__x_0__
    12526U,	// i_load__opc_lhu__x_0__simm12__xpr__
    2582U,	// i_load__opc_lhu__xpr__simm12__x_0__
    2582U,	// i_load__opc_lhu__xpr__simm12__xpr__
    18966U,	// i_load__opc_lhu__xpr__simm12__xpr__SPEC_CLONE_
    2305U,	// i_load__opc_lw__x_0__simm12__x_0__
    12545U,	// i_load__opc_lw__x_0__simm12__xpr__
    2616U,	// i_load__opc_lw__xpr__simm12__x_0__
    2616U,	// i_load__opc_lw__xpr__simm12__xpr__
    0U,	// i_load__opc_lw__xpr__simm12__xpr__2_SUM2REGS_EMUL_
    0U,	// i_load__opc_lw__xpr__simm12__xpr__3_BIGIMM_EMUL_
    0U,	// i_load__opc_lw__xpr__simm12__xpr__5_BIGIMM_EMUL_
    19000U,	// i_load__opc_lw__xpr__simm12__xpr__SPEC_CLONE_
    1331U,	// i_mv_alias__x_0__x_0__
    1683U,	// i_mv_alias__x_0__xpr__
    27188U,	// i_mv_alias__xpr__x_0__
    2612U,	// i_mv_alias__xpr__xpr__
    1309U,	// i_neg_alias__x_0__x_0__
    1661U,	// i_neg_alias__x_0__xpr__
    27007U,	// i_neg_alias__xpr__x_0__
    2431U,	// i_neg_alias__xpr__xpr__
    1922U,	// i_nop_alias__
    1320U,	// i_not_alias__x_0__x_0__
    1672U,	// i_not_alias__x_0__xpr__
    27136U,	// i_not_alias__xpr__x_0__
    2560U,	// i_not_alias__xpr__xpr__
    1926U,	// i_ret_alias__
    1926U,	// i_ret_alias__TAILCALL_CLONE_
    1353U,	// i_seqz_alias__x_0__x_0__
    1705U,	// i_seqz_alias__x_0__xpr__
    27230U,	// i_seqz_alias__xpr__x_0__
    2654U,	// i_seqz_alias__xpr__xpr__
    1365U,	// i_sgtz_alias__x_0__x_0__
    1717U,	// i_sgtz_alias__x_0__xpr__
    27242U,	// i_sgtz_alias__xpr__x_0__
    2666U,	// i_sgtz_alias__xpr__xpr__
    794U,	// i_shift__opc_slli__x_0__x_0__shamt__
    1082U,	// i_shift__opc_slli__x_0__xpr__shamt__
    51624U,	// i_shift__opc_slli__xpr__x_0__shamt__
    2472U,	// i_shift__opc_slli__xpr__xpr__shamt__
    749U,	// i_shift__opc_srai__x_0__x_0__shamt__
    1037U,	// i_shift__opc_srai__x_0__xpr__shamt__
    51606U,	// i_shift__opc_srai__xpr__x_0__shamt__
    2454U,	// i_shift__opc_srai__xpr__xpr__shamt__
    809U,	// i_shift__opc_srli__x_0__x_0__shamt__
    1097U,	// i_shift__opc_srli__x_0__xpr__shamt__
    51630U,	// i_shift__opc_srli__xpr__x_0__shamt__
    2478U,	// i_shift__opc_srli__xpr__xpr__shamt__
    1377U,	// i_sltz_alias__x_0__x_0__
    1729U,	// i_sltz_alias__x_0__xpr__
    27254U,	// i_sltz_alias__xpr__x_0__
    2678U,	// i_sltz_alias__xpr__xpr__
    1341U,	// i_snez_alias__x_0__x_0__
    1693U,	// i_snez_alias__x_0__xpr__
    27218U,	// i_snez_alias__xpr__x_0__
    2642U,	// i_snez_alias__xpr__xpr__
    2160U,	// i_store__opc_sb__x_0__simm12__x_0__
    2160U,	// i_store__opc_sb__x_0__simm12__x_0__legalConstClonei32__
    12400U,	// i_store__opc_sb__x_0__simm12__xpr__
    34817U,	// i_store__opc_sb__x_0__simm12__xpr__SPEC_CLONE_
    12400U,	// i_store__opc_sb__x_0__simm12__xpr__legalConstClonei32__
    34817U,	// i_store__opc_sb__x_0__simm12__xpr__legalConstClonei32__SPEC_CLONE_
    2390U,	// i_store__opc_sb__xpr__simm12__x_0__
    2390U,	// i_store__opc_sb__xpr__simm12__xpr__
    18774U,	// i_store__opc_sb__xpr__simm12__xpr__SPEC_CLONE_
    2203U,	// i_store__opc_sh__x_0__simm12__x_0__
    2203U,	// i_store__opc_sh__x_0__simm12__x_0__legalConstClonei32__
    12443U,	// i_store__opc_sh__x_0__simm12__xpr__
    34829U,	// i_store__opc_sh__x_0__simm12__xpr__SPEC_CLONE_
    12443U,	// i_store__opc_sh__x_0__simm12__xpr__legalConstClonei32__
    34829U,	// i_store__opc_sh__x_0__simm12__xpr__legalConstClonei32__SPEC_CLONE_
    2450U,	// i_store__opc_sh__xpr__simm12__x_0__
    2450U,	// i_store__opc_sh__xpr__simm12__xpr__
    18834U,	// i_store__opc_sh__xpr__simm12__xpr__SPEC_CLONE_
    2313U,	// i_store__opc_sw__x_0__simm12__x_0__
    12553U,	// i_store__opc_sw__x_0__simm12__xpr__
    34841U,	// i_store__opc_sw__x_0__simm12__xpr__SPEC_CLONE_
    2620U,	// i_store__opc_sw__xpr__simm12__x_0__
    2620U,	// i_store__opc_sw__xpr__simm12__xpr__
    0U,	// i_store__opc_sw__xpr__simm12__xpr__0_SUM2REGS_EMUL_
    0U,	// i_store__opc_sw__xpr__simm12__xpr__1_BIGIMM_EMUL_
    0U,	// i_store__opc_sw__xpr__simm12__xpr__4_BIGIMM_EMUL_
    19004U,	// i_store__opc_sw__xpr__simm12__xpr__SPEC_CLONE_
    973U,	// i_upper_imm__opc_auipc__x_0__simm20__
    2399U,	// i_upper_imm__opc_auipc__xpr__simm20__
    43359U,	// i_upper_imm__opc_auipc__xpr__simm20__SPEC_CLONE_
    994U,	// i_upper_imm__opc_lui__x_0__simm20__
    2496U,	// i_upper_imm__opc_lui__xpr__simm20__
    2496U,	// i_upper_imm__opc_lui__xpr__simm20__SYNTAX_CLONE_e_movi32__1_
    0U,	// rule_SELECT_10
    0U,	// rule_SELECT_11
    0U,	// rule_SELECT_12
    0U,	// rule_SELECT_13
    0U,	// rule_SELECT_14
    0U,	// rule_SELECT_15
    0U,	// rule_SELECT_16
    0U,	// rule_SELECT_17
    0U,	// rule_SELECT_7
    0U,	// rule_SELECT_8
    0U,	// rule_SELECT_9
  };

  static const uint8_t OpInfo1[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    0U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    0U,	// BUNDLE
    0U,	// LIFETIME_START
    0U,	// LIFETIME_END
    0U,	// STACKMAP
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_LOAD_OP
    0U,	// PATCHABLE_OP
    0U,	// PATCHABLE_FUNCTION_ENTER
    0U,	// PATCHABLE_RET
    0U,	// PATCHABLE_FUNCTION_EXIT
    0U,	// PATCHABLE_TAIL_CALL
    0U,	// G_ADD
    0U,	// G_SUB
    0U,	// G_MUL
    0U,	// G_SDIV
    0U,	// G_UDIV
    0U,	// G_SREM
    0U,	// G_UREM
    0U,	// G_AND
    0U,	// G_OR
    0U,	// G_XOR
    0U,	// G_FRAME_INDEX
    0U,	// G_GLOBAL_VALUE
    0U,	// G_EXTRACT
    0U,	// G_INSERT
    0U,	// G_SEQUENCE
    0U,	// G_PTRTOINT
    0U,	// G_INTTOPTR
    0U,	// G_BITCAST
    0U,	// G_LOAD
    0U,	// G_STORE
    0U,	// G_BRCOND
    0U,	// G_INTRINSIC
    0U,	// G_INTRINSIC_W_SIDE_EFFECTS
    0U,	// G_ANYEXT
    0U,	// G_TRUNC
    0U,	// G_CONSTANT
    0U,	// G_FCONSTANT
    0U,	// G_SEXT
    0U,	// G_ZEXT
    0U,	// G_SHL
    0U,	// G_LSHR
    0U,	// G_ASHR
    0U,	// G_ICMP
    0U,	// G_FCMP
    0U,	// G_SELECT
    0U,	// G_UADDE
    0U,	// G_USUBE
    0U,	// G_SADDO
    0U,	// G_SSUBO
    0U,	// G_UMULO
    0U,	// G_SMULO
    0U,	// G_FADD
    0U,	// G_FSUB
    0U,	// G_FMUL
    0U,	// G_FDIV
    0U,	// G_FREM
    0U,	// G_FPEXT
    0U,	// G_FPTRUNC
    0U,	// G_FPTOSI
    0U,	// G_FPTOUI
    0U,	// G_SITOFP
    0U,	// G_UITOFP
    0U,	// G_GEP
    0U,	// G_BR
    0U,	// CALLEND
    0U,	// CALLSTART
    0U,	// e_movi32__
    0U,	// e_movi32__BA
    0U,	// e_movi32__CP
    0U,	// e_movi32__ES
    0U,	// e_movi32__GA
    0U,	// e_movi32__JT
    0U,	// i_alu__opc_add__x_0__x_0__x_0__
    0U,	// i_alu__opc_add__x_0__x_0__xpr__
    0U,	// i_alu__opc_add__x_0__xpr__x_0__
    0U,	// i_alu__opc_add__x_0__xpr__xpr__
    0U,	// i_alu__opc_add__xpr__x_0__x_0__
    2U,	// i_alu__opc_add__xpr__x_0__xpr__
    16U,	// i_alu__opc_add__xpr__xpr__x_0__
    36U,	// i_alu__opc_add__xpr__xpr__xpr__
    0U,	// i_alu__opc_and__x_0__x_0__x_0__
    0U,	// i_alu__opc_and__x_0__x_0__xpr__
    0U,	// i_alu__opc_and__x_0__xpr__x_0__
    0U,	// i_alu__opc_and__x_0__xpr__xpr__
    0U,	// i_alu__opc_and__xpr__x_0__x_0__
    0U,	// i_alu__opc_and__xpr__x_0__xpr__
    0U,	// i_alu__opc_and__xpr__xpr__x_0__
    36U,	// i_alu__opc_and__xpr__xpr__xpr__
    0U,	// i_alu__opc_or__x_0__x_0__x_0__
    0U,	// i_alu__opc_or__x_0__x_0__xpr__
    0U,	// i_alu__opc_or__x_0__xpr__x_0__
    0U,	// i_alu__opc_or__x_0__xpr__xpr__
    0U,	// i_alu__opc_or__xpr__x_0__x_0__
    2U,	// i_alu__opc_or__xpr__x_0__xpr__
    16U,	// i_alu__opc_or__xpr__xpr__x_0__
    36U,	// i_alu__opc_or__xpr__xpr__xpr__
    0U,	// i_alu__opc_sll__x_0__x_0__x_0__
    0U,	// i_alu__opc_sll__x_0__x_0__xpr__
    0U,	// i_alu__opc_sll__x_0__xpr__x_0__
    0U,	// i_alu__opc_sll__x_0__xpr__xpr__
    0U,	// i_alu__opc_sll__xpr__x_0__x_0__
    0U,	// i_alu__opc_sll__xpr__x_0__xpr__
    16U,	// i_alu__opc_sll__xpr__xpr__x_0__
    160U,	// i_alu__opc_sll__xpr__xpr__xpr__
    0U,	// i_alu__opc_slt__x_0__x_0__x_0__
    0U,	// i_alu__opc_slt__x_0__x_0__xpr__
    0U,	// i_alu__opc_slt__x_0__xpr__x_0__
    0U,	// i_alu__opc_slt__x_0__xpr__xpr__
    0U,	// i_alu__opc_slt__xpr__x_0__x_0__
    2U,	// i_alu__opc_slt__xpr__x_0__xpr__
    16U,	// i_alu__opc_slt__xpr__xpr__x_0__
    160U,	// i_alu__opc_slt__xpr__xpr__xpr__
    36U,	// i_alu__opc_slt__xpr__xpr__xpr__swappedCmpClone0__
    0U,	// i_alu__opc_sltu__x_0__x_0__x_0__
    0U,	// i_alu__opc_sltu__x_0__x_0__xpr__
    0U,	// i_alu__opc_sltu__x_0__xpr__x_0__
    0U,	// i_alu__opc_sltu__x_0__xpr__xpr__
    0U,	// i_alu__opc_sltu__xpr__x_0__x_0__
    2U,	// i_alu__opc_sltu__xpr__x_0__xpr__
    0U,	// i_alu__opc_sltu__xpr__xpr__x_0__
    160U,	// i_alu__opc_sltu__xpr__xpr__xpr__
    36U,	// i_alu__opc_sltu__xpr__xpr__xpr__swappedCmpClone0__
    0U,	// i_alu__opc_sra__x_0__x_0__x_0__
    0U,	// i_alu__opc_sra__x_0__x_0__xpr__
    0U,	// i_alu__opc_sra__x_0__xpr__x_0__
    0U,	// i_alu__opc_sra__x_0__xpr__xpr__
    0U,	// i_alu__opc_sra__xpr__x_0__x_0__
    0U,	// i_alu__opc_sra__xpr__x_0__xpr__
    16U,	// i_alu__opc_sra__xpr__xpr__x_0__
    160U,	// i_alu__opc_sra__xpr__xpr__xpr__
    0U,	// i_alu__opc_srl__x_0__x_0__x_0__
    0U,	// i_alu__opc_srl__x_0__x_0__xpr__
    0U,	// i_alu__opc_srl__x_0__xpr__x_0__
    0U,	// i_alu__opc_srl__x_0__xpr__xpr__
    0U,	// i_alu__opc_srl__xpr__x_0__x_0__
    0U,	// i_alu__opc_srl__xpr__x_0__xpr__
    16U,	// i_alu__opc_srl__xpr__xpr__x_0__
    160U,	// i_alu__opc_srl__xpr__xpr__xpr__
    0U,	// i_alu__opc_sub__x_0__x_0__x_0__
    0U,	// i_alu__opc_sub__x_0__x_0__xpr__
    0U,	// i_alu__opc_sub__x_0__xpr__x_0__
    0U,	// i_alu__opc_sub__x_0__xpr__xpr__
    0U,	// i_alu__opc_sub__xpr__x_0__x_0__
    2U,	// i_alu__opc_sub__xpr__x_0__xpr__
    16U,	// i_alu__opc_sub__xpr__xpr__x_0__
    160U,	// i_alu__opc_sub__xpr__xpr__xpr__
    0U,	// i_alu__opc_xor__x_0__x_0__x_0__
    0U,	// i_alu__opc_xor__x_0__x_0__xpr__
    0U,	// i_alu__opc_xor__x_0__xpr__x_0__
    0U,	// i_alu__opc_xor__x_0__xpr__xpr__
    0U,	// i_alu__opc_xor__xpr__x_0__x_0__
    2U,	// i_alu__opc_xor__xpr__x_0__xpr__
    16U,	// i_alu__opc_xor__xpr__xpr__x_0__
    36U,	// i_alu__opc_xor__xpr__xpr__xpr__
    0U,	// i_alu_i__opc_addi__x_0__x_0__simm12__
    0U,	// i_alu_i__opc_addi__x_0__xpr__simm12__
    2U,	// i_alu_i__opc_addi__xpr__x_0__simm12__
    160U,	// i_alu_i__opc_addi__xpr__xpr__simm12__
    0U,	// i_alu_i__opc_addi__xpr__xpr__simm12__6_BIGIMM_EMUL_
    0U,	// i_alu_i__opc_addi__xpr__xpr__simm12__7_BIGIMM_EMUL_
    0U,	// i_alu_i__opc_addi__xpr__xpr__simm12__8_BIGIMM_EMUL_
    48U,	// i_alu_i__opc_addi__xpr__xpr__simm12__SPEC_CLONE_
    0U,	// i_alu_i__opc_andi__x_0__x_0__simm12__
    0U,	// i_alu_i__opc_andi__x_0__xpr__simm12__
    0U,	// i_alu_i__opc_andi__xpr__x_0__simm12__
    160U,	// i_alu_i__opc_andi__xpr__xpr__simm12__
    0U,	// i_alu_i__opc_ori__x_0__x_0__simm12__
    0U,	// i_alu_i__opc_ori__x_0__xpr__simm12__
    2U,	// i_alu_i__opc_ori__xpr__x_0__simm12__
    6U,	// i_alu_i__opc_ori__xpr__x_0__simm12__SYNTAX_CLONE_e_movi32__2_
    160U,	// i_alu_i__opc_ori__xpr__xpr__simm12__
    0U,	// i_alu_i__opc_slti__x_0__x_0__simm12__
    0U,	// i_alu_i__opc_slti__x_0__xpr__simm12__
    2U,	// i_alu_i__opc_slti__xpr__x_0__simm12__
    0U,	// i_alu_i__opc_slti__xpr__x_0__simm12__immSpecClone__imm_1__0__
    0U,	// i_alu_i__opc_slti__xpr__x_0__simm12__immSpecClone__imm_1__1__
    160U,	// i_alu_i__opc_slti__xpr__xpr__simm12__
    0U,	// i_alu_i__opc_sltiu__x_0__x_0__simm12__
    0U,	// i_alu_i__opc_sltiu__x_0__xpr__simm12__
    2U,	// i_alu_i__opc_sltiu__xpr__x_0__simm12__
    0U,	// i_alu_i__opc_sltiu__xpr__x_0__simm12__immSpecClone__imm_1__0__
    0U,	// i_alu_i__opc_sltiu__xpr__x_0__simm12__immSpecClone__imm_1__1__
    160U,	// i_alu_i__opc_sltiu__xpr__xpr__simm12__
    0U,	// i_alu_i__opc_xori__x_0__x_0__simm12__
    0U,	// i_alu_i__opc_xori__x_0__xpr__simm12__
    2U,	// i_alu_i__opc_xori__xpr__x_0__simm12__
    160U,	// i_alu_i__opc_xori__xpr__xpr__simm12__
    0U,	// i_beqz_alias__x_0__rel_addr12__
    0U,	// i_beqz_alias__x_0__rel_addr12__TAILCALL_CLONE_
    0U,	// i_beqz_alias__x_0__rel_addr12__TAILCALL_CLONE_BA
    0U,	// i_beqz_alias__x_0__rel_addr12__TAILCALL_CLONE_ES
    0U,	// i_beqz_alias__xpr__rel_addr12__
    0U,	// i_bgez_alias__x_0__rel_addr12__
    0U,	// i_bgez_alias__x_0__rel_addr12__TAILCALL_CLONE_
    0U,	// i_bgez_alias__x_0__rel_addr12__TAILCALL_CLONE_BA
    0U,	// i_bgez_alias__x_0__rel_addr12__TAILCALL_CLONE_ES
    0U,	// i_bgez_alias__xpr__rel_addr12__
    0U,	// i_bgt_alias__x_0__x_0__rel_addr12__
    0U,	// i_bgt_alias__x_0__xpr__rel_addr12__
    2U,	// i_bgt_alias__xpr__x_0__rel_addr12__
    160U,	// i_bgt_alias__xpr__xpr__rel_addr12__
    8U,	// i_bgt_alias__xpr__xpr__rel_addr12__swappedCmpClone0__
    0U,	// i_bgtu_alias__x_0__x_0__rel_addr12__
    0U,	// i_bgtu_alias__x_0__xpr__rel_addr12__
    2U,	// i_bgtu_alias__xpr__x_0__rel_addr12__
    160U,	// i_bgtu_alias__xpr__xpr__rel_addr12__
    8U,	// i_bgtu_alias__xpr__xpr__rel_addr12__swappedCmpClone0__
    0U,	// i_bgtz_alias__x_0__rel_addr12__
    0U,	// i_bgtz_alias__xpr__rel_addr12__
    0U,	// i_ble_alias__x_0__x_0__rel_addr12__
    0U,	// i_ble_alias__x_0__x_0__rel_addr12__TAILCALL_CLONE_
    0U,	// i_ble_alias__x_0__x_0__rel_addr12__TAILCALL_CLONE_BA
    0U,	// i_ble_alias__x_0__x_0__rel_addr12__TAILCALL_CLONE_ES
    0U,	// i_ble_alias__x_0__xpr__rel_addr12__
    2U,	// i_ble_alias__xpr__x_0__rel_addr12__
    160U,	// i_ble_alias__xpr__xpr__rel_addr12__
    8U,	// i_ble_alias__xpr__xpr__rel_addr12__swappedCmpClone0__
    0U,	// i_bleu_alias__x_0__x_0__rel_addr12__
    0U,	// i_bleu_alias__x_0__xpr__rel_addr12__
    0U,	// i_bleu_alias__xpr__x_0__rel_addr12__
    160U,	// i_bleu_alias__xpr__xpr__rel_addr12__
    8U,	// i_bleu_alias__xpr__xpr__rel_addr12__swappedCmpClone0__
    0U,	// i_blez_alias__x_0__rel_addr12__
    0U,	// i_blez_alias__x_0__rel_addr12__TAILCALL_CLONE_
    0U,	// i_blez_alias__x_0__rel_addr12__TAILCALL_CLONE_BA
    0U,	// i_blez_alias__x_0__rel_addr12__TAILCALL_CLONE_ES
    0U,	// i_blez_alias__xpr__rel_addr12__
    0U,	// i_bltz_alias__x_0__rel_addr12__
    0U,	// i_bltz_alias__xpr__rel_addr12__
    0U,	// i_bnez_alias__x_0__rel_addr12__
    0U,	// i_bnez_alias__xpr__rel_addr12__
    0U,	// i_branch__opc_beq__x_0__x_0__rel_addr12__
    0U,	// i_branch__opc_beq__x_0__x_0__rel_addr12__TAILCALL_CLONE_
    0U,	// i_branch__opc_beq__x_0__x_0__rel_addr12__TAILCALL_CLONE_BA
    0U,	// i_branch__opc_beq__x_0__x_0__rel_addr12__TAILCALL_CLONE_ES
    0U,	// i_branch__opc_beq__x_0__xpr__rel_addr12__
    2U,	// i_branch__opc_beq__xpr__x_0__rel_addr12__
    160U,	// i_branch__opc_beq__xpr__xpr__rel_addr12__
    0U,	// i_branch__opc_bge__x_0__x_0__rel_addr12__
    0U,	// i_branch__opc_bge__x_0__x_0__rel_addr12__TAILCALL_CLONE_
    0U,	// i_branch__opc_bge__x_0__x_0__rel_addr12__TAILCALL_CLONE_BA
    0U,	// i_branch__opc_bge__x_0__x_0__rel_addr12__TAILCALL_CLONE_ES
    0U,	// i_branch__opc_bge__x_0__xpr__rel_addr12__
    2U,	// i_branch__opc_bge__xpr__x_0__rel_addr12__
    160U,	// i_branch__opc_bge__xpr__xpr__rel_addr12__
    8U,	// i_branch__opc_bge__xpr__xpr__rel_addr12__swappedCmpClone0__
    0U,	// i_branch__opc_bgeu__x_0__x_0__rel_addr12__
    0U,	// i_branch__opc_bgeu__x_0__x_0__rel_addr12__TAILCALL_CLONE_
    0U,	// i_branch__opc_bgeu__x_0__x_0__rel_addr12__TAILCALL_CLONE_BA
    0U,	// i_branch__opc_bgeu__x_0__x_0__rel_addr12__TAILCALL_CLONE_ES
    0U,	// i_branch__opc_bgeu__x_0__xpr__rel_addr12__
    0U,	// i_branch__opc_bgeu__xpr__x_0__rel_addr12__
    0U,	// i_branch__opc_bgeu__xpr__x_0__rel_addr12__TAILCALL_CLONE_
    0U,	// i_branch__opc_bgeu__xpr__x_0__rel_addr12__TAILCALL_CLONE_BA
    0U,	// i_branch__opc_bgeu__xpr__x_0__rel_addr12__TAILCALL_CLONE_ES
    160U,	// i_branch__opc_bgeu__xpr__xpr__rel_addr12__
    8U,	// i_branch__opc_bgeu__xpr__xpr__rel_addr12__swappedCmpClone0__
    0U,	// i_branch__opc_blt__x_0__x_0__rel_addr12__
    0U,	// i_branch__opc_blt__x_0__xpr__rel_addr12__
    2U,	// i_branch__opc_blt__xpr__x_0__rel_addr12__
    160U,	// i_branch__opc_blt__xpr__xpr__rel_addr12__
    8U,	// i_branch__opc_blt__xpr__xpr__rel_addr12__swappedCmpClone0__
    0U,	// i_branch__opc_bltu__x_0__x_0__rel_addr12__
    0U,	// i_branch__opc_bltu__x_0__xpr__rel_addr12__
    0U,	// i_branch__opc_bltu__xpr__x_0__rel_addr12__
    160U,	// i_branch__opc_bltu__xpr__xpr__rel_addr12__
    8U,	// i_branch__opc_bltu__xpr__xpr__rel_addr12__swappedCmpClone0__
    0U,	// i_branch__opc_bne__x_0__x_0__rel_addr12__
    0U,	// i_branch__opc_bne__x_0__xpr__rel_addr12__
    2U,	// i_branch__opc_bne__xpr__x_0__rel_addr12__
    160U,	// i_branch__opc_bne__xpr__xpr__rel_addr12__
    0U,	// i_call_alias__rel_addr20__
    0U,	// i_call_alias__rel_addr20__BA
    0U,	// i_call_alias__rel_addr20__ES
    0U,	// i_call_reg_alias__xpr__
    0U,	// i_j_alias__rel_addr20__
    0U,	// i_j_alias__rel_addr20__TAILCALL_CLONE_
    0U,	// i_j_alias__rel_addr20__TAILCALL_CLONE_BA
    0U,	// i_j_alias__rel_addr20__TAILCALL_CLONE_ES
    0U,	// i_jal__opc_jal__x_0__rel_addr20__
    0U,	// i_jal__opc_jal__x_0__rel_addr20__TAILCALL_CLONE_
    0U,	// i_jal__opc_jal__x_0__rel_addr20__TAILCALL_CLONE_BA
    0U,	// i_jal__opc_jal__x_0__rel_addr20__TAILCALL_CLONE_ES
    0U,	// i_jal__opc_jal__xpr__rel_addr20__
    1U,	// i_jalr__opc_jalr__x_0__rel_jalr_addr12__x_0__
    1U,	// i_jalr__opc_jalr__x_0__rel_jalr_addr12__x_0__TAILCALL_CLONE_
    1U,	// i_jalr__opc_jalr__x_0__rel_jalr_addr12__x_0__TAILCALL_CLONE_BA
    1U,	// i_jalr__opc_jalr__x_0__rel_jalr_addr12__x_0__TAILCALL_CLONE_ES
    64U,	// i_jalr__opc_jalr__xpr__rel_jalr_addr12__x_0__
    0U,	// i_jr_alias__xpr__
    0U,	// i_jr_alias__xpr__TAILCALL_CLONE_
    0U,	// i_li_alias__x_0__simm12__
    0U,	// i_li_alias__xpr__simm12__
    1U,	// i_load__opc_lb__x_0__simm12__x_0__
    1U,	// i_load__opc_lb__x_0__simm12__xpr__
    64U,	// i_load__opc_lb__xpr__simm12__x_0__
    64U,	// i_load__opc_lb__xpr__simm12__x_0__AEXT_CLONE_
    84U,	// i_load__opc_lb__xpr__simm12__xpr__
    84U,	// i_load__opc_lb__xpr__simm12__xpr__AEXT_CLONE_
    1U,	// i_load__opc_lb__xpr__simm12__xpr__SPEC_CLONE_
    1U,	// i_load__opc_lb__xpr__simm12__xpr__SPEC_CLONE_AEXT_CLONE_
    1U,	// i_load__opc_lbu__x_0__simm12__x_0__
    1U,	// i_load__opc_lbu__x_0__simm12__xpr__
    64U,	// i_load__opc_lbu__xpr__simm12__x_0__
    84U,	// i_load__opc_lbu__xpr__simm12__xpr__
    1U,	// i_load__opc_lbu__xpr__simm12__xpr__SPEC_CLONE_
    1U,	// i_load__opc_lh__x_0__simm12__x_0__
    1U,	// i_load__opc_lh__x_0__simm12__xpr__
    64U,	// i_load__opc_lh__xpr__simm12__x_0__
    64U,	// i_load__opc_lh__xpr__simm12__x_0__AEXT_CLONE_
    84U,	// i_load__opc_lh__xpr__simm12__xpr__
    84U,	// i_load__opc_lh__xpr__simm12__xpr__AEXT_CLONE_
    1U,	// i_load__opc_lh__xpr__simm12__xpr__SPEC_CLONE_
    1U,	// i_load__opc_lh__xpr__simm12__xpr__SPEC_CLONE_AEXT_CLONE_
    1U,	// i_load__opc_lhu__x_0__simm12__x_0__
    1U,	// i_load__opc_lhu__x_0__simm12__xpr__
    64U,	// i_load__opc_lhu__xpr__simm12__x_0__
    84U,	// i_load__opc_lhu__xpr__simm12__xpr__
    1U,	// i_load__opc_lhu__xpr__simm12__xpr__SPEC_CLONE_
    1U,	// i_load__opc_lw__x_0__simm12__x_0__
    1U,	// i_load__opc_lw__x_0__simm12__xpr__
    64U,	// i_load__opc_lw__xpr__simm12__x_0__
    84U,	// i_load__opc_lw__xpr__simm12__xpr__
    0U,	// i_load__opc_lw__xpr__simm12__xpr__2_SUM2REGS_EMUL_
    0U,	// i_load__opc_lw__xpr__simm12__xpr__3_BIGIMM_EMUL_
    0U,	// i_load__opc_lw__xpr__simm12__xpr__5_BIGIMM_EMUL_
    1U,	// i_load__opc_lw__xpr__simm12__xpr__SPEC_CLONE_
    0U,	// i_mv_alias__x_0__x_0__
    0U,	// i_mv_alias__x_0__xpr__
    1U,	// i_mv_alias__xpr__x_0__
    0U,	// i_mv_alias__xpr__xpr__
    0U,	// i_neg_alias__x_0__x_0__
    0U,	// i_neg_alias__x_0__xpr__
    1U,	// i_neg_alias__xpr__x_0__
    0U,	// i_neg_alias__xpr__xpr__
    0U,	// i_nop_alias__
    0U,	// i_not_alias__x_0__x_0__
    0U,	// i_not_alias__x_0__xpr__
    1U,	// i_not_alias__xpr__x_0__
    0U,	// i_not_alias__xpr__xpr__
    0U,	// i_ret_alias__
    0U,	// i_ret_alias__TAILCALL_CLONE_
    0U,	// i_seqz_alias__x_0__x_0__
    0U,	// i_seqz_alias__x_0__xpr__
    1U,	// i_seqz_alias__xpr__x_0__
    0U,	// i_seqz_alias__xpr__xpr__
    0U,	// i_sgtz_alias__x_0__x_0__
    0U,	// i_sgtz_alias__x_0__xpr__
    1U,	// i_sgtz_alias__xpr__x_0__
    0U,	// i_sgtz_alias__xpr__xpr__
    0U,	// i_shift__opc_slli__x_0__x_0__shamt__
    0U,	// i_shift__opc_slli__x_0__xpr__shamt__
    0U,	// i_shift__opc_slli__xpr__x_0__shamt__
    160U,	// i_shift__opc_slli__xpr__xpr__shamt__
    0U,	// i_shift__opc_srai__x_0__x_0__shamt__
    0U,	// i_shift__opc_srai__x_0__xpr__shamt__
    0U,	// i_shift__opc_srai__xpr__x_0__shamt__
    160U,	// i_shift__opc_srai__xpr__xpr__shamt__
    0U,	// i_shift__opc_srli__x_0__x_0__shamt__
    0U,	// i_shift__opc_srli__x_0__xpr__shamt__
    0U,	// i_shift__opc_srli__xpr__x_0__shamt__
    160U,	// i_shift__opc_srli__xpr__xpr__shamt__
    0U,	// i_sltz_alias__x_0__x_0__
    0U,	// i_sltz_alias__x_0__xpr__
    1U,	// i_sltz_alias__xpr__x_0__
    0U,	// i_sltz_alias__xpr__xpr__
    0U,	// i_snez_alias__x_0__x_0__
    0U,	// i_snez_alias__x_0__xpr__
    1U,	// i_snez_alias__xpr__x_0__
    0U,	// i_snez_alias__xpr__xpr__
    1U,	// i_store__opc_sb__x_0__simm12__x_0__
    1U,	// i_store__opc_sb__x_0__simm12__x_0__legalConstClonei32__
    1U,	// i_store__opc_sb__x_0__simm12__xpr__
    1U,	// i_store__opc_sb__x_0__simm12__xpr__SPEC_CLONE_
    1U,	// i_store__opc_sb__x_0__simm12__xpr__legalConstClonei32__
    1U,	// i_store__opc_sb__x_0__simm12__xpr__legalConstClonei32__SPEC_CLONE_
    64U,	// i_store__opc_sb__xpr__simm12__x_0__
    84U,	// i_store__opc_sb__xpr__simm12__xpr__
    1U,	// i_store__opc_sb__xpr__simm12__xpr__SPEC_CLONE_
    1U,	// i_store__opc_sh__x_0__simm12__x_0__
    1U,	// i_store__opc_sh__x_0__simm12__x_0__legalConstClonei32__
    1U,	// i_store__opc_sh__x_0__simm12__xpr__
    1U,	// i_store__opc_sh__x_0__simm12__xpr__SPEC_CLONE_
    1U,	// i_store__opc_sh__x_0__simm12__xpr__legalConstClonei32__
    1U,	// i_store__opc_sh__x_0__simm12__xpr__legalConstClonei32__SPEC_CLONE_
    64U,	// i_store__opc_sh__xpr__simm12__x_0__
    84U,	// i_store__opc_sh__xpr__simm12__xpr__
    1U,	// i_store__opc_sh__xpr__simm12__xpr__SPEC_CLONE_
    1U,	// i_store__opc_sw__x_0__simm12__x_0__
    1U,	// i_store__opc_sw__x_0__simm12__xpr__
    1U,	// i_store__opc_sw__x_0__simm12__xpr__SPEC_CLONE_
    64U,	// i_store__opc_sw__xpr__simm12__x_0__
    84U,	// i_store__opc_sw__xpr__simm12__xpr__
    0U,	// i_store__opc_sw__xpr__simm12__xpr__0_SUM2REGS_EMUL_
    0U,	// i_store__opc_sw__xpr__simm12__xpr__1_BIGIMM_EMUL_
    0U,	// i_store__opc_sw__xpr__simm12__xpr__4_BIGIMM_EMUL_
    1U,	// i_store__opc_sw__xpr__simm12__xpr__SPEC_CLONE_
    0U,	// i_upper_imm__opc_auipc__x_0__simm20__
    0U,	// i_upper_imm__opc_auipc__xpr__simm20__
    1U,	// i_upper_imm__opc_auipc__xpr__simm20__SPEC_CLONE_
    0U,	// i_upper_imm__opc_lui__x_0__simm20__
    0U,	// i_upper_imm__opc_lui__xpr__simm20__
    96U,	// i_upper_imm__opc_lui__xpr__simm20__SYNTAX_CLONE_e_movi32__1_
    0U,	// rule_SELECT_10
    0U,	// rule_SELECT_11
    0U,	// rule_SELECT_12
    0U,	// rule_SELECT_13
    0U,	// rule_SELECT_14
    0U,	// rule_SELECT_15
    0U,	// rule_SELECT_16
    0U,	// rule_SELECT_17
    0U,	// rule_SELECT_7
    0U,	// rule_SELECT_8
    0U,	// rule_SELECT_9
  };

  O << "\t";

  // Emit the opcode for the instruction.
  uint32_t Bits = 0;
  Bits |= OpInfo0[MI->getOpcode()] << 0;
  Bits |= OpInfo1[MI->getOpcode()] << 16;
  assert(Bits != 0 && "Cannot print this instruction.");
  O << AsmStrs+(Bits & 2047)-1;


  // Fragment 0 encoded into 2 bits for 3 unique commands.
  switch ((Bits >> 11) & 3) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // DBG_VALUE, BUNDLE, LIFETIME_START, LIFETIME_END, PATCHABLE_FUNCTION_EN...
    return;
    break;
  case 1:
    // CALLEND, CALLSTART, i_alu__opc_add__xpr__x_0__x_0__, i_alu__opc_add__x...
    printOperand(MI, 0, O);
    break;
  case 2:
    // i_bgt_alias__xpr__xpr__rel_addr12__swappedCmpClone0__, i_bgtu_alias__x...
    printOperand(MI, 1, O);
    break;
  }


  // Fragment 1 encoded into 4 bits for 14 unique commands.
  switch ((Bits >> 13) & 15) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // CALLEND, i_alu__opc_add__xpr__xpr__x_0__, i_alu__opc_add__xpr__xpr__xp...
    O << ", ";
    break;
  case 1:
    // CALLSTART, i_beqz_alias__x_0__rel_addr12__, i_beqz_alias__x_0__rel_add...
    return;
    break;
  case 2:
    // i_alu__opc_add__xpr__x_0__x_0__, i_alu__opc_and__xpr__x_0__x_0__, i_al...
    O << ", x0, x0";
    return;
    break;
  case 3:
    // i_alu__opc_add__xpr__x_0__xpr__, i_alu__opc_or__xpr__x_0__xpr__, i_alu...
    O << ", x0, ";
    printOperand(MI, 1, O);
    break;
  case 4:
    // i_alu__opc_and__xpr__x_0__xpr__, i_alu__opc_sll__xpr__x_0__xpr__, i_al...
    O << ", x0, x1";
    return;
    break;
  case 5:
    // i_alu__opc_and__xpr__xpr__x_0__, i_alu__opc_sltu__xpr__xpr__x_0__
    O << ", x1, x0";
    return;
    break;
  case 6:
    // i_alu_i__opc_andi__xpr__x_0__simm12__, i_alu_i__opc_slti__xpr__x_0__si...
    O << ", x0, 0";
    return;
    break;
  case 7:
    // i_alu_i__opc_slti__xpr__x_0__simm12__immSpecClone__imm_1__1__, i_alu_i...
    O << ", x0, 1";
    return;
    break;
  case 8:
    // i_jalr__opc_jalr__x_0__rel_jalr_addr12__x_0__, i_jalr__opc_jalr__x_0__...
    O << " ( x0 )";
    return;
    break;
  case 9:
    // i_load__opc_lb__x_0__simm12__xpr__, i_load__opc_lbu__x_0__simm12__xpr_...
    O << " ( ";
    printOperand(MI, 0, O);
    O << " )";
    return;
    break;
  case 10:
    // i_load__opc_lb__xpr__simm12__xpr__SPEC_CLONE_, i_load__opc_lb__xpr__si...
    O << ", 0 ( ";
    printOperand(MI, 1, O);
    O << " )";
    return;
    break;
  case 11:
    // i_mv_alias__xpr__x_0__, i_neg_alias__xpr__x_0__, i_not_alias__xpr__x_0...
    O << ", x0";
    return;
    break;
  case 12:
    // i_store__opc_sb__x_0__simm12__xpr__SPEC_CLONE_, i_store__opc_sb__x_0__...
    O << " )";
    return;
    break;
  case 13:
    // i_upper_imm__opc_auipc__xpr__simm20__SPEC_CLONE_
    O << ", 0";
    return;
    break;
  }


  // Fragment 2 encoded into 3 bits for 5 unique commands.
  switch ((Bits >> 17) & 7) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // CALLEND, i_alu__opc_add__xpr__xpr__x_0__, i_alu__opc_or__xpr__xpr__x_0...
    printOperand(MI, 1, O);
    break;
  case 1:
    // i_alu__opc_add__xpr__x_0__xpr__, i_alu__opc_or__xpr__x_0__xpr__, i_alu...
    return;
    break;
  case 2:
    // i_alu__opc_add__xpr__xpr__xpr__, i_alu__opc_and__xpr__xpr__xpr__, i_al...
    printOperand(MI, 2, O);
    break;
  case 3:
    // i_alu_i__opc_ori__xpr__x_0__simm12__SYNTAX_CLONE_e_movi32__2_
    O << " & 0xfff";
    return;
    break;
  case 4:
    // i_bgt_alias__xpr__xpr__rel_addr12__swappedCmpClone0__, i_bgtu_alias__x...
    printOperand(MI, 0, O);
    O << ", ";
    printOperand(MI, 2, O);
    return;
    break;
  }


  // Fragment 3 encoded into 3 bits for 7 unique commands.
  switch ((Bits >> 20) & 7) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // CALLEND, i_beqz_alias__xpr__rel_addr12__, i_bgez_alias__xpr__rel_addr1...
    return;
    break;
  case 1:
    // i_alu__opc_add__xpr__xpr__x_0__, i_alu__opc_or__xpr__xpr__x_0__, i_alu...
    O << ", x0";
    return;
    break;
  case 2:
    // i_alu__opc_add__xpr__xpr__xpr__, i_alu__opc_and__xpr__xpr__xpr__, i_al...
    O << ", ";
    break;
  case 3:
    // i_alu_i__opc_addi__xpr__xpr__simm12__SPEC_CLONE_
    O << ", 0";
    return;
    break;
  case 4:
    // i_jalr__opc_jalr__xpr__rel_jalr_addr12__x_0__, i_load__opc_lb__xpr__si...
    O << " ( x0 )";
    return;
    break;
  case 5:
    // i_load__opc_lb__xpr__simm12__xpr__, i_load__opc_lb__xpr__simm12__xpr__...
    O << " ( ";
    printOperand(MI, 1, O);
    O << " )";
    return;
    break;
  case 6:
    // i_upper_imm__opc_lui__xpr__simm20__SYNTAX_CLONE_e_movi32__1_
    O << " >> 12 & 0xfffff";
    return;
    break;
  }


  // Fragment 4 encoded into 1 bits for 2 unique commands.
  if ((Bits >> 23) & 1) {
    // i_alu__opc_sll__xpr__xpr__xpr__, i_alu__opc_slt__xpr__xpr__xpr__, i_al...
    printOperand(MI, 2, O);
    return;
  } else {
    // i_alu__opc_add__xpr__xpr__xpr__, i_alu__opc_and__xpr__xpr__xpr__, i_al...
    printOperand(MI, 1, O);
    return;
  }

}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
const char *CodasipInstPrinter::
getRegisterName(unsigned RegNo, unsigned AltIdx) {
  assert(RegNo && RegNo < 33 && "Invalid register number!");

  static const char AsmStrsNoRegAltName[] = {
  /* 0 */ '-', 0,
  /* 2 */ 'x', '1', '0', 0,
  /* 6 */ 'x', '2', '0', 0,
  /* 10 */ 'x', '3', '0', 0,
  /* 14 */ 'x', '1', '1', 0,
  /* 18 */ 'x', '2', '1', 0,
  /* 22 */ 'x', '3', '1', 0,
  /* 26 */ 'x', '1', 0,
  /* 29 */ 'x', '1', '2', 0,
  /* 33 */ 'x', '2', '2', 0,
  /* 37 */ 'x', '2', 0,
  /* 40 */ 'x', '1', '3', 0,
  /* 44 */ 'x', '2', '3', 0,
  /* 48 */ 'x', '3', 0,
  /* 51 */ 'x', '1', '4', 0,
  /* 55 */ 'x', '2', '4', 0,
  /* 59 */ 'x', '4', 0,
  /* 62 */ 'x', '1', '5', 0,
  /* 66 */ 'x', '2', '5', 0,
  /* 70 */ 'x', '5', 0,
  /* 73 */ 'x', '1', '6', 0,
  /* 77 */ 'x', '2', '6', 0,
  /* 81 */ 'x', '6', 0,
  /* 84 */ 'x', '1', '7', 0,
  /* 88 */ 'x', '2', '7', 0,
  /* 92 */ 'x', '7', 0,
  /* 95 */ 'x', '1', '8', 0,
  /* 99 */ 'x', '2', '8', 0,
  /* 103 */ 'x', '8', 0,
  /* 106 */ 'x', '1', '9', 0,
  /* 110 */ 'x', '2', '9', 0,
  /* 114 */ 'x', '9', 0,
  };

  static const uint8_t RegAsmOffsetNoRegAltName[] = {
    0, 26, 37, 48, 59, 70, 81, 92, 103, 114, 2, 14, 29, 40, 
    51, 62, 73, 84, 95, 106, 6, 18, 33, 44, 55, 66, 77, 88, 
    99, 110, 10, 22, 
  };

  static const char AsmStrsxpr_AltNameIndex[] = {
  /* 0 */ 'x', '1', '0', 0,
  /* 4 */ 'x', '2', '0', 0,
  /* 8 */ 'x', '3', '0', 0,
  /* 12 */ 'x', '1', '1', 0,
  /* 16 */ 'x', '2', '1', 0,
  /* 20 */ 'x', '3', '1', 0,
  /* 24 */ 'x', '1', 0,
  /* 27 */ 'x', '1', '2', 0,
  /* 31 */ 'x', '2', '2', 0,
  /* 35 */ 'x', '2', 0,
  /* 38 */ 'x', '1', '3', 0,
  /* 42 */ 'x', '2', '3', 0,
  /* 46 */ 'x', '3', 0,
  /* 49 */ 'x', '1', '4', 0,
  /* 53 */ 'x', '2', '4', 0,
  /* 57 */ 'x', '4', 0,
  /* 60 */ 'x', '1', '5', 0,
  /* 64 */ 'x', '2', '5', 0,
  /* 68 */ 'x', '5', 0,
  /* 71 */ 'x', '1', '6', 0,
  /* 75 */ 'x', '2', '6', 0,
  /* 79 */ 'x', '6', 0,
  /* 82 */ 'x', '1', '7', 0,
  /* 86 */ 'x', '2', '7', 0,
  /* 90 */ 'x', '7', 0,
  /* 93 */ 'x', '1', '8', 0,
  /* 97 */ 'x', '2', '8', 0,
  /* 101 */ 'x', '8', 0,
  /* 104 */ 'x', '1', '9', 0,
  /* 108 */ 'x', '2', '9', 0,
  /* 112 */ 'x', '9', 0,
  };

  static const uint8_t RegAsmOffsetxpr_AltNameIndex[] = {
    3, 24, 35, 46, 57, 68, 79, 90, 101, 112, 0, 12, 27, 38, 
    49, 60, 71, 82, 93, 104, 4, 16, 31, 42, 53, 64, 75, 86, 
    97, 108, 8, 20, 
  };

  switch(AltIdx) {
  default: llvm_unreachable("Invalid register alt name index!");
  case  Codasip::NoRegAltName:
    assert(*(AsmStrsNoRegAltName+RegAsmOffsetNoRegAltName[RegNo-1]) &&
           "Invalid alt name index for register!");
    return AsmStrsNoRegAltName+RegAsmOffsetNoRegAltName[RegNo-1];
  case  Codasip::xpr_AltNameIndex:
    assert(*(AsmStrsxpr_AltNameIndex+RegAsmOffsetxpr_AltNameIndex[RegNo-1]) &&
           "Invalid alt name index for register!");
    return AsmStrsxpr_AltNameIndex+RegAsmOffsetxpr_AltNameIndex[RegNo-1];
  }
}

#ifdef PRINT_ALIAS_INSTR
#undef PRINT_ALIAS_INSTR

bool CodasipInstPrinter::printAliasInstr(const MCInst *MI, raw_ostream &OS) {
  return false;
}

#endif // PRINT_ALIAS_INSTR
