#line 2 "merged_scanner_gen.cpp"

#line 4 "merged_scanner_gen.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char yytext[];

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	if ( yyleng >= YYLMAX ) \
		YY_FATAL_ERROR( "token too large, exceeds YYLMAX" ); \
	yy_flex_strncpy( yytext, (yytext_ptr), yyleng + 1 ); \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 162
#define YY_END_OF_BUFFER 163
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[915] =
    {   0,
        0,    0,    0,    0,    0,    0,  163,  161,  160,  148,
      136,  161,  155,  140,  145,  158,  159,  138,  141,  157,
      142,  133,  139,  151,  151,  134,  161,  135,  161,  161,
      161,  146,  147,  137,  160,  161,    4,    6,    5,    8,
        7,  161,  161,  161,  161,  161,    0,  154,    0,  155,
        0,  155,    0,    0,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,    2,    1,    0,  150,  151,
      155,  155,    0,  155,  143,  144,    0,  156,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    4,    3,    7,

        0,    7,    7,    7,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,    1,
      153,    0,  149,  152,  156,  156,  156,    0,    0,    0,
        0,    0,    0,  155,  155,  155,  155,  155,  155,  155,

      155,  122,   59,   89,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,   32,  155,   96,   99,
      100,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,   63,  155,  155,  155,  155,  155,
      110,  155,  155,  155,  155,  155,  155,  155,  115,  155,
      155,  155,  155,  155,  155,  155,  155,   97,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,    0,  153,  152,  152,    0,    0,
        0,    7,    7,    0,    0,  155,  155,  155,  155,  155,
      155,  155,  155,  155,   61,  155,  155,   85,  155,  155,

       87,  155,  155,  155,  155,    0,  155,   95,    0,  155,
      155,  155,  155,  155,  102,  103,  155,  155,  155,  155,
      155,   68,  155,  155,  155,  155,  155,  155,  155,  108,
      155,  109,  155,  155,   64,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,   65,  155,  155,
      155,  155,  124,  125,  155,  155,  155,  155,   88,  130,
      155,  155,  155,  132,   67,  127,  156,  156,    0,    0,
       70,   71,   30,  155,  155,   49,  155,    0,   57,   58,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,    0,  155,   69,   33,    0,

        0,  155,   18,    0,    0,   34,   98,  101,  155,    0,
       93,  155,    0,  155,  105,  155,  155,   62,  106,  155,
      155,   86,  155,  155,  155,  111,  112,    0,  155,  155,
        0,  155,  155,  155,  155,    0,  155,  155,  155,  155,
       66,  155,  155,  126,  155,  155,  155,   46,  155,    0,
      155,  155,  155,   10,    0,    0,   50,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,    0,    0,    0,   92,   33,  155,
       18,    0,  155,   35,    0,    0,   35,   35,    0,    0,
       22,    0,    0,  104,  155,  155,  107,  155,  155,  155,

      123,    0,   26,   26,  155,  114,    0,   38,   38,  155,
      155,  155,  155,   29,    0,    0,  155,  155,    0,  155,
       94,  155,  155,  155,  155,  155,    0,   47,  155,  155,
       10,   52,   51,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,    0,  155,
      155,    0,    0,    0,   17,    0,   19,   19,    0,   35,
        0,    0,    0,    0,   22,  155,    0,  155,    0,  155,
        0,    0,    0,  155,    0,    0,   53,  155,  155,   29,
      155,  155,    0,    0,    0,  120,  128,    0,  155,  155,
      155,  155,  155,  129,  131,    9,    0,    0,  155,   56,

      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,    0,  155,  155,   91,    0,
       31,    0,    0,   31,   31,    0,    0,   20,    0,    0,
       35,    0,    0,    0,  155,   24,    0,    0,    0,   25,
        0,    0,   37,    0,    0,   27,   27,   26,  155,   38,
       28,    0,    0,   55,   54,  155,  117,  118,  155,    0,
        0,    0,  155,    0,  155,  155,  155,    0,  155,    0,
      155,  155,  155,  155,  155,    0,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,    0,   15,   15,  155,
       90,   31,    0,   19,   20,    0,    0,   21,   21,    0,

      155,   24,    0,   25,    0,  155,   28,  155,  155,    0,
       39,    0,    0,    0,  155,    0,    0,    0,    0,    0,
      155,  155,  155,  155,  155,  155,    0,    0,    0,   78,
      155,  155,  155,  155,  155,  155,  155,  155,  155,    0,
        0,   31,    0,  155,    0,   27,  113,  116,  155,   39,
       39,  155,   40,    0,    0,    0,    0,   45,  155,  155,
      155,   74,   73,    0,    0,  155,  155,  155,  155,  155,
      155,  155,  155,  155,   15,    0,   16,   16,   21,  155,
       36,  119,  155,    0,    0,    0,   41,  155,  155,  155,
      155,    0,    0,  155,   80,  155,  155,  155,  155,  155,

      155,  155,  155,    0,  155,  155,   42,   43,   44,   48,
      155,  155,  155,  155,   11,    0,    0,  155,  155,  155,
        0,  155,   72,  155,  155,  155,   16,  155,  155,  155,
      155,  155,  155,   11,  155,  155,   81,   13,    0,    0,
      155,   79,  155,  155,    0,  155,  155,  155,  155,  155,
      155,  155,   13,  155,  155,  155,    0,    0,    0,  155,
       60,  155,  155,  155,    0,  155,   14,  155,  155,    0,
        0,    0,  155,  155,  155,  155,    0,    0,    0,   82,
      155,  155,    0,    0,   23,   23,    0,  155,  155,   76,
      155,    0,    0,  155,  155,    0,  121,  155,  155,    0,

        0,  155,   84,   23,  155,   75,   12,    0,    0,  155,
       77,   12,   83,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    8,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   21,   22,
       23,   24,   25,   26,   25,   27,   28,   29,    1,   30,
       31,   32,    1,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
       50,   51,   52,   53,   54,   55,   56,   57,   58,   59,
        1,   60,    1,   61,   62,    1,   63,   64,   65,   66,

       67,   68,   69,   70,   71,   72,   73,   74,   75,   76,
       77,   78,   79,   80,   81,   82,   83,   84,   85,   86,
       87,   88,    1,   89,    1,   90,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[91] =
    {   0,
        1,    2,    3,    2,    1,    4,    1,    5,    1,    1,
        1,    1,    1,    6,    7,    8,    7,    9,    1,   10,
       10,   10,   10,   10,   10,   10,   10,   10,    1,    1,
        1,    1,   11,   12,   13,   12,   12,   12,   13,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,   14,    5,    5,    1,
        1,    5,   12,   13,   12,   12,   12,   13,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,   14,    5,    5,    1,    1
    } ;

static yyconst flex_int16_t yy_base[992] =
    {   0,
        0,   90,   31,   32,  180,  270, 1337, 3557, 3557, 3557,
     3557,    2,    0, 3557, 3557, 3557, 3557, 3557,   16, 3557,
       27,  353,   44,  424,  106, 3557, 1290, 3557, 1285, 1294,
       49, 3557, 3557, 3557,   76,   53,    0, 3557, 1280, 3557,
        0,  108,    0,  179,  199, 1278,   78, 3557,  505,    0,
      284,    0,   21,   24,  283,  287,   98,  288,   92,  419,
      170,  420,  192,  430,   91,   78,  289,  458,   86,  106,
      554,  275,  183,  422,  110, 3557,    0,  136,  486,  516,
       66, 3557,    0, 3557, 3557, 3557, 1275,    0,  228,  623,
      507,  591, 1261,  374,  311,  640,  174,    0, 3557,    0,

      649,    0, 3557, 3557,    0,    0,  182,  254,  256,  272,
      311,  407,    0,  172,  174,  423,  200,  415,  288,  301,
      298,  507,  362,  408,  405,  432,  511,  549,  426,  485,
      491,  511,  641,  550,  510,  549,  564,  565,  604,  619,
      607,  609,  604,  634,  643,  637,  651,  657,  642,  646,
      645,  659,  660,  666,  646,  648,  662,  669,  655,  667,
      664,  702,  692,  702,  694,  699,  701,  709,  714,  698,
      715,  694,  703,  715,  716,  705,  723,  708,  709,    0,
      770,  789,  132,  735,    0, 3557, 3557,    0,  798,  753,
      766,  754,  774,  777, 1216,  780,  792,  787,  794,  796,

      797,    0,    0,    0,  803,  803, 1213,  808,  797,  796,
      807,  812,  793,  812,  814,  799,  849,  850,  813,    0,
      810,  825,  820,  844,  846,  829,  847,  850, 1206,  847,
      853,  840,  846,  861,    0,  851,  864,  861,  847,  849,
      869,  864,  856,  864,  868,  874,  887,  881,    0,  893,
      887,  885,  905,  902,  909,  899,  895,    0,  898,  911,
      915,  905,  920,  920,  915,  906,  906,  922,  926,  926,
      916,  920,  928,  918,  976,  985,  979,  980,  981, 1208,
      979,  986,  987,  985,  986,  974,  980,  991,  983,  997,
       77, 1019,  993,  989,    0, 1074,  983,    0, 1002,  985,

        0,  998,  163,  994, 1003, 1068,  988,    0, 1071, 1016,
     1021, 1026, 1029,  229,    0,    0, 1028, 1040,  378, 1053,
     1051,    0, 1050, 1054, 1039, 1053, 1045, 1056, 1075,    0,
     1070,    0, 1085, 1087,    0, 1085,  382, 1081, 1083,  511,
     1088, 1096, 1101, 1100,  515, 1101, 1093,    0, 1110, 1107,
     1097, 1108,    0,    0, 1182, 1118, 1110, 1122,    0,    0,
     1079, 1113, 1127,    0,    0,    0, 1138, 1141,    0, 1093,
     3557, 3557,    0, 1119, 1129,    0, 1147, 1186,    0,    0,
     1137, 1149, 1154, 1154, 1146, 1142, 1157, 1159, 1162, 1190,
     1167, 1165, 1171, 1158, 1031, 1213, 1180,    0,    0, 1231,

     1237, 1180, 1067, 1240, 1248,    0,    0,    0, 1187, 1280,
        0,  618, 1258, 1193,    0, 1192, 1201,    0,    0, 1204,
     1217,    0, 1207, 1218, 1247,    0,    0, 1307, 1240, 1234,
     1321, 1242, 1250, 1256, 1262, 1348, 1281, 1302,  759, 1303,
        0, 1315, 1060,    0, 1314, 1320, 1057,    0, 1310, 1035,
     1318, 1307, 1309,    0, 1359, 1360, 1320,  970, 1324, 1329,
     1333, 1334, 1333, 1322, 1350, 1329, 1343, 1344, 1357, 1350,
     1349,  760, 1358, 1359, 1407, 1408, 1412,    0,    0, 1379,
      958, 1431,  977,    0, 1440, 1467, 1452, 1490,  953, 1504,
        0, 1518, 1531,    0, 1365, 1092,    0, 1383, 1267, 1434,

        0, 1519, 1546, 1550, 1471,    0, 1559, 1568, 1584, 1427,
     1521, 1516, 1545,    0, 1598, 1611, 1563, 1578, 1635, 1570,
        0,  839, 1643, 1566,  832, 1580, 1664,    0,  711, 1574,
        0,    0,    0, 1590, 1582,  707, 1593, 1638, 1621, 1622,
     1633, 1622, 1639, 1625, 1632, 1629,  706,  580, 1435, 1630,
     1672, 1551, 1619, 1747,    0, 1700, 1709, 1732, 1743,    0,
        0, 1761, 1775, 1788,    0, 1632, 1801, 1436, 1818, 1675,
     1819, 1822,    0, 1678,    0, 1823, 1784, 1673, 1665,    0,
     1727, 1746, 1850, 1850, 1863,  547,    0, 1554,  575,  575,
      558, 1479, 1759,    0,    0, 3557, 1877, 1889, 1750,    0,

     1788, 1801, 1858, 1844, 1494, 1858, 1858, 1856, 1867,  517,
     1877, 1886, 1868, 1874, 1875, 1937, 1889, 1899,    0, 1966,
        0, 1951, 1998, 1983, 2021,  560,    0,    0, 1994, 2032,
        0, 1926, 2051,    0, 1898,    0, 2052, 2078, 1555,    0,
     2079, 2082,    0, 2099, 2067, 2108, 2117, 1927, 1902,    0,
        0, 2144, 2145,    0,    0, 1918,    0,    0, 1943, 1930,
     2148,    0, 1967,    0, 1499, 1500, 1561, 1691, 1980, 2148,
     1980, 1990, 1980, 1996, 1990, 2178, 2101, 2108, 2103, 2110,
     2103, 2111, 2115, 2112, 2128, 2141, 2189, 2198, 2207, 1636,
        0,    0,    0,    0,    0, 2236, 2221, 2245, 2254, 2035,

     2172,    0,    0,    0,    0, 2206,    0, 2238, 2238, 2285,
     1692, 2286, 2289, 2102, 2255,  564, 1792, 1853, 2103,    0,
     2247, 2261, 2256,  505, 2263, 2262, 2312, 2325, 2338,    0,
     2265, 2262,  501, 2267, 2266,  474, 2292, 2305, 2302,    0,
     2366,    0,    0, 2302,  517,    0,    0,    0, 2320, 1696,
     1714, 2326, 3557,    0,    0,    0,  516,    0, 2335, 2327,
     2339,  456,    0, 1737,    0, 2331, 2326, 2342, 2334, 2328,
     2356, 2349, 2347, 2358,    0, 2394, 2409, 2423,    0, 2359,
     3557,    0, 2369,  508,  490,  471, 3557, 2387,  321, 2388,
     2407, 2455,  363, 2396,    0, 2392, 2399, 1937, 2409, 2425,

     2424, 2410, 2430,    0, 2427, 2416, 3557, 3557, 3557,    0,
     2432, 2437, 2433, 2436,    0, 2494, 2500, 2423, 2432, 2440,
     2506, 2446,    0, 2432, 2435, 2466,    0, 2106, 2460, 2469,
      284, 2478, 2479,    0, 2462, 2467,    0,    0, 2526, 2533,
     2477,    0, 2471,  265, 2553, 2495, 2494, 2484, 2482, 2494,
     2235, 2492,    0, 2505, 2517, 2505, 2566, 2567, 2593, 2561,
        0, 2559, 2561, 2548, 2634, 2554,    0, 2549, 2565, 2304,
     2648,    0, 2559, 2566, 2553, 2555, 2619, 2661, 2674,    0,
        6, 2624, 2702, 2687, 2711, 2728, 2676, 2653, 2664,    0,
     2702, 2248,    0, 2690, 2690,    0,    0, 2705, 2693, 2756,

       49, 2708,    0,    0, 2704,    0,    0, 2759, 2760, 2719,
        0,    0,    0, 3557, 2797, 2811, 2825, 2839, 2849, 2855,
     2864, 2874, 2888, 2898, 2908, 2913, 2927, 2932, 2941, 2946,
     2951, 2955, 2959, 2971, 2984, 2998, 3011, 3024, 3034, 3044,
     3057, 3070, 3083, 3093, 3106, 3116, 3126, 3139, 3149, 3162,
     3175, 3180, 3192, 3205, 3218, 3223, 3227, 3239, 3252, 3262,
     3267, 3276, 3281, 3290, 3300, 3310, 3323, 3328, 3341, 3346,
     3359, 3364, 3376, 3390, 3395, 3399, 3412, 3426, 3440, 3445,
     3457, 3462, 3471, 3484, 3494, 3507, 3512, 3516, 3520, 3532,
     3542

    } ;

static yyconst flex_int16_t yy_def[992] =
    {   0,
      915,  915,  916,  916,  917,  917,  914,  914,  914,  914,
      914,  918,  919,  914,  914,  914,  914,  914,  914,  914,
      914,  914,  914,  914,  920,  914,  914,  914,  914,  921,
      922,  914,  914,  914,  914,  914,  923,  914,  914,  914,
      924,  914,  925,  926,  914,  925,  918,  914,  914,  919,
      914,  919,  914,  914,  919,  919,  919,  919,  919,  919,
      919,  919,  919,  919,  919,  919,  919,  919,  919,  919,
      919,  919,  919,  919,  919,  914,  927,  914,   24,  920,
      914,  914,  928,  914,  914,  914,  921,  929,  914,  922,
      930,  914,   90,  914,  914,  914,  914,  923,  914,  924,

      914,  924,  914,  914,  931,  925,  918,  918,  918,  918,
      918,  918,  932,  914,  914,  919,  919,  919,  919,  919,
      919,  919,  919,  919,  919,  919,  919,  919,  919,  919,
      919,  919,  919,  919,  919,  919,  919,  919,  919,  919,
      919,  919,  919,  919,  919,  919,  919,  919,  919,  919,
      919,  919,  919,  919,  919,  919,  919,  919,  919,  919,
      919,  919,  919,  919,  919,  919,  919,  919,  919,  919,
      919,  919,  919,  919,  919,  919,  919,  919,  919,  927,
      914,  914,  914,  928,  929,  914,  914,  933,  914,  914,
      931,  914,  914,  919,  919,  919,  919,  919,  919,  919,

      919,  919,  919,  919,  919,  919,  919,  919,  919,  919,
      919,  919,  919,  919,  919,  919,  919,  919,  919,  919,
      919,  919,  919,  919,  919,  919,  919,  919,  919,  919,
      919,  919,  919,  919,  919,  919,  919,  919,  919,  919,
      919,  919,  919,  919,  919,  919,  919,  919,  919,  919,
      919,  919,  919,  919,  919,  919,  919,  919,  919,  919,
      919,  919,  919,  919,  919,  919,  919,  919,  919,  919,
      919,  919,  919,  919,  914,  914,  928,  928,  933,  914,
      914,  931,  931,  914,  914,  919,  919,  919,  919,  919,
      919,  919,  919,  919,  919,  919,  919,  919,  919,  919,

      919,  919,  919,  919,  919,  934,  919,  919,  935,  919,
      919,  919,  919,  919,  919,  919,  919,  919,  919,  919,
      919,  919,  919,  919,  919,  919,  919,  919,  919,  919,
      919,  919,  919,  919,  919,  919,  919,  919,  919,  919,
      919,  919,  919,  919,  919,  919,  919,  919,  919,  919,
      919,  919,  919,  919,  919,  919,  919,  919,  919,  919,
      919,  919,  919,  919,  919,  919,  933,  933,  936,  914,
      914,  914,  919,  919,  919,  919,  919,  937,  919,  919,
      919,  919,  919,  919,  919,  919,  919,  919,  919,  919,
      919,  919,  919,  919,  919,  938,  919,  919,  939,  934,

      934,  919,  940,  935,  935,  919,  919,  919,  919,  941,
      919,  919,  942,  919,  919,  919,  919,  919,  919,  919,
      919,  919,  919,  919,  919,  919,  919,  914,  919,  919,
      914,  919,  919,  919,  919,  943,  919,  919,  919,  919,
      919,  919,  919,  919,  919,  919,  919,  919,  919,  936,
      919,  919,  919,  944,  937,  937,  919,  919,  919,  919,
      919,  919,  919,  919,  919,  919,  919,  919,  919,  919,
      919,  919,  919,  919,  945,  938,  938,  919,  939,  919,
      940,  914,  919,  946,  914,  941,  914,  914,  486,  914,
      947,  942,  942,  919,  919,  919,  919,  919,  919,  919,

      919,  914,  948,  914,  919,  919,  914,  914,  914,  919,
      919,  919,  919,  949,  943,  943,  919,  919,  914,  919,
      919,  919,  919,  919,  919,  919,  914,  919,  919,  919,
      944,  919,  919,  919,  919,  919,  919,  919,  919,  919,
      919,  919,  919,  919,  919,  919,  919,  919,  914,  919,
      919,  914,  945,  950,  919,  914,  914,  914,  951,  946,
      952,  914,  953,  914,  947,  919,  954,  919,  955,  919,
      914,  914,  956,  919,  957,  958,  919,  919,  919,  949,
      919,  919,  914,  959,  914,  919,  919,  914,  919,  919,
      919,  919,  919,  919,  919,  914,  914,  914,  919,  919,

      919,  919,  919,  919,  919,  919,  919,  919,  919,  919,
      919,  919,  919,  919,  919,  914,  919,  919,  919,  950,
      960,  914,  950,  914,  914,  623,  961,  962,  951,  951,
      952,  914,  914,  963,  919,  964,  954,  954,  914,  965,
      955,  955,  919,  914,  914,  914,  914,  956,  919,  957,
      966,  958,  958,  919,  919,  919,  919,  919,  919,  914,
      967,  968,  919,  969,  919,  919,  919,  914,  919,  914,
      919,  919,  919,  919,  919,  914,  919,  919,  919,  919,
      919,  919,  919,  919,  919,  919,  914,  914,  914,  919,
      919,  960,  970,  961,  962,  914,  914,  914,  914,  963,

      919,  964,  971,  965,  972,  919,  966,  919,  919,  967,
      973,  967,  967,  968,  919,  969,  914,  914,  914,  974,
      919,  919,  919,  919,  919,  919,  914,  914,  914,  919,
      919,  919,  919,  919,  919,  919,  919,  919,  919,  975,
      914,  970,  976,  919,  971,  972,  919,  919,  919,  914,
      973,  919,  914,  977,  978,  979,  974,  919,  919,  919,
      919,  919,  919,  914,  980,  919,  919,  919,  919,  919,
      919,  919,  919,  919,  975,  914,  914,  914,  976,  919,
      914,  919,  919,  977,  978,  979,  914,  919,  919,  919,
      919,  981,  980,  919,  919,  919,  919,  919,  919,  919,

      919,  919,  919,  982,  919,  919,  914,  914,  914,  919,
      919,  919,  919,  919,  983,  981,  981,  919,  919,  919,
      984,  919,  919,  919,  919,  919,  982,  919,  919,  919,
      919,  919,  919,  983,  919,  919,  919,  985,  984,  984,
      919,  919,  919,  919,  914,  919,  919,  919,  919,  919,
      919,  919,  985,  919,  919,  919,  914,  986,  914,  919,
      919,  919,  919,  919,  914,  919,  919,  919,  919,  914,
      914,  987,  919,  919,  919,  919,  914,  914,  914,  919,
      919,  919,  914,  914,  914,  914,  987,  919,  919,  919,
      919,  914,  988,  919,  919,  989,  919,  919,  919,  990,

      988,  919,  919,  989,  919,  919,  991,  990,  990,  919,
      919,  991,  919,    0,  914,  914,  914,  914,  914,  914,
      914,  914,  914,  914,  914,  914,  914,  914,  914,  914,
      914,  914,  914,  914,  914,  914,  914,  914,  914,  914,
      914,  914,  914,  914,  914,  914,  914,  914,  914,  914,
      914,  914,  914,  914,  914,  914,  914,  914,  914,  914,
      914,  914,  914,  914,  914,  914,  914,  914,  914,  914,
      914,  914,  914,  914,  914,  914,  914,  914,  914,  914,
      914,  914,  914,  914,  914,  914,  914,  914,  914,  914,
      914

    } ;

static yyconst flex_int16_t yy_nxt[3648] =
    {   0,
        8,    9,   10,    9,   11,   12,    8,   48,   14,   15,
        8,   16,   17,   18,   19,   20,   21,   22,   23,   24,
       25,   25,   25,   25,   25,   25,   25,   25,   26,   27,
       28,   29,   30,   38,   38,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   39,   39,   51,   51,   51,   51,
       51,   51,   51,   51,   51,  114,   96,   76,  115,   31,
       32,   49,   77,   89,  892,   89,   90,  894,   91,   92,
       92,   92,   92,   92,   92,   92,   92,   94,  378,   94,
      378,   93,   95,   48,  114,  183,  183,  115,   33,   34,
        8,   35,   10,   35,   11,   12,   36,   97,   14,   15,

        8,   16,   17,   18,   19,   20,   21,   22,   23,   24,
       25,   25,   25,   25,   25,   25,   25,   25,   26,   27,
       28,   29,   30,   78,  153,  154,   97,  101,  101,  101,
      101,  101,  101,  101,  101,  101,  126,   49,  133,  162,
       84,  134,  135,  163,   82,  127,  128,  179,  136,   31,
       32,  183,  183,  153,  154,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  396,  126,  396,  133,  162,   84,
      134,  135,  163,   82,  127,  128,  179,  136,   33,   34,
        8,    9,   40,    9,    8,    8,    8,   48,    8,    8,
        8,   16,   17,    8,   42,   20,   42,   43,    8,   44,

       45,   45,   45,   45,   45,   45,   45,   45,    8,    8,
        8,    8,   46,  103,  142,  190,  143,  104,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  174,  147,  192,
      410,  193,  410,  103,  175,  105,  196,  104,  148,    8,
        8,   49,  103,  142,  190,  143,  104,   92,   92,   92,
       92,   92,   92,   92,   92,   92,  174,  147,  192,   48,
      193,   48,  103,  175,  105,  196,  104,  148,    8,    8,
        8,    9,   40,    9,    8,    8,    8,   48,    8,    8,
        8,   16,   17,    8,   42,   20,   42,   43,    8,   44,
       45,   45,   45,   45,   45,   45,   45,   45,    8,    8,

        8,    8,   46,   51,   51,   51,   51,   51,   51,   51,
       51,   51,  172,   49,   96,   49,   48,  116,   84,  117,
      121,  129,   82,  199,  155,  130,  856,  118,  122,    8,
        8,   49,  173,  119,  120,  131,  200,  156,  123,  157,
      124,  172,  201,  132,  125,  848,  116,   84,  117,  121,
      129,   82,  199,  155,  130,   97,  118,  122,    8,    8,
       52,  173,  119,  120,  131,  200,  156,  123,  157,  124,
       49,  201,  132,  125,   53,   94,   54,   94,  764,  413,
       95,  413,  811,  428,   97,  428,   55,   56,   57,   58,
       59,   60,   61,   62,   63,   52,   52,   64,   65,   66,

       67,   68,   69,   70,   71,   72,   73,   52,   74,   52,
       52,   75,   48,  204,   52,   55,   56,   57,   58,   59,
       60,   61,   62,   63,   52,   52,   64,   65,   66,   67,
       68,   69,   70,   71,   72,   73,   52,   74,   52,   52,
       75,   78,  204,   79,   79,   79,   79,   79,   79,   79,
       80,   80,  137,  144,  205,  176,  197,  206,   81,  177,
      138,  145,   82,  139,  140,  149,   49,  198,  150,  178,
      194,  151,  141,  207,  195,  146,  809,  152,  212,  158,
       83,  137,  144,  205,  176,  197,  206,   81,  177,  138,
      145,   82,  139,  140,  149,  808,  198,  150,  178,  194,

      151,  141,  207,  195,  146,  159,  152,  212,  160,   83,
       47,  161,  431,  807,  431,   47,  436,  791,  436,  213,
       84,  787,  781,  182,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   78,  159,  771,  214,  160,  107,  108,
      161,  186,  914,  109,  215,  187,  202,  208,  213,   84,
       84,  110,  182,  182,   82,  111,  209,  112,  216,  203,
      221,  113,  768,  188,   47,  214,  761,  107,  108,  753,
      186,  914,  109,  215,  187,  202,  208,  623,  681,   84,
      110,  667,  182,   82,  111,  209,  112,  216,  203,  221,
      113,  164,  188,  210,  165,  166,  666,  167,  168,  211,

      665,  222,  169,  219,  220,  223,  170,  171,  663,  224,
       92,   92,   92,   92,   92,   92,   92,   92,   92,  490,
      164,  490,  210,  165,  166,  186,  167,  168,  211,  187,
      222,  169,  219,  220,  223,  170,  171,  914,  224,  914,
      914,  615,  914,  914,  914,  914,  914,  914,  914,  914,
      914,  225,  226,  227,  186,  914,  228,  229,  187,  189,
      189,  189,  189,  189,  189,  189,  189,  189,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  217,  230,  231,
      225,  226,  227,  103,  232,  228,  229,  104,  233,  236,
      237,  238,  234,  218,  241,  243,  239,  240,  247,  245,

      248,  249,  250,  251,  252,  242,  217,  230,  231,  235,
      246,  244,  103,  232,  253,  254,  104,  233,  236,  237,
      238,  234,  218,  241,  243,  239,  240,  247,  245,  248,
      249,  250,  251,  252,  242,  255,  256,  257,  235,  246,
      244,  259,  262,  253,  254,  260,  263,  264,  265,  266,
      267,  268,  269,  270,  258,  271,  272,  261,  273,  274,
      519,  549,  519,  549,  255,  256,  257,  614,  603,  277,
      259,  262,  599,  278,  260,  263,  264,  265,  266,  267,
      268,  269,  270,  258,  271,  272,  261,  273,  274,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  277,  281,

      282,  280,  278,  275,  283,  275,  284,  182,  276,  276,
      276,  276,  276,  276,  276,  276,  276,  189,  189,  189,
      189,  189,  189,  189,  189,  189,  285,  286,  281,  282,
      288,  289,  290,  283,  291,  284,  182,  292,  293,  294,
      295,  297,  298,  299,  300,  301,  302,  303,  304,  305,
      306,  309,  306,  309,  311,  285,  286,  312,  594,  288,
      289,  290,  313,  291,  314,  587,  292,  293,  294,  295,
      297,  298,  299,  300,  301,  302,  303,  304,  305,  317,
      318,  315,  319,  311,  320,  322,  312,  307,  316,  323,
      324,  313,  325,  314,  308,  326,  328,  329,  330,  332,

      310,  333,  334,  335,  331,  327,  336,  337,  317,  318,
      315,  319,  338,  320,  322,  339,  307,  316,  323,  324,
      340,  325,  341,  308,  326,  328,  329,  330,  332,  310,
      333,  334,  335,  331,  327,  336,  337,  342,  343,  344,
      345,  338,  347,  346,  339,  348,  349,  350,  351,  340,
      352,  341,  353,  354,  355,  356,  357,  358,  359,  360,
      361,  362,  363,  364,  365,  366,  342,  343,  344,  345,
      486,  347,  346,  482,  348,  349,  350,  351,  559,  352,
      559,  353,  354,  355,  356,  357,  358,  359,  360,  361,
      362,  363,  364,  365,  366,  276,  276,  276,  276,  276,

      276,  276,  276,  276,  276,  276,  276,  276,  276,  276,
      276,  276,  276,  277,  277,  367,  370,  278,  278,  368,
      282,  282,  371,  372,  283,  283,  373,  374,  375,  376,
      377,  534,  381,  382,  392,  393,  394,  395,  397,  398,
      527,  402,  277,  277,  367,  370,  278,  278,  368,  282,
      282,  371,  372,  283,  283,  373,  374,  375,  376,  377,
      379,  381,  382,  392,  393,  394,  395,  397,  398,  306,
      402,  306,  309,  406,  309,  407,  408,  380,  525,  409,
      411,  522,  482,  412,  416,  400,  414,  417,  404,  379,
      418,  419,  474,  567,  420,  567,   96,  415,  421,  447,

      401,  422,  406,  405,  407,  408,  380,  383,  409,  411,
      384,  385,  412,  416,  423,  414,  417,  424,  386,  418,
      419,  387,  388,  420,  389,  390,  415,  421,  391,  425,
      422,  426,  427,  429,  430,  432,  383,  433,  434,  384,
      385,  435,  437,  423,  438,  439,  424,  386,  440,  441,
      387,  388,  442,  389,  390,  444,  445,  391,  425,  446,
      426,  427,  429,  430,  432,  448,  433,  434,  449,  451,
      435,  437,  367,  438,  439,  367,  368,  440,  441,  368,
      452,  442,  453,  457,  444,  445,  458,  378,  446,  378,
      459,  460,  461,  462,  448,  463,  464,  449,  451,  465,

      470,  367,  443,  455,  367,  368,  471,  472,  368,  452,
      473,  453,  457,  369,  396,  458,  396,  478,  456,  459,
      460,  461,  462,  466,  463,  464,  480,  467,  465,  470,
      476,  468,  914,  483,  914,  471,  472,  494,  914,  473,
      914,  914,  469,  914,  495,  477,  478,  496,  914,  914,
      497,  914,  466,  498,  400,  480,  467,  914,  499,  413,
      468,  413,  483,  914,  500,  404,  494,  321,  569,  914,
      569,  469,  914,  495,  296,  492,  496,  287,   90,  497,
      914,  410,  498,  410,  501,  505,  506,  499,  510,  511,
      493,  512,  914,  500,  485,  106,  485,  486,   99,  487,

      488,  488,  488,  488,  488,  488,  488,  488,  428,  513,
      428,   87,  489,  501,  505,  506,   86,  510,  511,   85,
      512,  502,  431,  502,  431,  517,  503,  504,  504,  504,
      504,  504,  504,  504,  504,  507,  914,  507,  513,  518,
      508,  509,  509,  509,  509,  509,  509,  509,  509,  436,
      520,  436,  521,  523,  517,  524,  526,  528,  529,  530,
      914,  914,  914,  914,  532,  515,  535,  536,  518,  537,
      538,  539,  540,  914,  543,  533,  914,  455,  544,  520,
      516,  521,  523,  545,  524,  526,  528,  529,  530,  541,
      546,  914,  914,  532,  547,  535,  536,  548,  537,  538,

      539,  540,  542,  543,  533,  550,  551,  544,  552,  914,
      552,  914,  545,  914,  555,  914,  914,  566,  541,  546,
      568,  914,  554,  547,  914,  914,  548,  914,  576,  476,
      576,  542,  914,  914,  550,  551,  549,  639,  549,  639,
      914,  914,  616,  555,  914,  556,  566,  556,  914,  568,
      557,  558,  558,  558,  558,  558,  558,  558,  558,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  914,  570,
      914,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      668,  914,  668,  914,  914,  914,  914,  914,  914,  914,
      914,  914,  914,  914,  914,  676,  914,  676,  570,  914,

      717,  718,  717,  718,  574,  490,  914,  490,  561,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  562,  914,
      562,  914,  914,  563,  564,  564,  564,  564,  564,  564,
      564,  564,  914,  574,  914,  914,  914,  561,  504,  504,
      504,  504,  504,  504,  504,  504,  504,  571,  492,  571,
      914,  571,  552,  571,  552,  588,  639,  588,  639,  664,
      703,  572,  719,  914,  719,  572,  554,  577,  578,  504,
      504,  504,  504,  504,  504,  504,  504,  504,  509,  509,
      509,  509,  509,  509,  509,  509,  509,  509,  509,  509,
      509,  509,  509,  509,  509,  509,  577,  578,  579,  914,

      581,  914,  573,  509,  509,  509,  509,  509,  509,  509,
      509,  509,  914,  582,  914,  914,  586,  914,  593,  595,
      552,  600,  552,  601,  575,  914,  914,  579,  515,  581,
      914,  573,  914,  914,  554,  602,  519,  741,  519,  741,
      914,  604,  582,  914,  588,  586,  588,  593,  595,  583,
      600,  583,  601,  575,  584,  585,  585,  585,  585,  585,
      585,  585,  585,  589,  602,  590,  596,  597,  591,  592,
      604,  605,  606,  607,  608,  609,  610,  611,  612,  613,
      617,  914,  635,  598,  598,  598,  598,  598,  598,  598,
      598,  598,  668,  750,  668,  750,  720,  750,  914,  750,

      605,  606,  607,  608,  609,  610,  611,  612,  613,  617,
      618,  635,  643,  649,  656,  750,  657,  750,  619,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  914,  792,  618,
      792,  643,  649,  656,  559,  657,  559,  619,  620,  914,
      620,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      629,  622,  914,  622,  623,  627,  624,  625,  625,  625,
      625,  625,  625,  625,  625,  630,  632,  658,  632,  626,
      564,  564,  564,  564,  564,  564,  564,  564,  564,  632,
      633,  632,  914,  717,  627,  717,  914,  754,  659,  914,

      669,  671,  567,  633,  567,  914,  658,  564,  564,  564,
      564,  564,  564,  564,  564,  564,  914,  914,  637,  569,
      571,  569,  571,  644,  576,  644,  576,  659,  654,  669,
      671,  634,  672,  638,  572,  641,  645,  914,  645,  655,
      652,  646,  647,  647,  647,  647,  647,  647,  647,  647,
      642,  660,  673,  660,  718,  653,  718,  654,  755,  914,
      634,  672,  914,  914,  660,  661,  660,  914,  655,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  661,  596,
      914,  673,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  596,  670,  674,  675,  677,  598,  598,  598,  598,

      598,  598,  598,  598,  598,  678,  662,  679,  598,  598,
      598,  598,  598,  598,  598,  598,  598,  680,  682,  683,
      684,  685,  674,  675,  677,  686,  690,  632,  571,  632,
      571,  660,  914,  660,  678,  662,  679,  691,  821,  701,
      821,  633,  572,  914,  914,  661,  680,  682,  683,  684,
      685,  687,  706,  687,  686,  690,  688,  689,  689,  689,
      689,  689,  689,  689,  689,  708,  691,  620,  701,  620,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  914,
      622,  706,  622,  623,  709,  624,  625,  625,  625,  625,
      625,  625,  625,  625,  708,  914,  914,  914,  626,  914,

      715,  914,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  914,  914,  709,  914,  914,  914,  914,  914,  914,
      914,  914,  914,  914,  914,  914,  914,  721,  722,  715,
      914,  723,  724,  914,  725,  914,  632,  726,  632,  693,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  629,
      633,  914,  696,  914,  696,  914,  721,  722,  914,  914,
      723,  724,  914,  725,  914,  697,  726,  697,  693,  914,
      698,  699,  699,  699,  699,  699,  699,  699,  699,  914,
      914,  914,  914,  914,  914,  914,  647,  647,  647,  647,
      647,  647,  647,  647,  647,  637,  914,  914,  914,  641,

      644,  914,  644,  660,  719,  660,  719,  845,  756,  845,
      914,  914,  914,  645,  914,  645,  914,  661,  646,  647,
      647,  647,  647,  647,  647,  647,  647,  647,  647,  647,
      647,  647,  647,  647,  647,  647,  647,  647,  647,  647,
      647,  647,  647,  647,  647,  914,  914,  914,  914,  710,
      596,  710,  914,  730,  731,  732,  733,  734,  735,  736,
      737,  914,  652,  914,  705,  712,  738,  598,  598,  598,
      598,  598,  598,  598,  598,  598,  914,  914,  739,  676,
      713,  676,  730,  731,  732,  733,  734,  735,  736,  737,
      914,  914,  727,  705,  727,  738,  914,  728,  729,  729,

      729,  729,  729,  729,  729,  729,  744,  739,  689,  689,
      689,  689,  689,  689,  689,  689,  689,  689,  689,  689,
      689,  689,  689,  689,  689,  689,  689,  689,  689,  689,
      689,  689,  689,  689,  689,  744,  865,  696,  865,  696,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  900,
      697,  900,  697,  747,  740,  698,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  747,  740,  748,  749,  710,  914,  710,  914,
      914,  752,  914,  758,  759,  760,  762,  763,  766,  767,

      769,  743,  712,  914,  914,  870,  712,  870,  914,  914,
      914,  914,  770,  748,  749,  914,  914,  713,  914,  871,
      752,  914,  758,  759,  760,  762,  763,  766,  767,  769,
      743,  729,  729,  729,  729,  729,  729,  729,  729,  729,
      764,  770,  772,  773,  729,  729,  729,  729,  729,  729,
      729,  729,  729,  764,  774,  780,  914,  729,  729,  729,
      729,  729,  729,  729,  729,  729,  782,  741,  783,  741,
      788,  772,  773,  789,  790,  794,  795,  796,  797,  798,
      776,  765,  776,  774,  780,  777,  778,  778,  778,  778,
      778,  778,  778,  778,  799,  782,  800,  783,  801,  788,

      914,  914,  789,  790,  794,  795,  796,  797,  798,  802,
      765,  805,  803,  778,  778,  778,  778,  778,  778,  778,
      778,  778,  806,  799,  810,  800,  812,  801,  778,  778,
      778,  778,  778,  778,  778,  778,  778,  818,  802,  819,
      805,  803,  778,  778,  778,  778,  778,  778,  778,  778,
      778,  806,  820,  810,  813,  812,  792,  814,  792,  822,
      823,  824,  825,  826,  828,  804,  818,  829,  819,  830,
      831,  832,  816,  833,  914,  835,  836,  837,  914,  841,
      914,  820,  914,  813,  842,  843,  814,  817,  822,  823,
      824,  825,  826,  828,  804,  914,  829,  914,  830,  831,

      832,  914,  833,  914,  835,  836,  837,  821,  841,  821,
      844,  914,  846,  842,  843,  847,  849,  816,  850,  851,
      852,  914,  854,  839,  855,  914,  914,  914,  860,  914,
      861,  862,  914,  863,  914,  864,  914,  866,  840,  844,
      914,  846,  867,  914,  847,  849,  914,  850,  851,  852,
      839,  854,  868,  855,  845,  869,  845,  860,  914,  861,
      862,  914,  863,  914,  864,  914,  866,  857,  870,  857,
      870,  867,  858,  859,  859,  859,  859,  859,  859,  859,
      859,  868,  871,  914,  869,  859,  859,  859,  859,  859,
      859,  859,  859,  859,  870,  873,  870,  874,  875,  876,

      880,  881,  882,  888,  889,  890,  914,  891,  871,  914,
      914,  914,  859,  859,  859,  859,  859,  859,  859,  859,
      859,  914,  914,  872,  873,  914,  874,  875,  876,  880,
      881,  882,  888,  889,  890,  865,  891,  865,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  914,  877,  883,
      877,  883,  872,  878,  879,  879,  879,  879,  879,  879,
      879,  879,  884,  895,  884,  914,  914,  885,  886,  886,
      886,  886,  886,  886,  886,  886,  892,  870,  914,  870,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  892,
      897,  871,  895,  879,  879,  879,  879,  879,  879,  879,

      879,  879,  914,  883,  914,  883,  886,  886,  886,  886,
      886,  886,  886,  886,  886,  898,  884,  893,  884,  897,
      914,  885,  886,  886,  886,  886,  886,  886,  886,  886,
      886,  886,  886,  886,  886,  886,  886,  886,  886,  899,
      902,  903,  905,  906,  898,  910,  893,  886,  886,  886,
      886,  886,  886,  886,  886,  886,  911,  900,  913,  900,
      914,  914,  914,  914,  914,  914,  914,  896,  899,  902,
      903,  905,  906,  908,  910,  914,  914,  908,  914,  914,
      914,  914,  914,  914,  914,  911,  914,  913,  909,  914,
      914,  914,  914,  914,  914,  914,  896,   13,   13,   13,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   50,  914,  914,  914,   50,   50,  914,
       50,   50,   50,   80,   80,  914,  914,   80,   52,  914,
      914,  914,   52,  914,  914,   52,   52,   52,   88,  914,
       88,  914,   88,   88,   88,   88,   88,   88,   98,   98,
      914,   98,   98,  914,   98,   98,   98,   98,   98,   98,

       98,   98,  100,  914,  914,  914,  100,  100,  914,  100,
      100,  100,  102,  914,  914,  914,  914,  914,  914,  102,
      102,  102,  101,  914,  914,  101,  101,  180,  180,  914,
      180,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      180,  184,  914,  184,  184,  185,  914,  914,  914,  185,
      185,  914,  185,  185,  185,   92,  914,  914,   92,   92,
      191,  914,  191,  191,   47,  914,   47,   47,  279,  914,
      279,  279,  399,  914,  914,  399,  914,  914,  914,  399,
      914,  399,  399,  399,  399,  403,  914,  914,  403,  914,
      914,  914,  403,  914,  403,  403,  403,  403,  450,  450,

      450,  914,  450,  450,  450,  450,  450,  450,  450,  450,
      450,  450,  454,  914,  914,  454,  914,  914,  914,  454,
      914,  454,  454,  454,  454,  475,  914,  914,  475,  914,
      914,  914,  475,  914,  475,  475,  475,  475,  479,  914,
      914,  914,  479,  479,  914,  479,  479,  479,  481,  914,
      914,  481,  481,  481,  914,  481,  481,  481,  484,  914,
      914,  484,  914,  484,  914,  484,  484,  484,  484,  484,
      484,  491,  914,  914,  491,  914,  914,  914,  491,  914,
      491,  491,  491,  491,  514,  914,  914,  514,  914,  914,
      914,  514,  914,  514,  514,  514,  514,  531,  914,  914,

      914,  531,  531,  914,  531,  531,  531,  553,  914,  914,
      553,  914,  914,  553,  553,  553,  914,  553,  553,  553,
      560,  914,  914,  914,  560,  560,  914,  560,  560,  560,
      565,  914,  914,  914,  565,  565,  914,  565,  565,  565,
      504,  914,  914,  914,  914,  914,  504,  914,  504,  914,
      914,  914,  504,  580,  914,  914,  914,  580,  580,  914,
      580,  580,  580,  621,  914,  914,  621,  914,  621,  914,
      621,  621,  621,  621,  621,  621,  628,  914,  914,  628,
      914,  914,  914,  628,  914,  628,  628,  628,  628,  631,
      914,  631,  631,  564,  914,  914,  914,  914,  914,  564,

      914,  564,  914,  914,  914,  564,  636,  914,  914,  636,
      914,  914,  914,  636,  914,  636,  636,  636,  636,  640,
      914,  914,  640,  914,  914,  914,  640,  914,  640,  640,
      640,  640,  648,  914,  648,  648,  650,  914,  650,  650,
      651,  914,  914,  651,  914,  914,  914,  651,  914,  651,
      651,  651,  651,  585,  914,  914,  914,  914,  914,  585,
      914,  585,  914,  914,  914,  585,  692,  914,  914,  914,
      692,  692,  914,  692,  692,  692,  694,  914,  694,  694,
      695,  914,  914,  914,  695,  695,  914,  695,  695,  695,
      700,  914,  700,  700,  702,  914,  914,  914,  702,  702,

      914,  702,  702,  702,  704,  914,  914,  914,  704,  704,
      914,  704,  704,  704,  707,  914,  914,  914,  707,  707,
      914,  707,  707,  707,  711,  914,  914,  711,  914,  914,
      914,  711,  914,  711,  711,  711,  711,  714,  914,  714,
      714,  716,  716,  716,  914,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  742,  914,  742,  742,  745,
      745,  745,  914,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  746,  914,  746,  746,  751,  914,  914,
      751,  914,  914,  914,  751,  751,  914,  751,  751,  751,
      757,  757,  757,  914,  757,  757,  757,  757,  757,  757,

      757,  757,  757,  757,  775,  914,  775,  775,  779,  914,
      779,  779,  784,  784,  784,  914,  784,  784,  784,  784,
      784,  784,  784,  784,  784,  784,  785,  785,  785,  914,
      785,  785,  785,  785,  785,  785,  785,  785,  785,  785,
      786,  786,  786,  914,  786,  786,  786,  786,  786,  786,
      786,  786,  786,  786,  793,  914,  793,  793,  815,  914,
      914,  815,  914,  914,  914,  815,  914,  815,  815,  815,
      815,  827,  914,  827,  827,  834,  914,  914,  914,  834,
      834,  914,  834,  834,  834,  838,  914,  914,  838,  914,
      914,  914,  838,  914,  838,  838,  838,  838,  853,  914,

      914,  914,  853,  853,  914,  853,  853,  853,  859,  914,
      914,  914,  914,  914,  859,  914,  859,  914,  914,  914,
      859,  887,  914,  887,  887,  901,  914,  901,  901,  904,
      914,  904,  904,  907,  914,  914,  907,  914,  914,  914,
      907,  914,  907,  907,  907,  907,  912,  914,  914,  914,
      912,  912,  914,  912,  912,  912,    7,  914,  914,  914,
      914,  914,  914,  914,  914,  914,  914,  914,  914,  914,
      914,  914,  914,  914,  914,  914,  914,  914,  914,  914,
      914,  914,  914,  914,  914,  914,  914,  914,  914,  914,
      914,  914,  914,  914,  914,  914,  914,  914,  914,  914,

      914,  914,  914,  914,  914,  914,  914,  914,  914,  914,
      914,  914,  914,  914,  914,  914,  914,  914,  914,  914,
      914,  914,  914,  914,  914,  914,  914,  914,  914,  914,
      914,  914,  914,  914,  914,  914,  914,  914,  914,  914,
      914,  914,  914,  914,  914,  914,  914
    } ;

static yyconst flex_int16_t yy_chk[3648] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,   12,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    3,    4,   19,   19,   19,   19,   19,
       19,   19,   19,   19,    3,    4,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   53,   36,   23,   54,    1,
        1,   12,   23,   31,  901,   31,   31,  881,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   35,  291,   35,
      291,   31,   35,   47,   53,   81,   81,   54,    1,    1,
        2,    2,    2,    2,    2,    2,    2,   36,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,   25,   65,   66,   36,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   57,   47,   59,   69,
       25,   59,   59,   70,   25,   57,   57,   75,   59,    2,
        2,  183,  183,   65,   66,   78,   78,   78,   78,   78,
       78,   78,   78,   78,  303,   57,  303,   59,   69,   25,
       59,   59,   70,   25,   57,   57,   75,   59,    2,    2,
        5,    5,    5,    5,    5,    5,    5,  107,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,   44,   61,   97,   61,   44,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   73,   63,  114,
      314,  115,  314,   45,   73,   44,  117,   45,   63,    5,
        5,  107,   44,   61,   97,   61,   44,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   73,   63,  114,  108,
      115,  109,   45,   73,   44,  117,   45,   63,    5,    5,
        6,    6,    6,    6,    6,    6,    6,  110,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,

        6,    6,    6,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   72,  108,   95,  109,  111,   55,   51,   55,
       56,   58,   51,  119,   67,   58,  844,   55,   56,    6,
        6,  110,   72,   55,   55,   58,  120,   67,   56,   67,
       56,   72,  121,   58,   56,  831,   55,   51,   55,   56,
       58,   51,  119,   67,   58,   95,   55,   56,    6,    6,
       22,   72,   55,   55,   58,  120,   67,   56,   67,   56,
      111,  121,   58,   56,   22,   94,   22,   94,  793,  319,
       94,  319,  789,  337,   95,  337,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,

       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,  112,  123,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   24,  123,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   60,   62,  124,   74,  118,  125,   24,   74,
       60,   62,   24,   60,   60,   64,  112,  118,   64,   74,
      116,   64,   60,  126,  116,   62,  786,   64,  129,   68,
       24,   60,   62,  124,   74,  118,  125,   24,   74,   60,
       62,   24,   60,   60,   64,  785,  118,   64,   74,  116,

       64,   60,  126,  116,   62,   68,   64,  129,   68,   24,
       49,   68,  340,  784,  340,   49,  345,  762,  345,  130,
       79,  757,  745,   79,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   80,   68,  736,  130,   68,   49,   49,
       68,   91,   79,   49,  131,   91,  122,  127,  130,   79,
       80,   49,   79,   80,   80,   49,  127,   49,  132,  122,
      135,   49,  733,   91,   49,  130,  724,   49,   49,  716,
       91,   79,   49,  131,   91,  122,  127,  626,  610,   80,
       49,  591,   80,   80,   49,  127,   49,  132,  122,  135,
       49,   71,   91,  128,   71,   71,  590,   71,   71,  128,

      589,  136,   71,  134,  134,  137,   71,   71,  586,  138,
       92,   92,   92,   92,   92,   92,   92,   92,   92,  412,
       71,  412,  128,   71,   71,   92,   71,   71,  128,   92,
      136,   71,  134,  134,  137,   71,   71,   90,  138,   90,
       90,  548,   90,   90,   90,   90,   90,   90,   90,   90,
       90,  139,  140,  141,   92,   90,  142,  143,   92,   96,
       96,   96,   96,   96,   96,   96,   96,   96,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  133,  144,  145,
      139,  140,  141,  101,  146,  142,  143,  101,  147,  149,
      150,  151,  148,  133,  152,  153,  151,  151,  155,  154,

      156,  157,  158,  159,  160,  152,  133,  144,  145,  148,
      154,  153,  101,  146,  160,  161,  101,  147,  149,  150,
      151,  148,  133,  152,  153,  151,  151,  155,  154,  156,
      157,  158,  159,  160,  152,  162,  163,  164,  148,  154,
      153,  165,  167,  160,  161,  166,  168,  169,  170,  171,
      172,  173,  174,  175,  164,  176,  177,  166,  178,  179,
      439,  472,  439,  472,  162,  163,  164,  547,  536,  184,
      165,  167,  529,  184,  166,  168,  169,  170,  171,  172,
      173,  174,  175,  164,  176,  177,  166,  178,  179,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  184,  190,

      191,  189,  184,  182,  191,  182,  192,  181,  182,  182,
      182,  182,  182,  182,  182,  182,  182,  189,  189,  189,
      189,  189,  189,  189,  189,  189,  193,  194,  190,  191,
      196,  197,  198,  191,  199,  192,  181,  200,  201,  205,
      206,  208,  209,  210,  211,  212,  213,  214,  215,  216,
      217,  218,  217,  218,  219,  193,  194,  221,  525,  196,
      197,  198,  222,  199,  223,  522,  200,  201,  205,  206,
      208,  209,  210,  211,  212,  213,  214,  215,  216,  225,
      226,  224,  227,  219,  228,  230,  221,  217,  224,  231,
      232,  222,  233,  223,  217,  234,  236,  237,  238,  239,

      218,  240,  241,  242,  238,  234,  243,  244,  225,  226,
      224,  227,  245,  228,  230,  246,  217,  224,  231,  232,
      247,  233,  248,  217,  234,  236,  237,  238,  239,  218,
      240,  241,  242,  238,  234,  243,  244,  250,  251,  252,
      253,  245,  254,  253,  246,  255,  256,  257,  259,  247,
      260,  248,  261,  262,  263,  264,  265,  266,  267,  268,
      269,  270,  271,  272,  273,  274,  250,  251,  252,  253,
      489,  254,  253,  481,  255,  256,  257,  259,  483,  260,
      483,  261,  262,  263,  264,  265,  266,  267,  268,  269,
      270,  271,  272,  273,  274,  275,  275,  275,  275,  275,

      275,  275,  275,  275,  276,  276,  276,  276,  276,  276,
      276,  276,  276,  277,  278,  279,  281,  277,  278,  279,
      282,  283,  284,  285,  282,  283,  286,  287,  288,  289,
      290,  458,  293,  294,  297,  299,  300,  302,  304,  305,
      450,  307,  277,  278,  279,  281,  277,  278,  279,  282,
      283,  284,  285,  282,  283,  286,  287,  288,  289,  290,
      292,  293,  294,  297,  299,  300,  302,  304,  305,  306,
      307,  306,  309,  310,  309,  311,  312,  292,  447,  313,
      317,  443,  403,  318,  321,  306,  320,  323,  309,  292,
      324,  325,  395,  496,  326,  496,  370,  320,  327,  361,

      306,  328,  310,  309,  311,  312,  292,  296,  313,  317,
      296,  296,  318,  321,  329,  320,  323,  331,  296,  324,
      325,  296,  296,  326,  296,  296,  320,  327,  296,  333,
      328,  334,  336,  338,  339,  341,  296,  342,  343,  296,
      296,  344,  346,  329,  347,  349,  331,  296,  350,  351,
      296,  296,  352,  296,  296,  356,  357,  296,  333,  358,
      334,  336,  338,  339,  341,  362,  342,  343,  363,  374,
      344,  346,  367,  347,  349,  368,  367,  350,  351,  368,
      375,  352,  377,  381,  356,  357,  382,  378,  358,  378,
      383,  384,  385,  386,  362,  387,  388,  363,  374,  389,

      391,  367,  355,  378,  368,  367,  392,  393,  368,  375,
      394,  377,  381,  280,  396,  382,  396,  397,  378,  383,
      384,  385,  386,  390,  387,  388,  402,  390,  389,  391,
      396,  390,  400,  409,  400,  392,  393,  414,  401,  394,
      401,  404,  390,  404,  416,  396,  397,  417,  400,  405,
      420,  405,  390,  421,  401,  402,  390,  404,  423,  413,
      390,  413,  409,  400,  424,  405,  414,  229,  499,  401,
      499,  390,  404,  416,  207,  413,  417,  195,   93,  420,
      405,  410,  421,  410,  425,  429,  430,  423,  432,  433,
      413,  434,   87,  424,  410,   46,  410,  410,   39,  410,

      410,  410,  410,  410,  410,  410,  410,  410,  428,  435,
      428,   30,  410,  425,  429,  430,   29,  432,  433,   27,
      434,  428,  431,  428,  431,  437,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  431,    7,  431,  435,  438,
      431,  431,  431,  431,  431,  431,  431,  431,  431,  436,
      440,  436,  442,  445,  437,  446,  449,  451,  452,  453,
      455,  456,  455,  456,  457,  436,  459,  460,  438,  461,
      462,  463,  464,    0,  466,  457,  455,  456,  467,  440,
      436,  442,  445,  468,  446,  449,  451,  452,  453,  465,
      469,  455,  456,  457,  470,  459,  460,  471,  461,  462,

      463,  464,  465,  466,  457,  473,  474,  467,  475,  476,
      475,  476,  468,  477,  480,  477,    0,  495,  465,  469,
      498,    0,  475,  470,    0,  476,  471,    0,  510,  477,
      510,  465,    0,    0,  473,  474,  549,  568,  549,  568,
      476,    0,  549,  480,  477,  482,  495,  482,    0,  498,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  486,  500,
      486,  487,  487,  487,  487,  487,  487,  487,  487,  487,
      592,  486,  592,  486,  486,    0,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  605,    0,  605,  500,  486,

      665,  666,  665,  666,  505,  490,    0,  490,  487,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  490,  492,
      490,  492,    0,  490,  490,  490,  490,  490,  490,  490,
      490,  490,  493,  505,  493,  492,    0,  487,  502,  502,
      502,  502,  502,  502,  502,  502,  502,  503,  493,  503,
      492,  504,  552,  504,  552,  588,  639,  588,  639,  588,
      639,  503,  667,  493,  667,  504,  552,  511,  512,  504,
      504,  504,  504,  504,  504,  504,  504,  504,  507,  507,
      507,  507,  507,  507,  507,  507,  507,  508,  508,  508,
      508,  508,  508,  508,  508,  508,  511,  512,  513,  515,

      517,  515,  503,  509,  509,  509,  509,  509,  509,  509,
      509,  509,  516,  518,  516,  515,  520,    0,  524,  526,
      553,  530,  553,  534,  508,    0,    0,  513,  516,  517,
      515,  503,    0,    0,  553,  535,  519,  690,  519,  690,
        0,  537,  518,  516,  523,  520,  523,  524,  526,  519,
      530,  519,  534,  508,  519,  519,  519,  519,  519,  519,
      519,  519,  519,  523,  535,  523,  527,  527,  523,  523,
      537,  538,  539,  540,  541,  542,  543,  544,  545,  546,
      550,    0,  566,  527,  527,  527,  527,  527,  527,  527,
      527,  527,  668,  711,  668,  711,  668,  750,    0,  750,

      538,  539,  540,  541,  542,  543,  544,  545,  546,  550,
      551,  566,  570,  574,  578,  751,  579,  751,  551,  556,
      556,  556,  556,  556,  556,  556,  556,  556,  557,  557,
      557,  557,  557,  557,  557,  557,  557,    0,  764,  551,
      764,  570,  574,  578,  559,  579,  559,  551,  554,    0,
      554,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      559,  554,    0,  554,  554,  557,  554,  554,  554,  554,
      554,  554,  554,  554,  554,  559,  563,  581,  563,  554,
      562,  562,  562,  562,  562,  562,  562,  562,  562,  564,
      563,  564,    0,  717,  557,  717,    0,  717,  582,    0,

      593,  599,  567,  564,  567,    0,  581,  564,  564,  564,
      564,  564,  564,  564,  564,  564,    0,    0,  567,  569,
      571,  569,  571,  572,  576,  572,  576,  582,  577,  593,
      599,  563,  601,  567,  571,  569,  572,    0,  572,  577,
      576,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      569,  584,  602,  584,  718,  576,  718,  577,  718,    0,
      563,  601,    0,    0,  585,  584,  585,    0,  577,  583,
      583,  583,  583,  583,  583,  583,  583,  583,  585,  597,
        0,  602,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  598,  598,  603,  604,  606,  597,  597,  597,  597,

      597,  597,  597,  597,  597,  607,  584,  608,  598,  598,
      598,  598,  598,  598,  598,  598,  598,  609,  611,  612,
      613,  614,  603,  604,  606,  615,  617,  632,  648,  632,
      648,  660,    0,  660,  607,  584,  608,  618,  798,  635,
      798,  632,  648,    0,    0,  660,  609,  611,  612,  613,
      614,  616,  649,  616,  615,  617,  616,  616,  616,  616,
      616,  616,  616,  616,  616,  656,  618,  620,  635,  620,
      622,  622,  622,  622,  622,  622,  622,  622,  622,    0,
      620,  649,  620,  620,  659,  620,  620,  620,  620,  620,
      620,  620,  620,  620,  656,  629,    0,  629,  620,  623,

      663,  623,  624,  624,  624,  624,  624,  624,  624,  624,
      624,  629,  623,  659,  623,  623,    0,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  629,  669,  671,  663,
      623,  672,  673,  630,  674,  630,  700,  675,  700,  624,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  630,
      700,    0,  633,  637,  633,  637,  669,  671,    0,    0,
      672,  673,    0,  674,  630,  633,  675,  633,  624,  637,
      633,  633,  633,  633,  633,  633,  633,  633,  633,  638,
      641,  638,  641,  642,  637,  642,  645,  645,  645,  645,
      645,  645,  645,  645,  645,  638,  641,    0,    0,  642,

      644,    0,  644,  714,  719,  714,  719,  828,  719,  828,
      638,  641,    0,  644,  642,  644,    0,  714,  644,  644,
      644,  644,  644,  644,  644,  644,  644,  646,  646,  646,
      646,  646,  646,  646,  646,  646,  647,  647,  647,  647,
      647,  647,  647,  647,  647,  652,  653,  652,  653,  661,
      670,  661,    0,  677,  678,  679,  680,  681,  682,  683,
      684,  652,  653,    0,  646,  661,  685,  670,  670,  670,
      670,  670,  670,  670,  670,  670,  652,  653,  686,  676,
      661,  676,  677,  678,  679,  680,  681,  682,  683,  684,
        0,    0,  676,  646,  676,  685,    0,  676,  676,  676,

      676,  676,  676,  676,  676,  676,  701,  686,  687,  687,
      687,  687,  687,  687,  687,  687,  687,  688,  688,  688,
      688,  688,  688,  688,  688,  688,  689,  689,  689,  689,
      689,  689,  689,  689,  689,  701,  851,  696,  851,  696,
      697,  697,  697,  697,  697,  697,  697,  697,  697,  892,
      696,  892,  696,  706,  688,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  706,  688,  708,  709,  710,  712,  710,  712,
      713,  715,  713,  721,  722,  723,  725,  726,  731,  732,

      734,  698,  710,  712,    0,  870,  713,  870,    0,    0,
        0,    0,  735,  708,  709,    0,    0,  710,  712,  870,
      715,  713,  721,  722,  723,  725,  726,  731,  732,  734,
      698,  727,  727,  727,  727,  727,  727,  727,  727,  727,
      728,  735,  737,  738,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  729,  739,  744,    0,  729,  729,  729,
      729,  729,  729,  729,  729,  729,  749,  741,  752,  741,
      759,  737,  738,  760,  761,  766,  767,  768,  769,  770,
      741,  728,  741,  739,  744,  741,  741,  741,  741,  741,
      741,  741,  741,  741,  771,  749,  772,  752,  773,  759,

        0,    0,  760,  761,  766,  767,  768,  769,  770,  774,
      728,  780,  774,  776,  776,  776,  776,  776,  776,  776,
      776,  776,  783,  771,  788,  772,  790,  773,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  794,  774,  796,
      780,  774,  778,  778,  778,  778,  778,  778,  778,  778,
      778,  783,  797,  788,  791,  790,  792,  791,  792,  799,
      800,  801,  802,  803,  805,  777,  794,  806,  796,  811,
      812,  813,  792,  814,    0,  818,  819,  820,    0,  822,
        0,  797,    0,  791,  824,  825,  791,  792,  799,  800,
      801,  802,  803,  805,  777,  816,  806,  816,  811,  812,

      813,  817,  814,  817,  818,  819,  820,  821,  822,  821,
      826,  816,  829,  824,  825,  830,  832,  817,  833,  835,
      836,    0,  841,  821,  843,    0,  816,  839,  846,  839,
      847,  848,  817,  849,  840,  850,  840,  852,  821,  826,
        0,  829,  854,  839,  830,  832,    0,  833,  835,  836,
      840,  841,  855,  843,  845,  856,  845,  846,  839,  847,
      848,    0,  849,    0,  850,  840,  852,  845,  858,  845,
      858,  854,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  855,  858,    0,  856,  857,  857,  857,  857,  857,
      857,  857,  857,  857,  859,  860,  859,  862,  863,  864,

      866,  868,  869,  873,  874,  875,    0,  876,  859,    0,
        0,    0,  859,  859,  859,  859,  859,  859,  859,  859,
      859,    0,    0,  858,  860,    0,  862,  863,  864,  866,
      868,  869,  873,  874,  875,  865,  876,  865,  877,  877,
      877,  877,  877,  877,  877,  877,  877,    0,  865,  871,
      865,  871,  858,  865,  865,  865,  865,  865,  865,  865,
      865,  865,  871,  882,  871,    0,    0,  871,  871,  871,
      871,  871,  871,  871,  871,  871,  878,  887,    0,  887,
      878,  878,  878,  878,  878,  878,  878,  878,  878,  879,
      888,  887,  882,  879,  879,  879,  879,  879,  879,  879,

      879,  879,    0,  883,    0,  883,  884,  884,  884,  884,
      884,  884,  884,  884,  884,  889,  883,  878,  883,  888,
        0,  883,  883,  883,  883,  883,  883,  883,  883,  883,
      885,  885,  885,  885,  885,  885,  885,  885,  885,  891,
      894,  895,  898,  899,  889,  902,  878,  886,  886,  886,
      886,  886,  886,  886,  886,  886,  905,  900,  910,  900,
      908,  909,  908,  909,    0,    0,    0,  885,  891,  894,
      895,  898,  899,  900,  902,    0,  908,  909,    0,    0,
        0,    0,    0,    0,    0,  905,    0,  910,  900,    0,
        0,  908,  909,    0,    0,    0,  885,  915,  915,  915,

      915,  915,  915,  915,  915,  915,  915,  915,  915,  915,
      915,  916,  916,  916,  916,  916,  916,  916,  916,  916,
      916,  916,  916,  916,  916,  917,  917,  917,  917,  917,
      917,  917,  917,  917,  917,  917,  917,  917,  917,  918,
      918,  918,  918,  918,  918,  918,  918,  918,  918,  918,
      918,  918,  918,  919,    0,    0,    0,  919,  919,    0,
      919,  919,  919,  920,  920,    0,    0,  920,  921,    0,
        0,    0,  921,    0,    0,  921,  921,  921,  922,    0,
      922,    0,  922,  922,  922,  922,  922,  922,  923,  923,
        0,  923,  923,    0,  923,  923,  923,  923,  923,  923,

      923,  923,  924,    0,    0,    0,  924,  924,    0,  924,
      924,  924,  925,    0,    0,    0,    0,    0,    0,  925,
      925,  925,  926,    0,    0,  926,  926,  927,  927,    0,
      927,  927,  927,  927,  927,  927,  927,  927,  927,  927,
      927,  928,    0,  928,  928,  929,    0,    0,    0,  929,
      929,    0,  929,  929,  929,  930,    0,    0,  930,  930,
      931,    0,  931,  931,  932,    0,  932,  932,  933,    0,
      933,  933,  934,    0,    0,  934,    0,    0,    0,  934,
        0,  934,  934,  934,  934,  935,    0,    0,  935,    0,
        0,    0,  935,    0,  935,  935,  935,  935,  936,  936,

      936,    0,  936,  936,  936,  936,  936,  936,  936,  936,
      936,  936,  937,    0,    0,  937,    0,    0,    0,  937,
        0,  937,  937,  937,  937,  938,    0,    0,  938,    0,
        0,    0,  938,    0,  938,  938,  938,  938,  939,    0,
        0,    0,  939,  939,    0,  939,  939,  939,  940,    0,
        0,  940,  940,  940,    0,  940,  940,  940,  941,    0,
        0,  941,    0,  941,    0,  941,  941,  941,  941,  941,
      941,  942,    0,    0,  942,    0,    0,    0,  942,    0,
      942,  942,  942,  942,  943,    0,    0,  943,    0,    0,
        0,  943,    0,  943,  943,  943,  943,  944,    0,    0,

        0,  944,  944,    0,  944,  944,  944,  945,    0,    0,
      945,    0,    0,  945,  945,  945,    0,  945,  945,  945,
      946,    0,    0,    0,  946,  946,    0,  946,  946,  946,
      947,    0,    0,    0,  947,  947,    0,  947,  947,  947,
      948,    0,    0,    0,    0,    0,  948,    0,  948,    0,
        0,    0,  948,  949,    0,    0,    0,  949,  949,    0,
      949,  949,  949,  950,    0,    0,  950,    0,  950,    0,
      950,  950,  950,  950,  950,  950,  951,    0,    0,  951,
        0,    0,    0,  951,    0,  951,  951,  951,  951,  952,
        0,  952,  952,  953,    0,    0,    0,    0,    0,  953,

        0,  953,    0,    0,    0,  953,  954,    0,    0,  954,
        0,    0,    0,  954,    0,  954,  954,  954,  954,  955,
        0,    0,  955,    0,    0,    0,  955,    0,  955,  955,
      955,  955,  956,    0,  956,  956,  957,    0,  957,  957,
      958,    0,    0,  958,    0,    0,    0,  958,    0,  958,
      958,  958,  958,  959,    0,    0,    0,    0,    0,  959,
        0,  959,    0,    0,    0,  959,  960,    0,    0,    0,
      960,  960,    0,  960,  960,  960,  961,    0,  961,  961,
      962,    0,    0,    0,  962,  962,    0,  962,  962,  962,
      963,    0,  963,  963,  964,    0,    0,    0,  964,  964,

        0,  964,  964,  964,  965,    0,    0,    0,  965,  965,
        0,  965,  965,  965,  966,    0,    0,    0,  966,  966,
        0,  966,  966,  966,  967,    0,    0,  967,    0,    0,
        0,  967,    0,  967,  967,  967,  967,  968,    0,  968,
      968,  969,  969,  969,    0,  969,  969,  969,  969,  969,
      969,  969,  969,  969,  969,  970,    0,  970,  970,  971,
      971,  971,    0,  971,  971,  971,  971,  971,  971,  971,
      971,  971,  971,  972,    0,  972,  972,  973,    0,    0,
      973,    0,    0,    0,  973,  973,    0,  973,  973,  973,
      974,  974,  974,    0,  974,  974,  974,  974,  974,  974,

      974,  974,  974,  974,  975,    0,  975,  975,  976,    0,
      976,  976,  977,  977,  977,    0,  977,  977,  977,  977,
      977,  977,  977,  977,  977,  977,  978,  978,  978,    0,
      978,  978,  978,  978,  978,  978,  978,  978,  978,  978,
      979,  979,  979,    0,  979,  979,  979,  979,  979,  979,
      979,  979,  979,  979,  980,    0,  980,  980,  981,    0,
        0,  981,    0,    0,    0,  981,    0,  981,  981,  981,
      981,  982,    0,  982,  982,  983,    0,    0,    0,  983,
      983,    0,  983,  983,  983,  984,    0,    0,  984,    0,
        0,    0,  984,    0,  984,  984,  984,  984,  985,    0,

        0,    0,  985,  985,    0,  985,  985,  985,  986,    0,
        0,    0,    0,    0,  986,    0,  986,    0,    0,    0,
      986,  987,    0,  987,  987,  988,    0,  988,  988,  989,
        0,  989,  989,  990,    0,    0,  990,    0,    0,    0,
      990,    0,  990,  990,  990,  990,  991,    0,    0,    0,
      991,  991,    0,  991,  991,  991,  914,  914,  914,  914,
      914,  914,  914,  914,  914,  914,  914,  914,  914,  914,
      914,  914,  914,  914,  914,  914,  914,  914,  914,  914,
      914,  914,  914,  914,  914,  914,  914,  914,  914,  914,
      914,  914,  914,  914,  914,  914,  914,  914,  914,  914,

      914,  914,  914,  914,  914,  914,  914,  914,  914,  914,
      914,  914,  914,  914,  914,  914,  914,  914,  914,  914,
      914,  914,  914,  914,  914,  914,  914,  914,  914,  914,
      914,  914,  914,  914,  914,  914,  914,  914,  914,  914,
      914,  914,  914,  914,  914,  914,  914
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[163] =
    {   0,
0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 
    1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
    0, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#ifndef YYLMAX
#define YYLMAX 8192
#endif

char yytext[YYLMAX];
char *yytext_ptr;
#line 1 "merged_scanner_gen.l"
/**
 * Codasip Ltd
 *
 * CONFIDENTIAL
 *
 * Copyright 2014 Codasip Ltd
 *
 * All Rights Reserved.
 *
 * NOTICE: All information contained in this file, is and shall remain the property of Codasip Ltd
 * and its suppliers, if any.
 *
 * The intellectual and technical concepts contained herein are confidential and proprietary to
 * Codasip Ltd and are protected by trade secret and copyright law.  In addition, elements of the
 * technical concepts may be patent pending.
 *
 * This file is part of the Codasip Studio product. No part of the Studio product, including this
 * file, may be use, copied, modified, or distributed except in accordance with the terms contained
 * in Codasip license agreement under which you obtained this file.
 */
/**
 *  \brief Base of lexical analyzer for assembly code generated by msp-gcc compiler.
 * 
 *         Instruction set information is generated automatically,
 *         this file describes mainly directives and label and constants formats.
 *
 *         Lexical analyzer generated from this file can have 2 different modes:
 *         1. - ASM_LEX_ANALYZER - serves as fixed part of lexical analyzer for assembler.
 *         2. - ASM_INSTR_TOKEN_RECOGNIZER - used to recognize tokens (terminals)
 *                                           retrieved from instruction set description.
 *
 *         Mode 1 is set default.
 *         To override it and to set to mode, compile c file generated from this lex file
 *         with defined macro ASM_INSTR_TOKEN_RECOGNIZER (-DASM_INSTR_TOKEN_RECOGNIZER).
 *  \note Support for .local directive in conjunction with .comm, now is ignored
 */
/* %option interactive */
#line 48 "merged_scanner_gen.l"
#ifdef _WIN32
#define YY_NO_UNISTD_H
#include <io.h>
#endif

#include <string>

#include "check_condition.h"
#include "codasip_io.h"

#include "asmstdinclude.h"


extern int yydebug;


/* mode selection */
#ifndef ASM_INSTR_TOKEN_RECOGNIZER
#define ASM_LEX_ANALYZER
#endif


#ifdef ASM_LEX_ANALYZER

#ifndef YYTOKENTYPE

#include <string>
#include <inttypes.h>

#include "assembler_messages.h"
#include "directivehandleriface.h"
#include "logical_file_info.h"


namespace codasip {
namespace assembler {
class Token;
class TokenList;
class TokenNode;
}
}


#define RETURN(X) { \
    bool isMacroCall; \
    int token = TokenHandlerUnit::Process(isMacroCall, yylval.text, X); \
    if (isMacroCall) \
    { \
        BEGIN(IN_MACRO_CALL); \
    } \
    return token; \
}


// YYTOKENTYPE is defined in merged_scanner_gen.hpp
#include "merged_parser_gen.hpp"

#endif  // YYTOKENTYPE


#include <map>
#include <vector>


// yylex function override because of concatenated terminal handling
#define YY_DECL int orig_yylex()


#elif defined ASM_INSTR_TOKEN_RECOGNIZER

#include <string>
#include <inttypes.h>


class Token;
class TokenList;
class TokenNode;


int yydebug;    // not linked with syntactic analyzer


#define RETURN(X) { return (X); }


#include "tokeninfo_gen.hpp"


YYSTYPE yylval;


/**
 *  \brief This value is returned in case that input token is the same as (collides) character
 *         that begins an one-line comment.
 */
#define T_COMMENT_ERROR 0x7FFFFFFD

/**
 *  \brief Unknown token value - this value is returned by the recognizer in case that
 *         input token was not recognized.
 */
#define T_UNKNOWN 0x7FFFFFFE

/** 
 *  \brief Erroneous token recognized - that means a token that is general and cannot be used
 *         as a string or a number. Tokens for which recognizer returns this value collide
 *         with assembler and expression grammar definitions.
 */
#define T_TOKEN_ERROR 0x7FFFFFFF

/**
 *  \brief Overridden input method.
 *         GetNextInput returns false, when there is no another text to read
 *         - in this case we need to return EOB_ACT_END_OF_FILE directly
 *         from function yy_get_next_buffer(), where is this macro used.
 *         (see this generated function yy_get_next_buffer())
 */
/* FIXME hack: Compatible with flex >= 2.5.36 */
void GetNextInput(char* buf, yy_size_t* resultSize, int maxSize);
/* FIXME hack: Compatible with flex <= 2.5.35 */
void GetNextInput(char* buf, int* resultSize, int maxSize);
#define YY_INPUT(buf, result, maxSize) \
    GetNextInput((buf), &(result), (maxSize))


#endif  // ASM_INSTR_TOKEN_RECOGNIZER


using namespace codasip::assembler;


/* these defines must not be modified, they are used in generated code */
/*-----------------------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------------------*/
/*--------------------------------------start of user-modifiable section-------------------------*/
/*-----------------------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------------------*/
#line 211 "merged_scanner_gen.l"

// some unnecessary directives are ignored, however some may
// be important and using this macro, you can turn on or off warnings about these directives
#define PRINT_WARNING_ON_NONSUPPORTED_DIRECTIVES

void WarnNotSupportedDirective(const char* name);
void Ignoring(IgnoreType type = IGNORE_NONE);



#line 1807 "merged_scanner_gen.cpp"

#define INITIAL 0
#define IN_C_COMMENT 1
#define IN_MACRO_CALL 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

int yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 226 "merged_scanner_gen.l"

#line 1999 "merged_scanner_gen.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 915 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3557 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

/* comments */
case 1:
YY_RULE_SETUP
#line 235 "merged_scanner_gen.l"
{
    #if defined ASM_LEX_ANALYZER
    #elif defined ASM_INSTR_TOKEN_RECOGNIZER
        return T_COMMENT_ERROR;
    #endif
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 242 "merged_scanner_gen.l"
{
    #if defined ASM_LEX_ANALYZER
        BEGIN (IN_C_COMMENT);
    #elif defined ASM_INSTR_TOKEN_RECOGNIZER
        return T_COMMENT_ERROR;
    #endif
}
	YY_BREAK


case 3:
YY_RULE_SETUP
#line 252 "merged_scanner_gen.l"
BEGIN(INITIAL);
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 253 "merged_scanner_gen.l"
/* nothing */
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 254 "merged_scanner_gen.l"
/* nothing */
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 255 "merged_scanner_gen.l"
{
#if defined ASM_LEX_ANALYZER
    LogicalFileInfo::IncrementLine();
    yylval.num = yylineno; // line information
#endif
}
	YY_BREAK
case YY_STATE_EOF(IN_C_COMMENT):
#line 261 "merged_scanner_gen.l"
{
#if defined ASM_LEX_ANALYZER
    codasip::assembler::err::UNEXPECTED_EOF_INSIDE_COMMENT(LogicalFileInfo::GetLocation(true));
#endif
    THROW_ERROR();
}
	YY_BREAK



case 7:
YY_RULE_SETUP
#line 271 "merged_scanner_gen.l"
{
    yylval.text = new std::string(yytext);
    return T_ID;
}
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 275 "merged_scanner_gen.l"
{
#if defined ASM_LEX_ANALYZER
    LogicalFileInfo::IncrementLine();
    yylval.num = yylineno; // line information
#endif
    BEGIN(INITIAL);
    return T_NEWLINE;
}
	YY_BREAK

/* lines from preprocessor */
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 286 "merged_scanner_gen.l"
{
#if defined ASM_LEX_ANALYZER
    //"# num filename flags" - line directive generated by C preprocessor,
    // flags are ignored
    // used code from codal compiler
    // see http://gcc.gnu.org/onlinedocs/cpp/Preprocessor-Output.html
    errno = 0;
    int ii = 0;
    // skip whitespaces
    while (yytext[ii] != '#') {++ii;}
    // skip not decimal digits (MSVC #line)
    while (!isdigit(yytext[ii])) {++ii;}
    
    // parse line number
    int line = strtol(yytext + ii, NULL, 10);

    CHECK_CONDITION(errno == 0)
        << "Error while converting preprocessor-generated line number." << std::endl;

    // skip line number
    while (yytext[ii++] != '\"') {}
    // copy full path
    int jj = 0;
    char file[512];
    while (yytext[ii] != '\"') { file[jj++] = yytext[ii++]; CHECK_CONDITION(jj < 511); }
    file[jj] = '\0';
    // store line info
    yylineno = line;
    // set given file path and line
    LogicalFileInfo::SetFileName(fs::Path(file));
    LogicalFileInfo::SetLine(line);

#elif defined ASM_INSTR_TOKEN_RECOGNIZER
    RETURN(T_TOKEN_ERROR);
#endif
}
	YY_BREAK
/* ignored directives */
case 10:
YY_RULE_SETUP
#line 324 "merged_scanner_gen.l"
Ignoring();
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 325 "merged_scanner_gen.l"
Ignoring(codasip::assembler::IGNORE_CFI);
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 326 "merged_scanner_gen.l"
Ignoring(codasip::assembler::IGNORE_CFI);
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 327 "merged_scanner_gen.l"
Ignoring();
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 328 "merged_scanner_gen.l"
Ignoring();
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 329 "merged_scanner_gen.l"
Ignoring();
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 330 "merged_scanner_gen.l"
Ignoring();
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 331 "merged_scanner_gen.l"
Ignoring();
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 332 "merged_scanner_gen.l"
Ignoring();
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 333 "merged_scanner_gen.l"
Ignoring();
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 334 "merged_scanner_gen.l"
Ignoring();
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 335 "merged_scanner_gen.l"
Ignoring();
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 336 "merged_scanner_gen.l"
Ignoring();
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 337 "merged_scanner_gen.l"
Ignoring();
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 338 "merged_scanner_gen.l"
Ignoring();
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 339 "merged_scanner_gen.l"
Ignoring();
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 340 "merged_scanner_gen.l"
Ignoring();
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 341 "merged_scanner_gen.l"
Ignoring();
	YY_BREAK
/* For RISC-V */
case 28:
YY_RULE_SETUP
#line 344 "merged_scanner_gen.l"
Ignoring();
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 346 "merged_scanner_gen.l"
Ignoring();
	YY_BREAK
/* unsupported directives */
/* note: some of the patterns for directives arguments may be wrong */
case 30:
YY_RULE_SETUP
#line 350 "merged_scanner_gen.l"
WarnNotSupportedDirective(yytext);
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 351 "merged_scanner_gen.l"
WarnNotSupportedDirective(yytext);
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 352 "merged_scanner_gen.l"
WarnNotSupportedDirective(yytext);
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 353 "merged_scanner_gen.l"
WarnNotSupportedDirective(yytext);
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 354 "merged_scanner_gen.l"
WarnNotSupportedDirective(yytext);
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 355 "merged_scanner_gen.l"
WarnNotSupportedDirective(yytext);
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 356 "merged_scanner_gen.l"
WarnNotSupportedDirective(yytext);
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 357 "merged_scanner_gen.l"
WarnNotSupportedDirective(yytext);
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 358 "merged_scanner_gen.l"
WarnNotSupportedDirective(yytext);
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 359 "merged_scanner_gen.l"
WarnNotSupportedDirective(yytext);
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
#line 360 "merged_scanner_gen.l"
WarnNotSupportedDirective(yytext);
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 361 "merged_scanner_gen.l"
WarnNotSupportedDirective(yytext);
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 362 "merged_scanner_gen.l"
WarnNotSupportedDirective(yytext);
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 363 "merged_scanner_gen.l"
WarnNotSupportedDirective(yytext);
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 364 "merged_scanner_gen.l"
WarnNotSupportedDirective(yytext);
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 365 "merged_scanner_gen.l"
WarnNotSupportedDirective(yytext);
	YY_BREAK
/* erroneous directives */
case 46:
YY_RULE_SETUP
#line 368 "merged_scanner_gen.l"
{
#if defined ASM_LEX_ANALYZER
    err::UNSUPPORTED_DIRECTIVE_USECT(LogicalFileInfo::GetLocation(true));
    throw AssemblerError();
#endif
}
	YY_BREAK
/* directive tokens */
case 47:
YY_RULE_SETUP
#line 376 "merged_scanner_gen.l"
RETURN(T_ABS_ORG);
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 377 "merged_scanner_gen.l"
RETURN(T_ADDRESS_SPACE);
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 379 "merged_scanner_gen.l"
RETURN(T_ALIGN);
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 380 "merged_scanner_gen.l"
RETURN(T_BALIGN);
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 381 "merged_scanner_gen.l"
RETURN(T_BALIGNW);
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 382 "merged_scanner_gen.l"
RETURN(T_BALIGNL);
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 383 "merged_scanner_gen.l"
RETURN(T_P2ALIGN);
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 384 "merged_scanner_gen.l"
RETURN(T_P2ALIGNW);
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 385 "merged_scanner_gen.l"
RETURN(T_P2ALIGNL);
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 387 "merged_scanner_gen.l"
RETURN(T_ALTMACRO);
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 388 "merged_scanner_gen.l"
RETURN(T_ASCII);
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 389 "merged_scanner_gen.l"
RETURN(T_ASCIZ);
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 390 "merged_scanner_gen.l"
RETURN(T_BIT);
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 391 "merged_scanner_gen.l"
RETURN(T_BUNDLE_ALIGN_END);
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 393 "merged_scanner_gen.l"
RETURN(T_BYTE);
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 394 "merged_scanner_gen.l"
RETURN(T_HWORD);
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 395 "merged_scanner_gen.l"
RETURN(T_INT);
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 396 "merged_scanner_gen.l"
RETURN(T_LONG);
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 397 "merged_scanner_gen.l"
RETURN(T_QUAD);
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 398 "merged_scanner_gen.l"
RETURN(T_SHORT);
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 399 "merged_scanner_gen.l"
RETURN(T_WORD);
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 400 "merged_scanner_gen.l"
RETURN(T_HALF);
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 401 "merged_scanner_gen.l"
RETURN(T_DWORD);
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 402 "merged_scanner_gen.l"
RETURN(T_2BYTE);
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 403 "merged_scanner_gen.l"
RETURN(T_4BYTE);
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 405 "merged_scanner_gen.l"
RETURN(T_CFI_STARTPROC);
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 406 "merged_scanner_gen.l"
RETURN(T_CFI_ENDPROC);
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 407 "merged_scanner_gen.l"
RETURN(T_CFI_DEF_CFA);
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 408 "merged_scanner_gen.l"
RETURN(T_CFI_DEF_CFA_REGISTER);
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 409 "merged_scanner_gen.l"
RETURN(T_CFI_DEF_CFA_OFFSET);
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 410 "merged_scanner_gen.l"
RETURN(T_CFI_ADJUST_CFA_OFFSET);
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 411 "merged_scanner_gen.l"
RETURN(T_CFI_OFFSET);
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 412 "merged_scanner_gen.l"
RETURN(T_CFI_VAL_OFFSET);
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 413 "merged_scanner_gen.l"
RETURN(T_CFI_REGISTER);
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 414 "merged_scanner_gen.l"
RETURN(T_CFI_SAME_VALUE);
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 415 "merged_scanner_gen.l"
RETURN(T_CFI_RETURN_COLUMN);
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 417 "merged_scanner_gen.l"
RETURN(T_CODASIP_RETSTRUCT_REG);
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 418 "merged_scanner_gen.l"
RETURN(T_CODASIP_RETVAL_REGS);
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 420 "merged_scanner_gen.l"
RETURN(T_COMM);
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 421 "merged_scanner_gen.l"
RETURN(T_LCOMM);
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 423 "merged_scanner_gen.l"
RETURN(T_DATA);
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 424 "merged_scanner_gen.l"
RETURN(T_TEXT);
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 425 "merged_scanner_gen.l"
RETURN(T_BSS);
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 427 "merged_scanner_gen.l"
{ yydebug = 0; RETURN(T_DEBUG_OFF); }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 428 "merged_scanner_gen.l"
{ yydebug = 1; RETURN(T_DEBUG_ON); }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 430 "merged_scanner_gen.l"
RETURN(T_DOUBLE);
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 431 "merged_scanner_gen.l"
RETURN(T_FLOAT);
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 432 "merged_scanner_gen.l"
RETURN(T_SINGLE);
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 434 "merged_scanner_gen.l"
RETURN(T_ENDM);
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 436 "merged_scanner_gen.l"
RETURN(T_EQU);
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 437 "merged_scanner_gen.l"
RETURN(T_SET);
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 438 "merged_scanner_gen.l"
RETURN(T_EQUIV);
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 439 "merged_scanner_gen.l"
RETURN(T_EQV);
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 441 "merged_scanner_gen.l"
RETURN(T_ERR);
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 442 "merged_scanner_gen.l"
RETURN(T_ERROR);
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 444 "merged_scanner_gen.l"
RETURN(T_FILE);
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 445 "merged_scanner_gen.l"
RETURN(T_FILL);
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 446 "merged_scanner_gen.l"
RETURN(T_GLOBAL);
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 447 "merged_scanner_gen.l"
RETURN(T_GLOBL);
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 448 "merged_scanner_gen.l"
RETURN(T_IDENT);
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 449 "merged_scanner_gen.l"
RETURN(T_INCBIN);
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 450 "merged_scanner_gen.l"
RETURN(T_LINE);
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 451 "merged_scanner_gen.l"
RETURN(T_LIST);
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 452 "merged_scanner_gen.l"
RETURN(T_LOC);
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 453 "merged_scanner_gen.l"
RETURN(T_LOCAL);
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 454 "merged_scanner_gen.l"
RETURN(T_MACRO);
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 455 "merged_scanner_gen.l"
RETURN(T_NOALTMACRO);
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 456 "merged_scanner_gen.l"
RETURN(T_NOLIST);
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 457 "merged_scanner_gen.l"
RETURN(T_ORG);
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 459 "merged_scanner_gen.l"
RETURN(T_POPSECTION);
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 460 "merged_scanner_gen.l"
RETURN(T_PREVIOUS);
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 461 "merged_scanner_gen.l"
RETURN(T_PROFILER);
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 462 "merged_scanner_gen.l"
RETURN(T_PUSHSECTION);
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 463 "merged_scanner_gen.l"
RETURN(T_SECTION);
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 464 "merged_scanner_gen.l"
RETURN(T_SECTION_ADJUSTABLE);
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 466 "merged_scanner_gen.l"
RETURN(T_ENDIAN_BIG);
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 467 "merged_scanner_gen.l"
RETURN(T_ENDIAN_LITTLE);
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 469 "merged_scanner_gen.l"
RETURN(T_SIZE);
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 470 "merged_scanner_gen.l"
RETURN(T_SKIP);
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 471 "merged_scanner_gen.l"
RETURN(T_SPACE);
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 472 "merged_scanner_gen.l"
RETURN(T_ZERO);
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 473 "merged_scanner_gen.l"
RETURN(T_SLEB128);
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 474 "merged_scanner_gen.l"
RETURN(T_ULEB128);
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 475 "merged_scanner_gen.l"
RETURN(T_TYPE);
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 476 "merged_scanner_gen.l"
RETURN(T_WARNING);
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 477 "merged_scanner_gen.l"
RETURN(T_WEAK);
	YY_BREAK
/* single characters */
case 133:
YY_RULE_SETUP
#line 480 "merged_scanner_gen.l"
RETURN(T_DOT);
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 481 "merged_scanner_gen.l"
RETURN(T_LABEL_DELIM);
	YY_BREAK
/* symbol definition operators */
/*"&="    RETURN(T_AND_ASSIGN);
"+="    RETURN(T_ADD_ASSIGN);
"-="    RETURN(T_SUB_ASSIGN);
"*="    RETURN(T_MUL_ASSIGN);
"/="    RETURN(T_DIV_ASSIGN);*/
case 135:
YY_RULE_SETUP
#line 489 "merged_scanner_gen.l"
RETURN(T_ASSIGN);
	YY_BREAK
/* arithmetic operators */
case 136:
YY_RULE_SETUP
#line 492 "merged_scanner_gen.l"
RETURN(T_OP_NEG);
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 493 "merged_scanner_gen.l"
RETURN(T_OP_BIN_NEG);
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 495 "merged_scanner_gen.l"
RETURN(T_OP_MULT);
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 496 "merged_scanner_gen.l"
RETURN(T_OP_DIV);
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 497 "merged_scanner_gen.l"
RETURN(T_OP_MOD);
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 498 "merged_scanner_gen.l"
RETURN(T_OP_PLUS);
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 499 "merged_scanner_gen.l"
RETURN(T_OP_MINUS);
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 500 "merged_scanner_gen.l"
RETURN(T_OP_LSHIFT);
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 501 "merged_scanner_gen.l"
RETURN(T_OP_RSHIFT);
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 502 "merged_scanner_gen.l"
RETURN(T_OP_BIN_AND);
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 503 "merged_scanner_gen.l"
RETURN(T_OP_BIN_XOR);
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 504 "merged_scanner_gen.l"
RETURN(T_OP_BIN_OR);
	YY_BREAK
case 148:
/* rule 148 can match eol */
YY_RULE_SETUP
#line 506 "merged_scanner_gen.l"
{
#if defined ASM_LEX_ANALYZER
    LogicalFileInfo::IncrementLine();
    yylval.num = yylineno; // line information
#endif
    RETURN(T_NEWLINE);
}
	YY_BREAK
/* some quite general tokens */
/* binary constant */
case 149:
YY_RULE_SETUP
#line 517 "merged_scanner_gen.l"
{
#if defined ASM_LEX_ANALYZER
    yylval.text = new std::string(yytext);
    RETURN(T_BIN_CONST);
#elif defined ASM_INSTR_TOKEN_RECOGNIZER
    RETURN(T_BIN_CONST); /* not allowed collision */
#endif
}
	YY_BREAK
/* octal constant */
case 150:
YY_RULE_SETUP
#line 527 "merged_scanner_gen.l"
{
#if defined ASM_LEX_ANALYZER
    yylval.text = new std::string(yytext);
    RETURN(T_OCT_CONST);
#elif defined ASM_INSTR_TOKEN_RECOGNIZER
    RETURN(T_OCT_CONST); /* not allowed collision */
#endif
}
	YY_BREAK
/* decimal constant */
case 151:
YY_RULE_SETUP
#line 537 "merged_scanner_gen.l"
{
#if defined ASM_LEX_ANALYZER
    yylval.text = new std::string(yytext);
    RETURN(T_DEC_CONST);
#elif defined ASM_INSTR_TOKEN_RECOGNIZER
    RETURN(T_DEC_CONST); /* not allowed collision */
#endif
}
	YY_BREAK
/* hexadecimal constant */
case 152:
YY_RULE_SETUP
#line 547 "merged_scanner_gen.l"
{
#if defined ASM_LEX_ANALYZER
    yylval.text = new std::string(yytext);
    RETURN(T_HEX_CONST);
#elif defined ASM_INSTR_TOKEN_RECOGNIZER
    RETURN(T_HEX_CONST); /* not allowed collision */
#endif
}
	YY_BREAK
/* float constant */
case 153:
YY_RULE_SETUP
#line 557 "merged_scanner_gen.l"
{
#if defined ASM_LEX_ANALYZER
    yylval.text = new std::string(yytext);
    RETURN(T_DOUBLE_CONST);
#elif defined ASM_INSTR_TOKEN_RECOGNIZER
    RETURN(T_DOUBLE_CONST); /* not allowed collision */
#endif
}
	YY_BREAK
/* string literal */
case 154:
/* rule 154 can match eol */
YY_RULE_SETUP
#line 567 "merged_scanner_gen.l"
{
#if defined ASM_LEX_ANALYZER
    yylval.text = new std::string(yytext);
    RETURN(T_STRING);
#elif defined ASM_INSTR_TOKEN_RECOGNIZER
    RETURN(T_TOKEN_ERROR); /* not allowed collision */
#endif
}
	YY_BREAK
/* identifier, local labels start with numbers */
case 155:
YY_RULE_SETUP
#line 577 "merged_scanner_gen.l"
{
#if defined ASM_LEX_ANALYZER
    yylval.text = new std::string(yytext);
    int res = TokenHandlerUnit::MatchIdToken(*yylval.text, T_ID);
    if (res != T_ID)
    {
        delete yylval.text;
        yylval.text = NULL;
    }
    RETURN(res);
#elif defined ASM_INSTR_TOKEN_RECOGNIZER
    // T_ID is not used when generating terminals,
    // but this information is also important for assembler generator
    // (see SymbolNameAssigner::AssignTerminalGenerationNames)
    RETURN(T_ID); 
#endif
}
	YY_BREAK
/* evaluation of macro argument */
case 156:
YY_RULE_SETUP
#line 596 "merged_scanner_gen.l"
{
    yylval.text = new std::string(yytext);
    RETURN(T_MACRO_ARGUMENT_EVALUATOR);
}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(IN_MACRO_CALL):
#line 601 "merged_scanner_gen.l"
{
#if defined ASM_LEX_ANALYZER
    TokenHandlerUnit::AddCurrentToken(TokenInfo::CreateEof());
    yylval.num = -1;
    RETURN(T_NEWLINE);
#elif defined ASM_INSTR_TOKEN_RECOGNIZER
    RETURN(T_UNKNOWN);
#endif
}
	YY_BREAK


case 157:
YY_RULE_SETUP
#line 613 "merged_scanner_gen.l"
RETURN(T_DELIM);
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 615 "merged_scanner_gen.l"
RETURN(T_PAR_LEFT);
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 616 "merged_scanner_gen.l"
RETURN(T_PAR_RIGHT);
	YY_BREAK
/* eat-up whitespace */
case 160:
YY_RULE_SETUP
#line 619 "merged_scanner_gen.l"

	YY_BREAK
case 161:
YY_RULE_SETUP
#line 621 "merged_scanner_gen.l"
{
#if defined ASM_LEX_ANALYZER
    // special handling of windows files on linux
    if (*yytext !=  0xD)
    {
        err::UNEXPECTED_CHARACTER(LogicalFileInfo::GetLocation(true), yytext, *yytext);
    }
#elif defined ASM_INSTR_TOKEN_RECOGNIZER
    RETURN(T_UNKNOWN);
#endif
}
	YY_BREAK

case 162:
YY_RULE_SETUP
#line 635 "merged_scanner_gen.l"
ECHO;
	YY_BREAK
#line 3114 "merged_scanner_gen.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 915 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 915 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 914);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');
	if ( YY_CURRENT_BUFFER_LVALUE->yy_at_bol )
		   
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 635 "merged_scanner_gen.l"






#if defined ASM_LEX_ANALYZER

void WarnNotSupportedDirective(const char* name)
{
#ifdef PRINT_WARNING_ON_NONSUPPORTED_DIRECTIVES
    wrn::UNSUPPORTED_DIRECTIVE(LogicalFileInfo::GetLocation(true), name);
#endif  // PRINT_WARNING_ON_NONSUPPORTED_DIRECTIVES
}

void Ignoring(IgnoreType type)
{
    static bool msg_printed_cfi = false;

    // print just one message for each type
    if (type == IGNORE_CFI && !msg_printed_cfi)
    {
        wrn::IGNORE_DIRECTIVE(LogicalFileInfo::GetLocation(true));
        msg_printed_cfi = true;
    }
}

#elif defined ASM_INSTR_TOKEN_RECOGNIZER

void WarnNotSupportedDirective(const char*)
{}

void Ignoring(IgnoreType)
{}

#endif


 /*-----------------------------------------------------------------------------------------------*/
 /*-----------------------------------------------------------------------------------------------*/
 /*---------------------------------------end of user-modifiable section--------------------------*/
 /*-----------------------------------------------------------------------------------------------*/
 /*-----------------------------------------------------------------------------------------------*/


#if defined ASM_LEX_ANALYZER


// Function that sets scanners input file.
// Must be called beforwe bison generated parser is started by
// yyparse function.
// @param fin Input file, must be opened for reading.
void SetInputFile(FILE* fin)
{
    yyin = fin;
}

int Terminate()
{
    yyterminate();
}

/// overridden yylex function because of concatenated terminal handling
int yylex()
{
    return TokenHandlerUnit::GetCurrentToken();
}


#elif defined ASM_INSTR_TOKEN_RECOGNIZER


// Global variable used as input string, its size and current position.
const char* g_Input;
int g_InputSize;
int g_CurrentPosition;

/**
 *  \brief Is used by macro YY_INPUT. Because we need to know whether whole input string was matched,
 *         function returns only one by one character.
 *         FIXME hack: 2nd argument compatible with flex >= 2.5.36
 *  \param buf is a buffer of size maxSize, is not zero-terminated,
 *             into resultSize is saved number of characters copied into buf
 *  \param resultSize
 *  \param maxSize
 *  \return false, when there is no another text to read.
 */
void GetNextInput(char* buf, yy_size_t* resultSize, int maxSize)
{
    CHECK_NOT_NULL(buf);
    CHECK_NOT_NULL(resultSize);
    CHECK_CONDITION(maxSize >= 1);

    if (g_CurrentPosition != g_InputSize)
    {
        buf[0] = g_Input[g_CurrentPosition];
        *resultSize = 1;
        g_CurrentPosition++;
    }
    else
    {
        *resultSize = YY_NULL;
    }
}

/**
 *  \brief FIXME hack: 2nd argument compatible with flex <= 2.5.35
 */
void GetNextInput(char* buf, int* resultSize, int maxSize)
{
    yy_size_t tempResultSize;
    GetNextInput(buf, &tempResultSize, maxSize);
    *resultSize = tempResultSize;
}

/**
 *  \brief This method is used to recognize input strings, returns token numbers or T_UNKNOWN.
 */
int Recognize(const char* s)
{
    CHECK_NOT_NULL(s);

    // restart our recognizer
    // WARNING: yyrestart() does not reset the start condition to INITIAL
    yyrestart(NULL);

    // set input string and current posision
    g_Input = s;
    g_InputSize = strlen(s);
    g_CurrentPosition = 0;

    // let generated scanner recognize input string
    int res = yylex();

    // string must be matched completely, otherwise it was not recognized
    if (strcmp(yytext, s) == 0)
    {
        return res;
    }
    else
    {
        return T_UNKNOWN;
    }
}


#endif  // ASM_INSTR_TOKEN_RECOGNIZER

