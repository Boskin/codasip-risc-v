version "2.0.0"
processor RISC_V5.ia
endian little

//'reg' name, bit_width, address
reg rf_xpr, 32, 0
reg rf_xpr, 32, 1
reg rf_xpr, 32, 2
reg rf_xpr, 32, 3
reg rf_xpr, 32, 4
reg rf_xpr, 32, 5
reg rf_xpr, 32, 6
reg rf_xpr, 32, 7
reg rf_xpr, 32, 8
reg rf_xpr, 32, 9
reg rf_xpr, 32, 10
reg rf_xpr, 32, 11
reg rf_xpr, 32, 12
reg rf_xpr, 32, 13
reg rf_xpr, 32, 14
reg rf_xpr, 32, 15
reg rf_xpr, 32, 16
reg rf_xpr, 32, 17
reg rf_xpr, 32, 18
reg rf_xpr, 32, 19
reg rf_xpr, 32, 20
reg rf_xpr, 32, 21
reg rf_xpr, 32, 22
reg rf_xpr, 32, 23
reg rf_xpr, 32, 24
reg rf_xpr, 32, 25
reg rf_xpr, 32, 26
reg rf_xpr, 32, 27
reg rf_xpr, 32, 28
reg rf_xpr, 32, 29
reg rf_xpr, 32, 30
reg rf_xpr, 32, 31
//'reg' class_name, resource_name, bit_width, address, aliased_resource_name, aliased_address, aliased_high_bit, aliased_low_bit
//'regop' class_name, resource_name, bit_width, syntax, address
regop xpr, rf_xpr, 32, "x1", 1
regop xpr, rf_xpr, 32, "x2", 2
regop xpr, rf_xpr, 32, "x3", 3
regop xpr, rf_xpr, 32, "x4", 4
regop xpr, rf_xpr, 32, "x5", 5
regop xpr, rf_xpr, 32, "x6", 6
regop xpr, rf_xpr, 32, "x7", 7
regop xpr, rf_xpr, 32, "x8", 8
regop xpr, rf_xpr, 32, "x9", 9
regop xpr, rf_xpr, 32, "x10", 10
regop xpr, rf_xpr, 32, "x11", 11
regop xpr, rf_xpr, 32, "x12", 12
regop xpr, rf_xpr, 32, "x13", 13
regop xpr, rf_xpr, 32, "x14", 14
regop xpr, rf_xpr, 32, "x15", 15
regop xpr, rf_xpr, 32, "x16", 16
regop xpr, rf_xpr, 32, "x17", 17
regop xpr, rf_xpr, 32, "x18", 18
regop xpr, rf_xpr, 32, "x19", 19
regop xpr, rf_xpr, 32, "x20", 20
regop xpr, rf_xpr, 32, "x21", 21
regop xpr, rf_xpr, 32, "x22", 22
regop xpr, rf_xpr, 32, "x23", 23
regop xpr, rf_xpr, 32, "x24", 24
regop xpr, rf_xpr, 32, "x25", 25
regop xpr, rf_xpr, 32, "x26", 26
regop xpr, rf_xpr, 32, "x27", 27
regop xpr, rf_xpr, 32, "x28", 28
regop xpr, rf_xpr, 32, "x29", 29
regop xpr, rf_xpr, 32, "x30", 30
regop xpr, rf_xpr, 32, "x31", 31

pointer_size = 32
function_result = { rf_xpr(10), rf_xpr(11), rf_xpr(12), rf_xpr(13) }
code_byte_size = 8
function_params = { rf_xpr(10), rf_xpr(11), rf_xpr(12), rf_xpr(13), rf_xpr(14), rf_xpr(15), rf_xpr(16), rf_xpr(17) }
unused_registers = { rf_xpr(6), rf_xpr(28) }
stack_pointer(0) = rf_xpr(2)
base_pointer(0) = rf_xpr(8)
return_address = rf_xpr(1)

schedule_class "sc_load" = { latency = 2, delay_slot = 0, allow_in_delay_slot = 1 }

