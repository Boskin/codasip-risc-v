<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN">
<html>
<head>
 <meta http-equiv="content-type" content="text/html;">
 <title>RISC_V5.ia</title>
 <script type="text/javascript" src="CodasipScript.js"></script>
 <script type="text/javascript" src="script.js"></script>
<link rel=stylesheet href="CodasipStyle.css" type="text/css">
</head>

<body>

<h1>RISC_V5.ia instruction set</h1>
<br>

<!-- menu -->
<hr>
<a href="index.htm">SUMMARY</a> |
<a href="itable.htm">INSTRUCTION TABLE</a> |
<a href="semantic.htm">IR SEMANTICS</a>
<hr>

<!--CONTENT-->

<code># 1 "raw_semantics.sem"</code><br>
<code># 1 "<built-in>" 1</code><br>
<code># 1 "<built-in>" 3</code><br>
<code># 318 "<built-in>" 3</code><br>
<code># 1 "<command line>" 1</code><br>
<code># 1 "<built-in>" 2</code><br>
<code># 1 "raw_semantics.sem" 2</code><br>
<code># 0 "compiler.sem"</code><br>
<code></code><br>
<code>version "2.0.0"</code><br>
<code>processor RISC_V5.ia</code><br>
<code>endian little</code><br>
<code></code><br>
<code>//'reg' name, bit_width, address</code><br>
<code>reg rf_xpr, 32, 0</code><br>
<code>reg rf_xpr, 32, 1</code><br>
<code>reg rf_xpr, 32, 2</code><br>
<code>reg rf_xpr, 32, 3</code><br>
<code>reg rf_xpr, 32, 4</code><br>
<code>reg rf_xpr, 32, 5</code><br>
<code>reg rf_xpr, 32, 6</code><br>
<code>reg rf_xpr, 32, 7</code><br>
<code>reg rf_xpr, 32, 8</code><br>
<code>reg rf_xpr, 32, 9</code><br>
<code>reg rf_xpr, 32, 10</code><br>
<code>reg rf_xpr, 32, 11</code><br>
<code>reg rf_xpr, 32, 12</code><br>
<code>reg rf_xpr, 32, 13</code><br>
<code>reg rf_xpr, 32, 14</code><br>
<code>reg rf_xpr, 32, 15</code><br>
<code>reg rf_xpr, 32, 16</code><br>
<code>reg rf_xpr, 32, 17</code><br>
<code>reg rf_xpr, 32, 18</code><br>
<code>reg rf_xpr, 32, 19</code><br>
<code>reg rf_xpr, 32, 20</code><br>
<code>reg rf_xpr, 32, 21</code><br>
<code>reg rf_xpr, 32, 22</code><br>
<code>reg rf_xpr, 32, 23</code><br>
<code>reg rf_xpr, 32, 24</code><br>
<code>reg rf_xpr, 32, 25</code><br>
<code>reg rf_xpr, 32, 26</code><br>
<code>reg rf_xpr, 32, 27</code><br>
<code>reg rf_xpr, 32, 28</code><br>
<code>reg rf_xpr, 32, 29</code><br>
<code>reg rf_xpr, 32, 30</code><br>
<code>reg rf_xpr, 32, 31</code><br>
<code>//'reg' class_name, resource_name, bit_width, address, aliased_resource_name, aliased_address, aliased_high_bit, aliased_low_bit</code><br>
<code>//'regop' class_name, resource_name, bit_width, syntax, address</code><br>
<code>regop xpr, rf_xpr, 32, "x1", 1</code><br>
<code>regop xpr, rf_xpr, 32, "x2", 2</code><br>
<code>regop xpr, rf_xpr, 32, "x3", 3</code><br>
<code>regop xpr, rf_xpr, 32, "x4", 4</code><br>
<code>regop xpr, rf_xpr, 32, "x5", 5</code><br>
<code>regop xpr, rf_xpr, 32, "x6", 6</code><br>
<code>regop xpr, rf_xpr, 32, "x7", 7</code><br>
<code>regop xpr, rf_xpr, 32, "x8", 8</code><br>
<code>regop xpr, rf_xpr, 32, "x9", 9</code><br>
<code>regop xpr, rf_xpr, 32, "x10", 10</code><br>
<code>regop xpr, rf_xpr, 32, "x11", 11</code><br>
<code>regop xpr, rf_xpr, 32, "x12", 12</code><br>
<code>regop xpr, rf_xpr, 32, "x13", 13</code><br>
<code>regop xpr, rf_xpr, 32, "x14", 14</code><br>
<code>regop xpr, rf_xpr, 32, "x15", 15</code><br>
<code>regop xpr, rf_xpr, 32, "x16", 16</code><br>
<code>regop xpr, rf_xpr, 32, "x17", 17</code><br>
<code>regop xpr, rf_xpr, 32, "x18", 18</code><br>
<code>regop xpr, rf_xpr, 32, "x19", 19</code><br>
<code>regop xpr, rf_xpr, 32, "x20", 20</code><br>
<code>regop xpr, rf_xpr, 32, "x21", 21</code><br>
<code>regop xpr, rf_xpr, 32, "x22", 22</code><br>
<code>regop xpr, rf_xpr, 32, "x23", 23</code><br>
<code>regop xpr, rf_xpr, 32, "x24", 24</code><br>
<code>regop xpr, rf_xpr, 32, "x25", 25</code><br>
<code>regop xpr, rf_xpr, 32, "x26", 26</code><br>
<code>regop xpr, rf_xpr, 32, "x27", 27</code><br>
<code>regop xpr, rf_xpr, 32, "x28", 28</code><br>
<code>regop xpr, rf_xpr, 32, "x29", 29</code><br>
<code>regop xpr, rf_xpr, 32, "x30", 30</code><br>
<code>regop xpr, rf_xpr, 32, "x31", 31</code><br>
<code></code><br>
<code>pointer_size = 32</code><br>
<code>function_result = { rf_xpr(10), rf_xpr(11), rf_xpr(12), rf_xpr(13) }</code><br>
<code>code_byte_size = 8</code><br>
<code>function_params = { rf_xpr(10), rf_xpr(11), rf_xpr(12), rf_xpr(13), rf_xpr(14), rf_xpr(15), rf_xpr(16), rf_xpr(17) }</code><br>
<code>unused_registers = { rf_xpr(6), rf_xpr(28) }</code><br>
<code>stack_pointer(0) = rf_xpr(2)</code><br>
<code>base_pointer(0) = rf_xpr(8)</code><br>
<code id=i_nop_alias__>return_address = rf_xpr(1)</code><br>
<code></code><br>
<code>schedule_class "sc_load" = { latency = 2, delay_slot = 0, allow_in_delay_slot = 1 }</code><br>
<code></code><br>
<code>// </code><br>
<code></code><br>
<code>//+++ Created by LLC-extractor +++</code><br>
<code></code><br>
<code>// i_nop_alias</code><br>
<code>instr i_nop_alias__, ok (0),</code><br>
<code>{ },</code><br>
<code>nop();</code><br>
<code>,</code><br>
<code id=i_halt__opc_halt__>"nop",</code><br>
<code>0b00000000000000000000000000010011 ,</code><br>
<code>"",</code><br>
<code>"el:i_nop_alias",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_halt(opc = opc_halt)</code><br>
<code>instr i_halt__opc_halt__, extractor_removed,</code><br>
<code>{ },</code><br>
<code>,</code><br>
<code id=i_syscall__opc_syscall__>"halt",</code><br>
<code>0b00000000000000000000000000111111 ,</code><br>
<code>"Instruction contains a call to codasip_halt() that is used only for simulator generation. Instruction removed in extractor pass 'Preparing for LLC extractor'.",</code><br>
<code>"el:i_halt(el:opc_halt)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_syscall(opc = opc_syscall)</code><br>
<code>instr i_syscall__opc_syscall__, extractor_removed,</code><br>
<code>{ },</code><br>
<code>,</code><br>
<code id=i_alu__opc_add__x_0__x_0__x_0__>"syscall",</code><br>
<code>0b00000000011000000000000001011111 ,</code><br>
<code>"Instruction contains a call to codasip_syscall() that is used only for simulator generation. Instruction removed in extractor pass 'Preparing for LLC extractor'.",</code><br>
<code>"el:i_syscall(el:opc_syscall)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_alu(opc = opc_add, xpr_rd = x_0, xpr_rs1 = x_0, xpr_rs2 = x_0)</code><br>
<code>instr i_alu__opc_add__x_0__x_0__x_0__, ok (0),</code><br>
<code>{ },</code><br>
<code>,</code><br>
<code id=i_alu__opc_add__x_0__x_0__xpr__>"add" "x0"~"," "x0"~"," "x0",</code><br>
<code>0b00000000000000000000000000110011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu(el:opc_add, el:x_0, el:x_0, el:x_0)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_alu(opc = opc_add, xpr_rd = x_0, xpr_rs1 = x_0, xpr_rs2 = xpr)</code><br>
<code>instr i_alu__opc_add__x_0__x_0__xpr__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr) },</code><br>
<code>,</code><br>
<code id=i_alu__opc_add__x_0__xpr__x_0__>"add" "x0"~"," "x0"~"," xpr_0,</code><br>
<code>0b0000000 xpr_0[4,0] 0b00000000000000110011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu(el:opc_add, el:x_0, el:x_0, el:xpr)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_alu(opc = opc_add, xpr_rd = x_0, xpr_rs1 = xpr, xpr_rs2 = x_0)</code><br>
<code>instr i_alu__opc_add__x_0__xpr__x_0__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr) },</code><br>
<code>,</code><br>
<code id=i_alu__opc_add__x_0__xpr__xpr__>"add" "x0"~"," xpr_0~"," "x0",</code><br>
<code>0b000000000000 xpr_0[4,0] 0b000000000110011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu(el:opc_add, el:x_0, el:xpr, el:x_0)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_alu(opc = opc_add, xpr_rd = x_0, xpr_rs1 = xpr, xpr_rs2 = xpr)</code><br>
<code>instr i_alu__opc_add__x_0__xpr__xpr__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), xpr_1 = regop(xpr) },</code><br>
<code>,</code><br>
<code id=i_alu__opc_add__xpr__x_0__x_0__>"add" "x0"~"," xpr_0~"," xpr_1,</code><br>
<code>0b0000000 xpr_1[4,0] xpr_0[4,0] 0b000000000110011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu(el:opc_add, el:x_0, el:xpr, el:xpr)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_alu(opc = opc_add, xpr_rd = xpr, xpr_rs1 = x_0, xpr_rs2 = x_0)</code><br>
<code>instr i_alu__opc_add__xpr__x_0__x_0__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr) },</code><br>
<code>%4 = i32 0;</code><br>
<code>%5 = i1 -1;</code><br>
<code>regop(xpr_0) = %4;</code><br>
<code>,</code><br>
<code id=i_alu__opc_add__xpr__x_0__xpr__>"add" xpr_0~"," "x0"~"," "x0",</code><br>
<code>0b00000000000000000000 xpr_0[4,0] 0b0110011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu(el:opc_add, el:xpr, el:x_0, el:x_0)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_alu(opc = opc_add, xpr_rd = xpr, xpr_rs1 = x_0, xpr_rs2 = xpr)</code><br>
<code>instr i_alu__opc_add__xpr__x_0__xpr__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), xpr_1 = regop(xpr) },</code><br>
<code>%4 = i32 regop(xpr_1);</code><br>
<code>%5 = i1 -1;</code><br>
<code>regop(xpr_0) = %4;</code><br>
<code>,</code><br>
<code id=i_alu__opc_add__xpr__xpr__x_0__>"add" xpr_0~"," "x0"~"," xpr_1,</code><br>
<code>0b0000000 xpr_1[4,0] 0b00000000 xpr_0[4,0] 0b0110011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu(el:opc_add, el:xpr, el:x_0, el:xpr)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_alu(opc = opc_add, xpr_rd = xpr, xpr_rs1 = xpr, xpr_rs2 = x_0)</code><br>
<code>instr i_alu__opc_add__xpr__xpr__x_0__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), xpr_1 = regop(xpr) },</code><br>
<code>%4 = i32 regop(xpr_1);</code><br>
<code>%5 = i1 -1;</code><br>
<code>regop(xpr_0) = %4;</code><br>
<code>,</code><br>
<code id=i_alu__opc_add__xpr__xpr__xpr__>"add" xpr_0~"," xpr_1~"," "x0",</code><br>
<code>0b000000000000 xpr_1[4,0] 0b000 xpr_0[4,0] 0b0110011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu(el:opc_add, el:xpr, el:xpr, el:x_0)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_alu(opc = opc_add, xpr_rd = xpr, xpr_rs1 = xpr, xpr_rs2 = xpr)</code><br>
<code>instr i_alu__opc_add__xpr__xpr__xpr__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), xpr_1 = regop(xpr), xpr_2 = regop(xpr) },</code><br>
<code>%5 = i32 regop(xpr_2);</code><br>
<code>%6 = i32 regop(xpr_1);</code><br>
<code>%4 = add(%5,%6);</code><br>
<code>%7 = i1 -1;</code><br>
<code>regop(xpr_0) = %4;</code><br>
<code>,</code><br>
<code id=i_alu__opc_slt__x_0__x_0__x_0__>"add" xpr_0~"," xpr_1~"," xpr_2,</code><br>
<code>0b0000000 xpr_2[4,0] xpr_1[4,0] 0b000 xpr_0[4,0] 0b0110011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu(el:opc_add, el:xpr, el:xpr, el:xpr)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_alu(opc = opc_slt, xpr_rd = x_0, xpr_rs1 = x_0, xpr_rs2 = x_0)</code><br>
<code>instr i_alu__opc_slt__x_0__x_0__x_0__, ok (0),</code><br>
<code>{ },</code><br>
<code>,</code><br>
<code id=i_alu__opc_slt__x_0__x_0__xpr__>"slt" "x0"~"," "x0"~"," "x0",</code><br>
<code>0b00000000000000000010000000110011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu(el:opc_slt, el:x_0, el:x_0, el:x_0)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_alu(opc = opc_slt, xpr_rd = x_0, xpr_rs1 = x_0, xpr_rs2 = xpr)</code><br>
<code>instr i_alu__opc_slt__x_0__x_0__xpr__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr) },</code><br>
<code>,</code><br>
<code id=i_alu__opc_slt__x_0__xpr__x_0__>"slt" "x0"~"," "x0"~"," xpr_0,</code><br>
<code>0b0000000 xpr_0[4,0] 0b00000010000000110011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu(el:opc_slt, el:x_0, el:x_0, el:xpr)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_alu(opc = opc_slt, xpr_rd = x_0, xpr_rs1 = xpr, xpr_rs2 = x_0)</code><br>
<code>instr i_alu__opc_slt__x_0__xpr__x_0__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr) },</code><br>
<code>,</code><br>
<code id=i_alu__opc_slt__x_0__xpr__xpr__>"slt" "x0"~"," xpr_0~"," "x0",</code><br>
<code>0b000000000000 xpr_0[4,0] 0b010000000110011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu(el:opc_slt, el:x_0, el:xpr, el:x_0)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_alu(opc = opc_slt, xpr_rd = x_0, xpr_rs1 = xpr, xpr_rs2 = xpr)</code><br>
<code>instr i_alu__opc_slt__x_0__xpr__xpr__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), xpr_1 = regop(xpr) },</code><br>
<code>,</code><br>
<code id=i_alu__opc_slt__xpr__x_0__x_0__>"slt" "x0"~"," xpr_0~"," xpr_1,</code><br>
<code>0b0000000 xpr_1[4,0] xpr_0[4,0] 0b010000000110011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu(el:opc_slt, el:x_0, el:xpr, el:xpr)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_alu(opc = opc_slt, xpr_rd = xpr, xpr_rs1 = x_0, xpr_rs2 = x_0)</code><br>
<code>instr i_alu__opc_slt__xpr__x_0__x_0__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr) },</code><br>
<code>%4 = i32 0;</code><br>
<code>%5 = i1 -1;</code><br>
<code>regop(xpr_0) = %4;</code><br>
<code>,</code><br>
<code id=i_alu__opc_slt__xpr__x_0__xpr__>"slt" xpr_0~"," "x0"~"," "x0",</code><br>
<code>0b00000000000000000010 xpr_0[4,0] 0b0110011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu(el:opc_slt, el:xpr, el:x_0, el:x_0)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_alu(opc = opc_slt, xpr_rd = xpr, xpr_rs1 = x_0, xpr_rs2 = xpr)</code><br>
<code>instr i_alu__opc_slt__xpr__x_0__xpr__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), xpr_1 = regop(xpr) },</code><br>
<code>%6 = i32 regop(xpr_1);</code><br>
<code>%7 = i32 0;</code><br>
<code>%5 = setgt(%6,%7);</code><br>
<code>%4 = i32 zero_extend(%5);</code><br>
<code>%8 = i1 -1;</code><br>
<code>regop(xpr_0) = %4;</code><br>
<code>,</code><br>
<code id=i_alu__opc_slt__xpr__xpr__x_0__>"slt" xpr_0~"," "x0"~"," xpr_1,</code><br>
<code>0b0000000 xpr_1[4,0] 0b00000010 xpr_0[4,0] 0b0110011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu(el:opc_slt, el:xpr, el:x_0, el:xpr)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_alu(opc = opc_slt, xpr_rd = xpr, xpr_rs1 = xpr, xpr_rs2 = x_0)</code><br>
<code>instr i_alu__opc_slt__xpr__xpr__x_0__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), xpr_1 = regop(xpr) },</code><br>
<code>%5 = i32 regop(xpr_1);</code><br>
<code>%6 = i32 31;</code><br>
<code>%4 = srl(%5,%6);</code><br>
<code>%7 = i1 -1;</code><br>
<code>regop(xpr_0) = %4;</code><br>
<code>,</code><br>
<code id=i_alu__opc_slt__xpr__xpr__xpr__>"slt" xpr_0~"," xpr_1~"," "x0",</code><br>
<code>0b000000000000 xpr_1[4,0] 0b010 xpr_0[4,0] 0b0110011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu(el:opc_slt, el:xpr, el:xpr, el:x_0)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_alu(opc = opc_slt, xpr_rd = xpr, xpr_rs1 = xpr, xpr_rs2 = xpr)</code><br>
<code>instr i_alu__opc_slt__xpr__xpr__xpr__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), xpr_1 = regop(xpr), xpr_2 = regop(xpr) },</code><br>
<code>%6 = i32 regop(xpr_1);</code><br>
<code>%7 = i32 regop(xpr_2);</code><br>
<code>%5 = setlt(%6,%7);</code><br>
<code>%4 = i32 zero_extend(%5);</code><br>
<code>%8 = i1 -1;</code><br>
<code>regop(xpr_0) = %4;</code><br>
<code>,</code><br>
<code id=i_alu__opc_sltu__x_0__x_0__x_0__>"slt" xpr_0~"," xpr_1~"," xpr_2,</code><br>
<code>0b0000000 xpr_2[4,0] xpr_1[4,0] 0b010 xpr_0[4,0] 0b0110011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu(el:opc_slt, el:xpr, el:xpr, el:xpr)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_alu(opc = opc_sltu, xpr_rd = x_0, xpr_rs1 = x_0, xpr_rs2 = x_0)</code><br>
<code>instr i_alu__opc_sltu__x_0__x_0__x_0__, ok (0),</code><br>
<code>{ },</code><br>
<code>,</code><br>
<code id=i_alu__opc_sltu__x_0__x_0__xpr__>"sltu" "x0"~"," "x0"~"," "x0",</code><br>
<code>0b00000000000000000011000000110011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu(el:opc_sltu, el:x_0, el:x_0, el:x_0)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_alu(opc = opc_sltu, xpr_rd = x_0, xpr_rs1 = x_0, xpr_rs2 = xpr)</code><br>
<code>instr i_alu__opc_sltu__x_0__x_0__xpr__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr) },</code><br>
<code>,</code><br>
<code id=i_alu__opc_sltu__x_0__xpr__x_0__>"sltu" "x0"~"," "x0"~"," xpr_0,</code><br>
<code>0b0000000 xpr_0[4,0] 0b00000011000000110011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu(el:opc_sltu, el:x_0, el:x_0, el:xpr)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_alu(opc = opc_sltu, xpr_rd = x_0, xpr_rs1 = xpr, xpr_rs2 = x_0)</code><br>
<code>instr i_alu__opc_sltu__x_0__xpr__x_0__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr) },</code><br>
<code>,</code><br>
<code id=i_alu__opc_sltu__x_0__xpr__xpr__>"sltu" "x0"~"," xpr_0~"," "x0",</code><br>
<code>0b000000000000 xpr_0[4,0] 0b011000000110011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu(el:opc_sltu, el:x_0, el:xpr, el:x_0)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_alu(opc = opc_sltu, xpr_rd = x_0, xpr_rs1 = xpr, xpr_rs2 = xpr)</code><br>
<code>instr i_alu__opc_sltu__x_0__xpr__xpr__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), xpr_1 = regop(xpr) },</code><br>
<code>,</code><br>
<code id=i_alu__opc_sltu__xpr__x_0__x_0__>"sltu" "x0"~"," xpr_0~"," xpr_1,</code><br>
<code>0b0000000 xpr_1[4,0] xpr_0[4,0] 0b011000000110011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu(el:opc_sltu, el:x_0, el:xpr, el:xpr)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_alu(opc = opc_sltu, xpr_rd = xpr, xpr_rs1 = x_0, xpr_rs2 = x_0)</code><br>
<code>instr i_alu__opc_sltu__xpr__x_0__x_0__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr) },</code><br>
<code>%4 = i32 0;</code><br>
<code>%5 = i1 -1;</code><br>
<code>regop(xpr_0) = %4;</code><br>
<code>,</code><br>
<code id=i_alu__opc_sltu__xpr__x_0__xpr__>"sltu" xpr_0~"," "x0"~"," "x0",</code><br>
<code>0b00000000000000000011 xpr_0[4,0] 0b0110011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu(el:opc_sltu, el:xpr, el:x_0, el:x_0)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_alu(opc = opc_sltu, xpr_rd = xpr, xpr_rs1 = x_0, xpr_rs2 = xpr)</code><br>
<code>instr i_alu__opc_sltu__xpr__x_0__xpr__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), xpr_1 = regop(xpr) },</code><br>
<code>%6 = i32 regop(xpr_1);</code><br>
<code>%7 = i32 0;</code><br>
<code>%5 = setne(%6,%7);</code><br>
<code>%4 = i32 zero_extend(%5);</code><br>
<code>%8 = i1 -1;</code><br>
<code>regop(xpr_0) = %4;</code><br>
<code>,</code><br>
<code id=i_alu__opc_sltu__xpr__xpr__x_0__>"sltu" xpr_0~"," "x0"~"," xpr_1,</code><br>
<code>0b0000000 xpr_1[4,0] 0b00000011 xpr_0[4,0] 0b0110011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu(el:opc_sltu, el:xpr, el:x_0, el:xpr)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_alu(opc = opc_sltu, xpr_rd = xpr, xpr_rs1 = xpr, xpr_rs2 = x_0)</code><br>
<code>instr i_alu__opc_sltu__xpr__xpr__x_0__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), xpr_1 = regop(xpr) },</code><br>
<code>%4 = i32 0;</code><br>
<code>%5 = i1 -1;</code><br>
<code>regop(xpr_0) = %4;</code><br>
<code>,</code><br>
<code id=i_alu__opc_sltu__xpr__xpr__xpr__>"sltu" xpr_0~"," xpr_1~"," "x0",</code><br>
<code>0b000000000000 xpr_1[4,0] 0b011 xpr_0[4,0] 0b0110011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu(el:opc_sltu, el:xpr, el:xpr, el:x_0)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_alu(opc = opc_sltu, xpr_rd = xpr, xpr_rs1 = xpr, xpr_rs2 = xpr)</code><br>
<code>instr i_alu__opc_sltu__xpr__xpr__xpr__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), xpr_1 = regop(xpr), xpr_2 = regop(xpr) },</code><br>
<code>%6 = i32 regop(xpr_1);</code><br>
<code>%7 = i32 regop(xpr_2);</code><br>
<code>%5 = setult(%6,%7);</code><br>
<code>%4 = i32 zero_extend(%5);</code><br>
<code>%8 = i1 -1;</code><br>
<code>regop(xpr_0) = %4;</code><br>
<code>,</code><br>
<code id=i_alu__opc_and__x_0__x_0__x_0__>"sltu" xpr_0~"," xpr_1~"," xpr_2,</code><br>
<code>0b0000000 xpr_2[4,0] xpr_1[4,0] 0b011 xpr_0[4,0] 0b0110011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu(el:opc_sltu, el:xpr, el:xpr, el:xpr)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_alu(opc = opc_and, xpr_rd = x_0, xpr_rs1 = x_0, xpr_rs2 = x_0)</code><br>
<code>instr i_alu__opc_and__x_0__x_0__x_0__, ok (0),</code><br>
<code>{ },</code><br>
<code>,</code><br>
<code id=i_alu__opc_and__x_0__x_0__xpr__>"and" "x0"~"," "x0"~"," "x0",</code><br>
<code>0b00000000000000000111000000110011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu(el:opc_and, el:x_0, el:x_0, el:x_0)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_alu(opc = opc_and, xpr_rd = x_0, xpr_rs1 = x_0, xpr_rs2 = xpr)</code><br>
<code>instr i_alu__opc_and__x_0__x_0__xpr__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr) },</code><br>
<code>,</code><br>
<code id=i_alu__opc_and__x_0__xpr__x_0__>"and" "x0"~"," "x0"~"," xpr_0,</code><br>
<code>0b0000000 xpr_0[4,0] 0b00000111000000110011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu(el:opc_and, el:x_0, el:x_0, el:xpr)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_alu(opc = opc_and, xpr_rd = x_0, xpr_rs1 = xpr, xpr_rs2 = x_0)</code><br>
<code>instr i_alu__opc_and__x_0__xpr__x_0__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr) },</code><br>
<code>,</code><br>
<code id=i_alu__opc_and__x_0__xpr__xpr__>"and" "x0"~"," xpr_0~"," "x0",</code><br>
<code>0b000000000000 xpr_0[4,0] 0b111000000110011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu(el:opc_and, el:x_0, el:xpr, el:x_0)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_alu(opc = opc_and, xpr_rd = x_0, xpr_rs1 = xpr, xpr_rs2 = xpr)</code><br>
<code>instr i_alu__opc_and__x_0__xpr__xpr__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), xpr_1 = regop(xpr) },</code><br>
<code>,</code><br>
<code id=i_alu__opc_and__xpr__x_0__x_0__>"and" "x0"~"," xpr_0~"," xpr_1,</code><br>
<code>0b0000000 xpr_1[4,0] xpr_0[4,0] 0b111000000110011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu(el:opc_and, el:x_0, el:xpr, el:xpr)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_alu(opc = opc_and, xpr_rd = xpr, xpr_rs1 = x_0, xpr_rs2 = x_0)</code><br>
<code>instr i_alu__opc_and__xpr__x_0__x_0__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr) },</code><br>
<code>%4 = i32 0;</code><br>
<code>%5 = i1 -1;</code><br>
<code>regop(xpr_0) = %4;</code><br>
<code>,</code><br>
<code id=i_alu__opc_and__xpr__x_0__xpr__>"and" xpr_0~"," "x0"~"," "x0",</code><br>
<code>0b00000000000000000111 xpr_0[4,0] 0b0110011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu(el:opc_and, el:xpr, el:x_0, el:x_0)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_alu(opc = opc_and, xpr_rd = xpr, xpr_rs1 = x_0, xpr_rs2 = xpr)</code><br>
<code>instr i_alu__opc_and__xpr__x_0__xpr__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), xpr_1 = regop(xpr) },</code><br>
<code>%4 = i32 0;</code><br>
<code>%5 = i1 -1;</code><br>
<code>regop(xpr_0) = %4;</code><br>
<code>,</code><br>
<code id=i_alu__opc_and__xpr__xpr__x_0__>"and" xpr_0~"," "x0"~"," xpr_1,</code><br>
<code>0b0000000 xpr_1[4,0] 0b00000111 xpr_0[4,0] 0b0110011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu(el:opc_and, el:xpr, el:x_0, el:xpr)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_alu(opc = opc_and, xpr_rd = xpr, xpr_rs1 = xpr, xpr_rs2 = x_0)</code><br>
<code>instr i_alu__opc_and__xpr__xpr__x_0__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), xpr_1 = regop(xpr) },</code><br>
<code>%4 = i32 0;</code><br>
<code>%5 = i1 -1;</code><br>
<code>regop(xpr_0) = %4;</code><br>
<code>,</code><br>
<code id=i_alu__opc_and__xpr__xpr__xpr__>"and" xpr_0~"," xpr_1~"," "x0",</code><br>
<code>0b000000000000 xpr_1[4,0] 0b111 xpr_0[4,0] 0b0110011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu(el:opc_and, el:xpr, el:xpr, el:x_0)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_alu(opc = opc_and, xpr_rd = xpr, xpr_rs1 = xpr, xpr_rs2 = xpr)</code><br>
<code>instr i_alu__opc_and__xpr__xpr__xpr__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), xpr_1 = regop(xpr), xpr_2 = regop(xpr) },</code><br>
<code>%5 = i32 regop(xpr_2);</code><br>
<code>%6 = i32 regop(xpr_1);</code><br>
<code>%4 = and(%5,%6);</code><br>
<code>%7 = i1 -1;</code><br>
<code>regop(xpr_0) = %4;</code><br>
<code>,</code><br>
<code id=i_alu__opc_or__x_0__x_0__x_0__>"and" xpr_0~"," xpr_1~"," xpr_2,</code><br>
<code>0b0000000 xpr_2[4,0] xpr_1[4,0] 0b111 xpr_0[4,0] 0b0110011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu(el:opc_and, el:xpr, el:xpr, el:xpr)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_alu(opc = opc_or, xpr_rd = x_0, xpr_rs1 = x_0, xpr_rs2 = x_0)</code><br>
<code>instr i_alu__opc_or__x_0__x_0__x_0__, ok (0),</code><br>
<code>{ },</code><br>
<code>,</code><br>
<code id=i_alu__opc_or__x_0__x_0__xpr__>"or" "x0"~"," "x0"~"," "x0",</code><br>
<code>0b00000000000000000110000000110011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu(el:opc_or, el:x_0, el:x_0, el:x_0)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_alu(opc = opc_or, xpr_rd = x_0, xpr_rs1 = x_0, xpr_rs2 = xpr)</code><br>
<code>instr i_alu__opc_or__x_0__x_0__xpr__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr) },</code><br>
<code>,</code><br>
<code id=i_alu__opc_or__x_0__xpr__x_0__>"or" "x0"~"," "x0"~"," xpr_0,</code><br>
<code>0b0000000 xpr_0[4,0] 0b00000110000000110011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu(el:opc_or, el:x_0, el:x_0, el:xpr)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_alu(opc = opc_or, xpr_rd = x_0, xpr_rs1 = xpr, xpr_rs2 = x_0)</code><br>
<code>instr i_alu__opc_or__x_0__xpr__x_0__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr) },</code><br>
<code>,</code><br>
<code id=i_alu__opc_or__x_0__xpr__xpr__>"or" "x0"~"," xpr_0~"," "x0",</code><br>
<code>0b000000000000 xpr_0[4,0] 0b110000000110011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu(el:opc_or, el:x_0, el:xpr, el:x_0)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_alu(opc = opc_or, xpr_rd = x_0, xpr_rs1 = xpr, xpr_rs2 = xpr)</code><br>
<code>instr i_alu__opc_or__x_0__xpr__xpr__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), xpr_1 = regop(xpr) },</code><br>
<code>,</code><br>
<code id=i_alu__opc_or__xpr__x_0__x_0__>"or" "x0"~"," xpr_0~"," xpr_1,</code><br>
<code>0b0000000 xpr_1[4,0] xpr_0[4,0] 0b110000000110011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu(el:opc_or, el:x_0, el:xpr, el:xpr)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_alu(opc = opc_or, xpr_rd = xpr, xpr_rs1 = x_0, xpr_rs2 = x_0)</code><br>
<code>instr i_alu__opc_or__xpr__x_0__x_0__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr) },</code><br>
<code>%4 = i32 0;</code><br>
<code>%5 = i1 -1;</code><br>
<code>regop(xpr_0) = %4;</code><br>
<code>,</code><br>
<code id=i_alu__opc_or__xpr__x_0__xpr__>"or" xpr_0~"," "x0"~"," "x0",</code><br>
<code>0b00000000000000000110 xpr_0[4,0] 0b0110011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu(el:opc_or, el:xpr, el:x_0, el:x_0)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_alu(opc = opc_or, xpr_rd = xpr, xpr_rs1 = x_0, xpr_rs2 = xpr)</code><br>
<code>instr i_alu__opc_or__xpr__x_0__xpr__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), xpr_1 = regop(xpr) },</code><br>
<code>%4 = i32 regop(xpr_1);</code><br>
<code>%5 = i1 -1;</code><br>
<code>regop(xpr_0) = %4;</code><br>
<code>,</code><br>
<code id=i_alu__opc_or__xpr__xpr__x_0__>"or" xpr_0~"," "x0"~"," xpr_1,</code><br>
<code>0b0000000 xpr_1[4,0] 0b00000110 xpr_0[4,0] 0b0110011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu(el:opc_or, el:xpr, el:x_0, el:xpr)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_alu(opc = opc_or, xpr_rd = xpr, xpr_rs1 = xpr, xpr_rs2 = x_0)</code><br>
<code>instr i_alu__opc_or__xpr__xpr__x_0__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), xpr_1 = regop(xpr) },</code><br>
<code>%4 = i32 regop(xpr_1);</code><br>
<code>%5 = i1 -1;</code><br>
<code>regop(xpr_0) = %4;</code><br>
<code>,</code><br>
<code id=i_alu__opc_or__xpr__xpr__xpr__>"or" xpr_0~"," xpr_1~"," "x0",</code><br>
<code>0b000000000000 xpr_1[4,0] 0b110 xpr_0[4,0] 0b0110011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu(el:opc_or, el:xpr, el:xpr, el:x_0)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_alu(opc = opc_or, xpr_rd = xpr, xpr_rs1 = xpr, xpr_rs2 = xpr)</code><br>
<code>instr i_alu__opc_or__xpr__xpr__xpr__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), xpr_1 = regop(xpr), xpr_2 = regop(xpr) },</code><br>
<code>%5 = i32 regop(xpr_2);</code><br>
<code>%6 = i32 regop(xpr_1);</code><br>
<code>%4 = or(%5,%6);</code><br>
<code>%7 = i1 -1;</code><br>
<code>regop(xpr_0) = %4;</code><br>
<code>,</code><br>
<code id=i_alu__opc_xor__x_0__x_0__x_0__>"or" xpr_0~"," xpr_1~"," xpr_2,</code><br>
<code>0b0000000 xpr_2[4,0] xpr_1[4,0] 0b110 xpr_0[4,0] 0b0110011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu(el:opc_or, el:xpr, el:xpr, el:xpr)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_alu(opc = opc_xor, xpr_rd = x_0, xpr_rs1 = x_0, xpr_rs2 = x_0)</code><br>
<code>instr i_alu__opc_xor__x_0__x_0__x_0__, ok (0),</code><br>
<code>{ },</code><br>
<code>,</code><br>
<code id=i_alu__opc_xor__x_0__x_0__xpr__>"xor" "x0"~"," "x0"~"," "x0",</code><br>
<code>0b00000000000000000100000000110011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu(el:opc_xor, el:x_0, el:x_0, el:x_0)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_alu(opc = opc_xor, xpr_rd = x_0, xpr_rs1 = x_0, xpr_rs2 = xpr)</code><br>
<code>instr i_alu__opc_xor__x_0__x_0__xpr__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr) },</code><br>
<code>,</code><br>
<code id=i_alu__opc_xor__x_0__xpr__x_0__>"xor" "x0"~"," "x0"~"," xpr_0,</code><br>
<code>0b0000000 xpr_0[4,0] 0b00000100000000110011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu(el:opc_xor, el:x_0, el:x_0, el:xpr)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_alu(opc = opc_xor, xpr_rd = x_0, xpr_rs1 = xpr, xpr_rs2 = x_0)</code><br>
<code>instr i_alu__opc_xor__x_0__xpr__x_0__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr) },</code><br>
<code>,</code><br>
<code id=i_alu__opc_xor__x_0__xpr__xpr__>"xor" "x0"~"," xpr_0~"," "x0",</code><br>
<code>0b000000000000 xpr_0[4,0] 0b100000000110011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu(el:opc_xor, el:x_0, el:xpr, el:x_0)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_alu(opc = opc_xor, xpr_rd = x_0, xpr_rs1 = xpr, xpr_rs2 = xpr)</code><br>
<code>instr i_alu__opc_xor__x_0__xpr__xpr__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), xpr_1 = regop(xpr) },</code><br>
<code>,</code><br>
<code id=i_alu__opc_xor__xpr__x_0__x_0__>"xor" "x0"~"," xpr_0~"," xpr_1,</code><br>
<code>0b0000000 xpr_1[4,0] xpr_0[4,0] 0b100000000110011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu(el:opc_xor, el:x_0, el:xpr, el:xpr)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_alu(opc = opc_xor, xpr_rd = xpr, xpr_rs1 = x_0, xpr_rs2 = x_0)</code><br>
<code>instr i_alu__opc_xor__xpr__x_0__x_0__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr) },</code><br>
<code>%4 = i32 0;</code><br>
<code>%5 = i1 -1;</code><br>
<code>regop(xpr_0) = %4;</code><br>
<code>,</code><br>
<code id=i_alu__opc_xor__xpr__x_0__xpr__>"xor" xpr_0~"," "x0"~"," "x0",</code><br>
<code>0b00000000000000000100 xpr_0[4,0] 0b0110011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu(el:opc_xor, el:xpr, el:x_0, el:x_0)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_alu(opc = opc_xor, xpr_rd = xpr, xpr_rs1 = x_0, xpr_rs2 = xpr)</code><br>
<code>instr i_alu__opc_xor__xpr__x_0__xpr__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), xpr_1 = regop(xpr) },</code><br>
<code>%4 = i32 regop(xpr_1);</code><br>
<code>%5 = i1 -1;</code><br>
<code>regop(xpr_0) = %4;</code><br>
<code>,</code><br>
<code id=i_alu__opc_xor__xpr__xpr__x_0__>"xor" xpr_0~"," "x0"~"," xpr_1,</code><br>
<code>0b0000000 xpr_1[4,0] 0b00000100 xpr_0[4,0] 0b0110011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu(el:opc_xor, el:xpr, el:x_0, el:xpr)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_alu(opc = opc_xor, xpr_rd = xpr, xpr_rs1 = xpr, xpr_rs2 = x_0)</code><br>
<code>instr i_alu__opc_xor__xpr__xpr__x_0__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), xpr_1 = regop(xpr) },</code><br>
<code>%4 = i32 regop(xpr_1);</code><br>
<code>%5 = i1 -1;</code><br>
<code>regop(xpr_0) = %4;</code><br>
<code>,</code><br>
<code id=i_alu__opc_xor__xpr__xpr__xpr__>"xor" xpr_0~"," xpr_1~"," "x0",</code><br>
<code>0b000000000000 xpr_1[4,0] 0b100 xpr_0[4,0] 0b0110011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu(el:opc_xor, el:xpr, el:xpr, el:x_0)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_alu(opc = opc_xor, xpr_rd = xpr, xpr_rs1 = xpr, xpr_rs2 = xpr)</code><br>
<code>instr i_alu__opc_xor__xpr__xpr__xpr__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), xpr_1 = regop(xpr), xpr_2 = regop(xpr) },</code><br>
<code>%5 = i32 regop(xpr_2);</code><br>
<code>%6 = i32 regop(xpr_1);</code><br>
<code>%4 = xor(%5,%6);</code><br>
<code>%7 = i1 -1;</code><br>
<code>regop(xpr_0) = %4;</code><br>
<code>,</code><br>
<code id=i_alu__opc_sll__x_0__x_0__x_0__>"xor" xpr_0~"," xpr_1~"," xpr_2,</code><br>
<code>0b0000000 xpr_2[4,0] xpr_1[4,0] 0b100 xpr_0[4,0] 0b0110011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu(el:opc_xor, el:xpr, el:xpr, el:xpr)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_alu(opc = opc_sll, xpr_rd = x_0, xpr_rs1 = x_0, xpr_rs2 = x_0)</code><br>
<code>instr i_alu__opc_sll__x_0__x_0__x_0__, ok (0),</code><br>
<code>{ },</code><br>
<code>,</code><br>
<code id=i_alu__opc_sll__x_0__x_0__xpr__>"sll" "x0"~"," "x0"~"," "x0",</code><br>
<code>0b00000000000000000001000000110011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu(el:opc_sll, el:x_0, el:x_0, el:x_0)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_alu(opc = opc_sll, xpr_rd = x_0, xpr_rs1 = x_0, xpr_rs2 = xpr)</code><br>
<code>instr i_alu__opc_sll__x_0__x_0__xpr__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr) },</code><br>
<code>,</code><br>
<code id=i_alu__opc_sll__x_0__xpr__x_0__>"sll" "x0"~"," "x0"~"," xpr_0,</code><br>
<code>0b0000000 xpr_0[4,0] 0b00000001000000110011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu(el:opc_sll, el:x_0, el:x_0, el:xpr)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_alu(opc = opc_sll, xpr_rd = x_0, xpr_rs1 = xpr, xpr_rs2 = x_0)</code><br>
<code>instr i_alu__opc_sll__x_0__xpr__x_0__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr) },</code><br>
<code>,</code><br>
<code id=i_alu__opc_sll__x_0__xpr__xpr__>"sll" "x0"~"," xpr_0~"," "x0",</code><br>
<code>0b000000000000 xpr_0[4,0] 0b001000000110011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu(el:opc_sll, el:x_0, el:xpr, el:x_0)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_alu(opc = opc_sll, xpr_rd = x_0, xpr_rs1 = xpr, xpr_rs2 = xpr)</code><br>
<code>instr i_alu__opc_sll__x_0__xpr__xpr__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), xpr_1 = regop(xpr) },</code><br>
<code>,</code><br>
<code id=i_alu__opc_sll__xpr__x_0__x_0__>"sll" "x0"~"," xpr_0~"," xpr_1,</code><br>
<code>0b0000000 xpr_1[4,0] xpr_0[4,0] 0b001000000110011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu(el:opc_sll, el:x_0, el:xpr, el:xpr)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_alu(opc = opc_sll, xpr_rd = xpr, xpr_rs1 = x_0, xpr_rs2 = x_0)</code><br>
<code>instr i_alu__opc_sll__xpr__x_0__x_0__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr) },</code><br>
<code>%4 = i32 0;</code><br>
<code>%5 = i1 -1;</code><br>
<code>regop(xpr_0) = %4;</code><br>
<code>,</code><br>
<code id=i_alu__opc_sll__xpr__x_0__xpr__>"sll" xpr_0~"," "x0"~"," "x0",</code><br>
<code>0b00000000000000000001 xpr_0[4,0] 0b0110011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu(el:opc_sll, el:xpr, el:x_0, el:x_0)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_alu(opc = opc_sll, xpr_rd = xpr, xpr_rs1 = x_0, xpr_rs2 = xpr)</code><br>
<code>instr i_alu__opc_sll__xpr__x_0__xpr__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), xpr_1 = regop(xpr) },</code><br>
<code>%4 = i32 0;</code><br>
<code>%5 = i1 -1;</code><br>
<code>regop(xpr_0) = %4;</code><br>
<code>,</code><br>
<code id=i_alu__opc_sll__xpr__xpr__x_0__>"sll" xpr_0~"," "x0"~"," xpr_1,</code><br>
<code>0b0000000 xpr_1[4,0] 0b00000001 xpr_0[4,0] 0b0110011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu(el:opc_sll, el:xpr, el:x_0, el:xpr)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_alu(opc = opc_sll, xpr_rd = xpr, xpr_rs1 = xpr, xpr_rs2 = x_0)</code><br>
<code>instr i_alu__opc_sll__xpr__xpr__x_0__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), xpr_1 = regop(xpr) },</code><br>
<code>%4 = i32 regop(xpr_1);</code><br>
<code>%5 = i1 -1;</code><br>
<code>regop(xpr_0) = %4;</code><br>
<code>,</code><br>
<code id=i_alu__opc_sll__xpr__xpr__xpr__>"sll" xpr_0~"," xpr_1~"," "x0",</code><br>
<code>0b000000000000 xpr_1[4,0] 0b001 xpr_0[4,0] 0b0110011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu(el:opc_sll, el:xpr, el:xpr, el:x_0)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_alu(opc = opc_sll, xpr_rd = xpr, xpr_rs1 = xpr, xpr_rs2 = xpr)</code><br>
<code>instr i_alu__opc_sll__xpr__xpr__xpr__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), xpr_1 = regop(xpr), xpr_2 = regop(xpr) },</code><br>
<code>%5 = i32 regop(xpr_1);</code><br>
<code>%7 = i32 regop(xpr_2);</code><br>
<code>%8 = i32 31;</code><br>
<code>%6 = and(%7,%8);</code><br>
<code>%4 = shl(%5,%6);</code><br>
<code>%9 = i1 -1;</code><br>
<code>regop(xpr_0) = %4;</code><br>
<code>,</code><br>
<code id=i_alu__opc_srl__x_0__x_0__x_0__>"sll" xpr_0~"," xpr_1~"," xpr_2,</code><br>
<code>0b0000000 xpr_2[4,0] xpr_1[4,0] 0b001 xpr_0[4,0] 0b0110011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu(el:opc_sll, el:xpr, el:xpr, el:xpr)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_alu(opc = opc_srl, xpr_rd = x_0, xpr_rs1 = x_0, xpr_rs2 = x_0)</code><br>
<code>instr i_alu__opc_srl__x_0__x_0__x_0__, ok (0),</code><br>
<code>{ },</code><br>
<code>,</code><br>
<code id=i_alu__opc_srl__x_0__x_0__xpr__>"srl" "x0"~"," "x0"~"," "x0",</code><br>
<code>0b00000000000000000101000000110011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu(el:opc_srl, el:x_0, el:x_0, el:x_0)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_alu(opc = opc_srl, xpr_rd = x_0, xpr_rs1 = x_0, xpr_rs2 = xpr)</code><br>
<code>instr i_alu__opc_srl__x_0__x_0__xpr__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr) },</code><br>
<code>,</code><br>
<code id=i_alu__opc_srl__x_0__xpr__x_0__>"srl" "x0"~"," "x0"~"," xpr_0,</code><br>
<code>0b0000000 xpr_0[4,0] 0b00000101000000110011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu(el:opc_srl, el:x_0, el:x_0, el:xpr)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_alu(opc = opc_srl, xpr_rd = x_0, xpr_rs1 = xpr, xpr_rs2 = x_0)</code><br>
<code>instr i_alu__opc_srl__x_0__xpr__x_0__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr) },</code><br>
<code>,</code><br>
<code id=i_alu__opc_srl__x_0__xpr__xpr__>"srl" "x0"~"," xpr_0~"," "x0",</code><br>
<code>0b000000000000 xpr_0[4,0] 0b101000000110011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu(el:opc_srl, el:x_0, el:xpr, el:x_0)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_alu(opc = opc_srl, xpr_rd = x_0, xpr_rs1 = xpr, xpr_rs2 = xpr)</code><br>
<code>instr i_alu__opc_srl__x_0__xpr__xpr__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), xpr_1 = regop(xpr) },</code><br>
<code>,</code><br>
<code id=i_alu__opc_srl__xpr__x_0__x_0__>"srl" "x0"~"," xpr_0~"," xpr_1,</code><br>
<code>0b0000000 xpr_1[4,0] xpr_0[4,0] 0b101000000110011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu(el:opc_srl, el:x_0, el:xpr, el:xpr)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_alu(opc = opc_srl, xpr_rd = xpr, xpr_rs1 = x_0, xpr_rs2 = x_0)</code><br>
<code>instr i_alu__opc_srl__xpr__x_0__x_0__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr) },</code><br>
<code>%4 = i32 0;</code><br>
<code>%5 = i1 -1;</code><br>
<code>regop(xpr_0) = %4;</code><br>
<code>,</code><br>
<code id=i_alu__opc_srl__xpr__x_0__xpr__>"srl" xpr_0~"," "x0"~"," "x0",</code><br>
<code>0b00000000000000000101 xpr_0[4,0] 0b0110011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu(el:opc_srl, el:xpr, el:x_0, el:x_0)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_alu(opc = opc_srl, xpr_rd = xpr, xpr_rs1 = x_0, xpr_rs2 = xpr)</code><br>
<code>instr i_alu__opc_srl__xpr__x_0__xpr__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), xpr_1 = regop(xpr) },</code><br>
<code>%4 = i32 0;</code><br>
<code>%5 = i1 -1;</code><br>
<code>regop(xpr_0) = %4;</code><br>
<code>,</code><br>
<code id=i_alu__opc_srl__xpr__xpr__x_0__>"srl" xpr_0~"," "x0"~"," xpr_1,</code><br>
<code>0b0000000 xpr_1[4,0] 0b00000101 xpr_0[4,0] 0b0110011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu(el:opc_srl, el:xpr, el:x_0, el:xpr)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_alu(opc = opc_srl, xpr_rd = xpr, xpr_rs1 = xpr, xpr_rs2 = x_0)</code><br>
<code>instr i_alu__opc_srl__xpr__xpr__x_0__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), xpr_1 = regop(xpr) },</code><br>
<code>%4 = i32 regop(xpr_1);</code><br>
<code>%5 = i1 -1;</code><br>
<code>regop(xpr_0) = %4;</code><br>
<code>,</code><br>
<code id=i_alu__opc_srl__xpr__xpr__xpr__>"srl" xpr_0~"," xpr_1~"," "x0",</code><br>
<code>0b000000000000 xpr_1[4,0] 0b101 xpr_0[4,0] 0b0110011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu(el:opc_srl, el:xpr, el:xpr, el:x_0)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_alu(opc = opc_srl, xpr_rd = xpr, xpr_rs1 = xpr, xpr_rs2 = xpr)</code><br>
<code>instr i_alu__opc_srl__xpr__xpr__xpr__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), xpr_1 = regop(xpr), xpr_2 = regop(xpr) },</code><br>
<code>%5 = i32 regop(xpr_1);</code><br>
<code>%7 = i32 regop(xpr_2);</code><br>
<code>%8 = i32 31;</code><br>
<code>%6 = and(%7,%8);</code><br>
<code>%4 = srl(%5,%6);</code><br>
<code>%9 = i1 -1;</code><br>
<code>regop(xpr_0) = %4;</code><br>
<code>,</code><br>
<code id=i_alu__opc_sub__x_0__x_0__x_0__>"srl" xpr_0~"," xpr_1~"," xpr_2,</code><br>
<code>0b0000000 xpr_2[4,0] xpr_1[4,0] 0b101 xpr_0[4,0] 0b0110011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu(el:opc_srl, el:xpr, el:xpr, el:xpr)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_alu(opc = opc_sub, xpr_rd = x_0, xpr_rs1 = x_0, xpr_rs2 = x_0)</code><br>
<code>instr i_alu__opc_sub__x_0__x_0__x_0__, ok (0),</code><br>
<code>{ },</code><br>
<code>,</code><br>
<code id=i_alu__opc_sub__x_0__x_0__xpr__>"sub" "x0"~"," "x0"~"," "x0",</code><br>
<code>0b01000000000000000000000000110011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu(el:opc_sub, el:x_0, el:x_0, el:x_0)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_alu(opc = opc_sub, xpr_rd = x_0, xpr_rs1 = x_0, xpr_rs2 = xpr)</code><br>
<code>instr i_alu__opc_sub__x_0__x_0__xpr__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr) },</code><br>
<code>,</code><br>
<code id=i_alu__opc_sub__x_0__xpr__x_0__>"sub" "x0"~"," "x0"~"," xpr_0,</code><br>
<code>0b0100000 xpr_0[4,0] 0b00000000000000110011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu(el:opc_sub, el:x_0, el:x_0, el:xpr)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_alu(opc = opc_sub, xpr_rd = x_0, xpr_rs1 = xpr, xpr_rs2 = x_0)</code><br>
<code>instr i_alu__opc_sub__x_0__xpr__x_0__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr) },</code><br>
<code>,</code><br>
<code id=i_alu__opc_sub__x_0__xpr__xpr__>"sub" "x0"~"," xpr_0~"," "x0",</code><br>
<code>0b010000000000 xpr_0[4,0] 0b000000000110011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu(el:opc_sub, el:x_0, el:xpr, el:x_0)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_alu(opc = opc_sub, xpr_rd = x_0, xpr_rs1 = xpr, xpr_rs2 = xpr)</code><br>
<code>instr i_alu__opc_sub__x_0__xpr__xpr__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), xpr_1 = regop(xpr) },</code><br>
<code>,</code><br>
<code id=i_alu__opc_sub__xpr__x_0__x_0__>"sub" "x0"~"," xpr_0~"," xpr_1,</code><br>
<code>0b0100000 xpr_1[4,0] xpr_0[4,0] 0b000000000110011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu(el:opc_sub, el:x_0, el:xpr, el:xpr)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_alu(opc = opc_sub, xpr_rd = xpr, xpr_rs1 = x_0, xpr_rs2 = x_0)</code><br>
<code>instr i_alu__opc_sub__xpr__x_0__x_0__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr) },</code><br>
<code>%4 = i32 0;</code><br>
<code>%5 = i1 -1;</code><br>
<code>regop(xpr_0) = %4;</code><br>
<code>,</code><br>
<code id=i_alu__opc_sub__xpr__x_0__xpr__>"sub" xpr_0~"," "x0"~"," "x0",</code><br>
<code>0b01000000000000000000 xpr_0[4,0] 0b0110011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu(el:opc_sub, el:xpr, el:x_0, el:x_0)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_alu(opc = opc_sub, xpr_rd = xpr, xpr_rs1 = x_0, xpr_rs2 = xpr)</code><br>
<code>instr i_alu__opc_sub__xpr__x_0__xpr__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), xpr_1 = regop(xpr) },</code><br>
<code>%5 = i32 0;</code><br>
<code>%6 = i32 regop(xpr_1);</code><br>
<code>%4 = sub(%5,%6);</code><br>
<code>%7 = i1 -1;</code><br>
<code>regop(xpr_0) = %4;</code><br>
<code>,</code><br>
<code id=i_alu__opc_sub__xpr__xpr__x_0__>"sub" xpr_0~"," "x0"~"," xpr_1,</code><br>
<code>0b0100000 xpr_1[4,0] 0b00000000 xpr_0[4,0] 0b0110011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu(el:opc_sub, el:xpr, el:x_0, el:xpr)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_alu(opc = opc_sub, xpr_rd = xpr, xpr_rs1 = xpr, xpr_rs2 = x_0)</code><br>
<code>instr i_alu__opc_sub__xpr__xpr__x_0__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), xpr_1 = regop(xpr) },</code><br>
<code>%4 = i32 regop(xpr_1);</code><br>
<code>%5 = i1 -1;</code><br>
<code>regop(xpr_0) = %4;</code><br>
<code>,</code><br>
<code id=i_alu__opc_sub__xpr__xpr__xpr__>"sub" xpr_0~"," xpr_1~"," "x0",</code><br>
<code>0b010000000000 xpr_1[4,0] 0b000 xpr_0[4,0] 0b0110011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu(el:opc_sub, el:xpr, el:xpr, el:x_0)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_alu(opc = opc_sub, xpr_rd = xpr, xpr_rs1 = xpr, xpr_rs2 = xpr)</code><br>
<code>instr i_alu__opc_sub__xpr__xpr__xpr__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), xpr_1 = regop(xpr), xpr_2 = regop(xpr) },</code><br>
<code>%5 = i32 regop(xpr_1);</code><br>
<code>%6 = i32 regop(xpr_2);</code><br>
<code>%4 = sub(%5,%6);</code><br>
<code>%7 = i1 -1;</code><br>
<code>regop(xpr_0) = %4;</code><br>
<code>,</code><br>
<code id=i_alu__opc_sra__x_0__x_0__x_0__>"sub" xpr_0~"," xpr_1~"," xpr_2,</code><br>
<code>0b0100000 xpr_2[4,0] xpr_1[4,0] 0b000 xpr_0[4,0] 0b0110011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu(el:opc_sub, el:xpr, el:xpr, el:xpr)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_alu(opc = opc_sra, xpr_rd = x_0, xpr_rs1 = x_0, xpr_rs2 = x_0)</code><br>
<code>instr i_alu__opc_sra__x_0__x_0__x_0__, ok (0),</code><br>
<code>{ },</code><br>
<code>,</code><br>
<code id=i_alu__opc_sra__x_0__x_0__xpr__>"sra" "x0"~"," "x0"~"," "x0",</code><br>
<code>0b01000000000000000101000000110011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu(el:opc_sra, el:x_0, el:x_0, el:x_0)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_alu(opc = opc_sra, xpr_rd = x_0, xpr_rs1 = x_0, xpr_rs2 = xpr)</code><br>
<code>instr i_alu__opc_sra__x_0__x_0__xpr__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr) },</code><br>
<code>,</code><br>
<code id=i_alu__opc_sra__x_0__xpr__x_0__>"sra" "x0"~"," "x0"~"," xpr_0,</code><br>
<code>0b0100000 xpr_0[4,0] 0b00000101000000110011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu(el:opc_sra, el:x_0, el:x_0, el:xpr)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_alu(opc = opc_sra, xpr_rd = x_0, xpr_rs1 = xpr, xpr_rs2 = x_0)</code><br>
<code>instr i_alu__opc_sra__x_0__xpr__x_0__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr) },</code><br>
<code>,</code><br>
<code id=i_alu__opc_sra__x_0__xpr__xpr__>"sra" "x0"~"," xpr_0~"," "x0",</code><br>
<code>0b010000000000 xpr_0[4,0] 0b101000000110011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu(el:opc_sra, el:x_0, el:xpr, el:x_0)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_alu(opc = opc_sra, xpr_rd = x_0, xpr_rs1 = xpr, xpr_rs2 = xpr)</code><br>
<code>instr i_alu__opc_sra__x_0__xpr__xpr__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), xpr_1 = regop(xpr) },</code><br>
<code>,</code><br>
<code id=i_alu__opc_sra__xpr__x_0__x_0__>"sra" "x0"~"," xpr_0~"," xpr_1,</code><br>
<code>0b0100000 xpr_1[4,0] xpr_0[4,0] 0b101000000110011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu(el:opc_sra, el:x_0, el:xpr, el:xpr)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_alu(opc = opc_sra, xpr_rd = xpr, xpr_rs1 = x_0, xpr_rs2 = x_0)</code><br>
<code>instr i_alu__opc_sra__xpr__x_0__x_0__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr) },</code><br>
<code>%4 = i32 0;</code><br>
<code>%5 = i1 -1;</code><br>
<code>regop(xpr_0) = %4;</code><br>
<code>,</code><br>
<code id=i_alu__opc_sra__xpr__x_0__xpr__>"sra" xpr_0~"," "x0"~"," "x0",</code><br>
<code>0b01000000000000000101 xpr_0[4,0] 0b0110011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu(el:opc_sra, el:xpr, el:x_0, el:x_0)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_alu(opc = opc_sra, xpr_rd = xpr, xpr_rs1 = x_0, xpr_rs2 = xpr)</code><br>
<code>instr i_alu__opc_sra__xpr__x_0__xpr__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), xpr_1 = regop(xpr) },</code><br>
<code>%4 = i32 0;</code><br>
<code>%5 = i1 -1;</code><br>
<code>regop(xpr_0) = %4;</code><br>
<code>,</code><br>
<code id=i_alu__opc_sra__xpr__xpr__x_0__>"sra" xpr_0~"," "x0"~"," xpr_1,</code><br>
<code>0b0100000 xpr_1[4,0] 0b00000101 xpr_0[4,0] 0b0110011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu(el:opc_sra, el:xpr, el:x_0, el:xpr)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_alu(opc = opc_sra, xpr_rd = xpr, xpr_rs1 = xpr, xpr_rs2 = x_0)</code><br>
<code>instr i_alu__opc_sra__xpr__xpr__x_0__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), xpr_1 = regop(xpr) },</code><br>
<code>%4 = i32 regop(xpr_1);</code><br>
<code>%5 = i1 -1;</code><br>
<code>regop(xpr_0) = %4;</code><br>
<code>,</code><br>
<code id=i_alu__opc_sra__xpr__xpr__xpr__>"sra" xpr_0~"," xpr_1~"," "x0",</code><br>
<code>0b010000000000 xpr_1[4,0] 0b101 xpr_0[4,0] 0b0110011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu(el:opc_sra, el:xpr, el:xpr, el:x_0)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_alu(opc = opc_sra, xpr_rd = xpr, xpr_rs1 = xpr, xpr_rs2 = xpr)</code><br>
<code>instr i_alu__opc_sra__xpr__xpr__xpr__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), xpr_1 = regop(xpr), xpr_2 = regop(xpr) },</code><br>
<code>%5 = i32 regop(xpr_1);</code><br>
<code>%7 = i32 regop(xpr_2);</code><br>
<code>%8 = i32 31;</code><br>
<code>%6 = and(%7,%8);</code><br>
<code>%4 = sra(%5,%6);</code><br>
<code>%9 = i1 -1;</code><br>
<code>regop(xpr_0) = %4;</code><br>
<code>,</code><br>
<code id=i_shift__opc_slli__x_0__x_0__shamt__>"sra" xpr_0~"," xpr_1~"," xpr_2,</code><br>
<code>0b0100000 xpr_2[4,0] xpr_1[4,0] 0b101 xpr_0[4,0] 0b0110011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu(el:opc_sra, el:xpr, el:xpr, el:xpr)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_shift(opc = opc_slli, xpr_rd = x_0, xpr_rs1 = x_0, shamt = shamt(val))</code><br>
<code>instr i_shift__opc_slli__x_0__x_0__shamt__, ok (0),</code><br>
<code>{ imm_0 = immop() },</code><br>
<code>,</code><br>
<code id=i_shift__opc_slli__x_0__xpr__shamt__>"slli" "x0"~"," "x0"~"," imm_0,</code><br>
<code>0b0000000 imm_0[4,0] 0b00000001000000010011 ,</code><br>
<code>"",</code><br>
<code>"el:i_shift(el:opc_slli, el:x_0, el:x_0, el:shamt)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_shift(opc = opc_slli, xpr_rd = x_0, xpr_rs1 = xpr, shamt = shamt(val))</code><br>
<code>instr i_shift__opc_slli__x_0__xpr__shamt__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), imm_1 = immop() },</code><br>
<code>,</code><br>
<code id=i_shift__opc_slli__xpr__x_0__shamt__>"slli" "x0"~"," xpr_0~"," imm_1,</code><br>
<code>0b0000000 imm_1[4,0] xpr_0[4,0] 0b001000000010011 ,</code><br>
<code>"",</code><br>
<code>"el:i_shift(el:opc_slli, el:x_0, el:xpr, el:shamt)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_shift(opc = opc_slli, xpr_rd = xpr, xpr_rs1 = x_0, shamt = shamt(val))</code><br>
<code>instr i_shift__opc_slli__xpr__x_0__shamt__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), imm_1 = immop() },</code><br>
<code>%4 = i32 0;</code><br>
<code>%5 = i1 -1;</code><br>
<code>regop(xpr_0) = %4;</code><br>
<code>,</code><br>
<code id=i_shift__opc_slli__xpr__xpr__shamt__>"slli" xpr_0~"," "x0"~"," imm_1,</code><br>
<code>0b0000000 imm_1[4,0] 0b00000001 xpr_0[4,0] 0b0010011 ,</code><br>
<code>"",</code><br>
<code>"el:i_shift(el:opc_slli, el:xpr, el:x_0, el:shamt)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_shift(opc = opc_slli, xpr_rd = xpr, xpr_rs1 = xpr, shamt = shamt(val))</code><br>
<code>instr i_shift__opc_slli__xpr__xpr__shamt__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), xpr_1 = regop(xpr), imm_2 = immop() },</code><br>
<code>%5 = i32 regop(xpr_1);</code><br>
<code>%6 = i32 immop(imm_2,0,5);</code><br>
<code>%4 = shl(%5,%6);</code><br>
<code>%7 = i1 -1;</code><br>
<code>regop(xpr_0) = %4;</code><br>
<code>,</code><br>
<code id=i_shift__opc_srli__x_0__x_0__shamt__>"slli" xpr_0~"," xpr_1~"," imm_2,</code><br>
<code>0b0000000 imm_2[4,0] xpr_1[4,0] 0b001 xpr_0[4,0] 0b0010011 ,</code><br>
<code>"",</code><br>
<code>"el:i_shift(el:opc_slli, el:xpr, el:xpr, el:shamt)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_shift(opc = opc_srli, xpr_rd = x_0, xpr_rs1 = x_0, shamt = shamt(val))</code><br>
<code>instr i_shift__opc_srli__x_0__x_0__shamt__, ok (0),</code><br>
<code>{ imm_0 = immop() },</code><br>
<code>,</code><br>
<code id=i_shift__opc_srli__x_0__xpr__shamt__>"srli" "x0"~"," "x0"~"," imm_0,</code><br>
<code>0b0000000 imm_0[4,0] 0b00000101000000010011 ,</code><br>
<code>"",</code><br>
<code>"el:i_shift(el:opc_srli, el:x_0, el:x_0, el:shamt)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_shift(opc = opc_srli, xpr_rd = x_0, xpr_rs1 = xpr, shamt = shamt(val))</code><br>
<code>instr i_shift__opc_srli__x_0__xpr__shamt__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), imm_1 = immop() },</code><br>
<code>,</code><br>
<code id=i_shift__opc_srli__xpr__x_0__shamt__>"srli" "x0"~"," xpr_0~"," imm_1,</code><br>
<code>0b0000000 imm_1[4,0] xpr_0[4,0] 0b101000000010011 ,</code><br>
<code>"",</code><br>
<code>"el:i_shift(el:opc_srli, el:x_0, el:xpr, el:shamt)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_shift(opc = opc_srli, xpr_rd = xpr, xpr_rs1 = x_0, shamt = shamt(val))</code><br>
<code>instr i_shift__opc_srli__xpr__x_0__shamt__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), imm_1 = immop() },</code><br>
<code>%4 = i32 0;</code><br>
<code>%5 = i1 -1;</code><br>
<code>regop(xpr_0) = %4;</code><br>
<code>,</code><br>
<code id=i_shift__opc_srli__xpr__xpr__shamt__>"srli" xpr_0~"," "x0"~"," imm_1,</code><br>
<code>0b0000000 imm_1[4,0] 0b00000101 xpr_0[4,0] 0b0010011 ,</code><br>
<code>"",</code><br>
<code>"el:i_shift(el:opc_srli, el:xpr, el:x_0, el:shamt)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_shift(opc = opc_srli, xpr_rd = xpr, xpr_rs1 = xpr, shamt = shamt(val))</code><br>
<code>instr i_shift__opc_srli__xpr__xpr__shamt__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), xpr_1 = regop(xpr), imm_2 = immop() },</code><br>
<code>%5 = i32 regop(xpr_1);</code><br>
<code>%6 = i32 immop(imm_2,0,5);</code><br>
<code>%4 = srl(%5,%6);</code><br>
<code>%7 = i1 -1;</code><br>
<code>regop(xpr_0) = %4;</code><br>
<code>,</code><br>
<code id=i_shift__opc_srai__x_0__x_0__shamt__>"srli" xpr_0~"," xpr_1~"," imm_2,</code><br>
<code>0b0000000 imm_2[4,0] xpr_1[4,0] 0b101 xpr_0[4,0] 0b0010011 ,</code><br>
<code>"",</code><br>
<code>"el:i_shift(el:opc_srli, el:xpr, el:xpr, el:shamt)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_shift(opc = opc_srai, xpr_rd = x_0, xpr_rs1 = x_0, shamt = shamt(val))</code><br>
<code>instr i_shift__opc_srai__x_0__x_0__shamt__, ok (0),</code><br>
<code>{ imm_0 = immop() },</code><br>
<code>,</code><br>
<code id=i_shift__opc_srai__x_0__xpr__shamt__>"srai" "x0"~"," "x0"~"," imm_0,</code><br>
<code>0b0100000 imm_0[4,0] 0b00000101000000010011 ,</code><br>
<code>"",</code><br>
<code>"el:i_shift(el:opc_srai, el:x_0, el:x_0, el:shamt)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_shift(opc = opc_srai, xpr_rd = x_0, xpr_rs1 = xpr, shamt = shamt(val))</code><br>
<code>instr i_shift__opc_srai__x_0__xpr__shamt__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), imm_1 = immop() },</code><br>
<code>,</code><br>
<code id=i_shift__opc_srai__xpr__x_0__shamt__>"srai" "x0"~"," xpr_0~"," imm_1,</code><br>
<code>0b0100000 imm_1[4,0] xpr_0[4,0] 0b101000000010011 ,</code><br>
<code>"",</code><br>
<code>"el:i_shift(el:opc_srai, el:x_0, el:xpr, el:shamt)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_shift(opc = opc_srai, xpr_rd = xpr, xpr_rs1 = x_0, shamt = shamt(val))</code><br>
<code>instr i_shift__opc_srai__xpr__x_0__shamt__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), imm_1 = immop() },</code><br>
<code>%4 = i32 0;</code><br>
<code>%5 = i1 -1;</code><br>
<code>regop(xpr_0) = %4;</code><br>
<code>,</code><br>
<code id=i_shift__opc_srai__xpr__xpr__shamt__>"srai" xpr_0~"," "x0"~"," imm_1,</code><br>
<code>0b0100000 imm_1[4,0] 0b00000101 xpr_0[4,0] 0b0010011 ,</code><br>
<code>"",</code><br>
<code>"el:i_shift(el:opc_srai, el:xpr, el:x_0, el:shamt)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_shift(opc = opc_srai, xpr_rd = xpr, xpr_rs1 = xpr, shamt = shamt(val))</code><br>
<code>instr i_shift__opc_srai__xpr__xpr__shamt__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), xpr_1 = regop(xpr), imm_2 = immop() },</code><br>
<code>%5 = i32 regop(xpr_1);</code><br>
<code>%6 = i32 immop(imm_2,0,5);</code><br>
<code>%4 = sra(%5,%6);</code><br>
<code>%7 = i1 -1;</code><br>
<code>regop(xpr_0) = %4;</code><br>
<code>,</code><br>
<code id=i_alu_i__opc_addi__x_0__x_0__simm12__>"srai" xpr_0~"," xpr_1~"," imm_2,</code><br>
<code>0b0100000 imm_2[4,0] xpr_1[4,0] 0b101 xpr_0[4,0] 0b0010011 ,</code><br>
<code>"",</code><br>
<code>"el:i_shift(el:opc_srai, el:xpr, el:xpr, el:shamt)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_alu_i(opc = opc_addi, xpr_rd = x_0, xpr_rs1 = x_0, simm = simm12(val))</code><br>
<code>instr i_alu_i__opc_addi__x_0__x_0__simm12__, ok (0),</code><br>
<code>{ imm_0 = immop() },</code><br>
<code>,</code><br>
<code id=i_alu_i__opc_addi__x_0__xpr__simm12__>"addi" "x0"~"," "x0"~"," imm_0,</code><br>
<code>imm_0[11,0] 0b00000000000000010011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu_i(el:opc_addi, el:x_0, el:x_0, el:simm12)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_alu_i(opc = opc_addi, xpr_rd = x_0, xpr_rs1 = xpr, simm = simm12(val))</code><br>
<code>instr i_alu_i__opc_addi__x_0__xpr__simm12__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), imm_1 = immop() },</code><br>
<code>,</code><br>
<code id=i_alu_i__opc_addi__xpr__x_0__simm12__>"addi" "x0"~"," xpr_0~"," imm_1,</code><br>
<code>imm_1[11,0] xpr_0[4,0] 0b000000000010011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu_i(el:opc_addi, el:x_0, el:xpr, el:simm12)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_alu_i(opc = opc_addi, xpr_rd = xpr, xpr_rs1 = x_0, simm = simm12(val))</code><br>
<code>instr i_alu_i__opc_addi__xpr__x_0__simm12__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), imm_1 = immop() },</code><br>
<code>%4 = i32 immop(imm_1,1,12);</code><br>
<code>%5 = i1 -1;</code><br>
<code>regop(xpr_0) = %4;</code><br>
<code>,</code><br>
<code id=i_alu_i__opc_addi__xpr__xpr__simm12__>"addi" xpr_0~"," "x0"~"," imm_1,</code><br>
<code>imm_1[11,0] 0b00000000 xpr_0[4,0] 0b0010011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu_i(el:opc_addi, el:xpr, el:x_0, el:simm12)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_alu_i(opc = opc_addi, xpr_rd = xpr, xpr_rs1 = xpr, simm = simm12(val))</code><br>
<code>instr i_alu_i__opc_addi__xpr__xpr__simm12__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), xpr_1 = regop(xpr), imm_2 = immop() },</code><br>
<code>%5 = i32 regop(xpr_1);</code><br>
<code>%6 = i32 immop(imm_2,1,12);</code><br>
<code>%4 = add(%5,%6);</code><br>
<code>%7 = i1 -1;</code><br>
<code>regop(xpr_0) = %4;</code><br>
<code>,</code><br>
<code id=i_alu_i__opc_slti__x_0__x_0__simm12__>"addi" xpr_0~"," xpr_1~"," imm_2,</code><br>
<code>imm_2[11,0] xpr_1[4,0] 0b000 xpr_0[4,0] 0b0010011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu_i(el:opc_addi, el:xpr, el:xpr, el:simm12)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_alu_i(opc = opc_slti, xpr_rd = x_0, xpr_rs1 = x_0, simm = simm12(val))</code><br>
<code>instr i_alu_i__opc_slti__x_0__x_0__simm12__, ok (0),</code><br>
<code>{ imm_0 = immop() },</code><br>
<code>,</code><br>
<code id=i_alu_i__opc_slti__x_0__xpr__simm12__>"slti" "x0"~"," "x0"~"," imm_0,</code><br>
<code>imm_0[11,0] 0b00000010000000010011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu_i(el:opc_slti, el:x_0, el:x_0, el:simm12)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_alu_i(opc = opc_slti, xpr_rd = x_0, xpr_rs1 = xpr, simm = simm12(val))</code><br>
<code>instr i_alu_i__opc_slti__x_0__xpr__simm12__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), imm_1 = immop() },</code><br>
<code>,</code><br>
<code id=i_alu_i__opc_slti__xpr__x_0__simm12__>"slti" "x0"~"," xpr_0~"," imm_1,</code><br>
<code>imm_1[11,0] xpr_0[4,0] 0b010000000010011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu_i(el:opc_slti, el:x_0, el:xpr, el:simm12)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_alu_i(opc = opc_slti, xpr_rd = xpr, xpr_rs1 = x_0, simm = simm12(val))</code><br>
<code>instr i_alu_i__opc_slti__xpr__x_0__simm12__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), imm_1 = immop() },</code><br>
<code>%6 = i32 immop(imm_1,1,12);</code><br>
<code>%7 = i32 0;</code><br>
<code>%5 = setgt(%6,%7);</code><br>
<code>%4 = i32 zero_extend(%5);</code><br>
<code>%8 = i1 -1;</code><br>
<code>regop(xpr_0) = %4;</code><br>
<code>,</code><br>
<code id=i_alu_i__opc_slti__xpr__xpr__simm12__>"slti" xpr_0~"," "x0"~"," imm_1,</code><br>
<code>imm_1[11,0] 0b00000010 xpr_0[4,0] 0b0010011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu_i(el:opc_slti, el:xpr, el:x_0, el:simm12)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_alu_i(opc = opc_slti, xpr_rd = xpr, xpr_rs1 = xpr, simm = simm12(val))</code><br>
<code>instr i_alu_i__opc_slti__xpr__xpr__simm12__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), xpr_1 = regop(xpr), imm_2 = immop() },</code><br>
<code>%6 = i32 regop(xpr_1);</code><br>
<code>%7 = i32 immop(imm_2,1,12);</code><br>
<code>%5 = setlt(%6,%7);</code><br>
<code>%4 = i32 zero_extend(%5);</code><br>
<code>%8 = i1 -1;</code><br>
<code>regop(xpr_0) = %4;</code><br>
<code>,</code><br>
<code id=i_alu_i__opc_sltiu__x_0__x_0__simm12__>"slti" xpr_0~"," xpr_1~"," imm_2,</code><br>
<code>imm_2[11,0] xpr_1[4,0] 0b010 xpr_0[4,0] 0b0010011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu_i(el:opc_slti, el:xpr, el:xpr, el:simm12)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_alu_i(opc = opc_sltiu, xpr_rd = x_0, xpr_rs1 = x_0, simm = simm12(val))</code><br>
<code>instr i_alu_i__opc_sltiu__x_0__x_0__simm12__, ok (0),</code><br>
<code>{ imm_0 = immop() },</code><br>
<code>,</code><br>
<code id=i_alu_i__opc_sltiu__x_0__xpr__simm12__>"sltiu" "x0"~"," "x0"~"," imm_0,</code><br>
<code>imm_0[11,0] 0b00000011000000010011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu_i(el:opc_sltiu, el:x_0, el:x_0, el:simm12)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_alu_i(opc = opc_sltiu, xpr_rd = x_0, xpr_rs1 = xpr, simm = simm12(val))</code><br>
<code>instr i_alu_i__opc_sltiu__x_0__xpr__simm12__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), imm_1 = immop() },</code><br>
<code>,</code><br>
<code id=i_alu_i__opc_sltiu__xpr__x_0__simm12__>"sltiu" "x0"~"," xpr_0~"," imm_1,</code><br>
<code>imm_1[11,0] xpr_0[4,0] 0b011000000010011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu_i(el:opc_sltiu, el:x_0, el:xpr, el:simm12)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_alu_i(opc = opc_sltiu, xpr_rd = xpr, xpr_rs1 = x_0, simm = simm12(val))</code><br>
<code>instr i_alu_i__opc_sltiu__xpr__x_0__simm12__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), imm_1 = immop() },</code><br>
<code>%6 = i32 immop(imm_1,1,12);</code><br>
<code>%7 = i32 0;</code><br>
<code>%5 = setne(%6,%7);</code><br>
<code>%4 = i32 zero_extend(%5);</code><br>
<code>%8 = i1 -1;</code><br>
<code>regop(xpr_0) = %4;</code><br>
<code>,</code><br>
<code id=i_alu_i__opc_sltiu__xpr__xpr__simm12__>"sltiu" xpr_0~"," "x0"~"," imm_1,</code><br>
<code>imm_1[11,0] 0b00000011 xpr_0[4,0] 0b0010011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu_i(el:opc_sltiu, el:xpr, el:x_0, el:simm12)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_alu_i(opc = opc_sltiu, xpr_rd = xpr, xpr_rs1 = xpr, simm = simm12(val))</code><br>
<code>instr i_alu_i__opc_sltiu__xpr__xpr__simm12__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), xpr_1 = regop(xpr), imm_2 = immop() },</code><br>
<code>%6 = i32 regop(xpr_1);</code><br>
<code>%7 = i32 immop(imm_2,1,12);</code><br>
<code>%5 = setult(%6,%7);</code><br>
<code>%4 = i32 zero_extend(%5);</code><br>
<code>%8 = i1 -1;</code><br>
<code>regop(xpr_0) = %4;</code><br>
<code>,</code><br>
<code id=i_alu_i__opc_andi__x_0__x_0__simm12__>"sltiu" xpr_0~"," xpr_1~"," imm_2,</code><br>
<code>imm_2[11,0] xpr_1[4,0] 0b011 xpr_0[4,0] 0b0010011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu_i(el:opc_sltiu, el:xpr, el:xpr, el:simm12)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_alu_i(opc = opc_andi, xpr_rd = x_0, xpr_rs1 = x_0, simm = simm12(val))</code><br>
<code>instr i_alu_i__opc_andi__x_0__x_0__simm12__, ok (0),</code><br>
<code>{ imm_0 = immop() },</code><br>
<code>,</code><br>
<code id=i_alu_i__opc_andi__x_0__xpr__simm12__>"andi" "x0"~"," "x0"~"," imm_0,</code><br>
<code>imm_0[11,0] 0b00000111000000010011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu_i(el:opc_andi, el:x_0, el:x_0, el:simm12)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_alu_i(opc = opc_andi, xpr_rd = x_0, xpr_rs1 = xpr, simm = simm12(val))</code><br>
<code>instr i_alu_i__opc_andi__x_0__xpr__simm12__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), imm_1 = immop() },</code><br>
<code>,</code><br>
<code id=i_alu_i__opc_andi__xpr__x_0__simm12__>"andi" "x0"~"," xpr_0~"," imm_1,</code><br>
<code>imm_1[11,0] xpr_0[4,0] 0b111000000010011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu_i(el:opc_andi, el:x_0, el:xpr, el:simm12)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_alu_i(opc = opc_andi, xpr_rd = xpr, xpr_rs1 = x_0, simm = simm12(val))</code><br>
<code>instr i_alu_i__opc_andi__xpr__x_0__simm12__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), imm_1 = immop() },</code><br>
<code>%4 = i32 0;</code><br>
<code>%5 = i1 -1;</code><br>
<code>regop(xpr_0) = %4;</code><br>
<code>,</code><br>
<code id=i_alu_i__opc_andi__xpr__xpr__simm12__>"andi" xpr_0~"," "x0"~"," imm_1,</code><br>
<code>imm_1[11,0] 0b00000111 xpr_0[4,0] 0b0010011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu_i(el:opc_andi, el:xpr, el:x_0, el:simm12)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_alu_i(opc = opc_andi, xpr_rd = xpr, xpr_rs1 = xpr, simm = simm12(val))</code><br>
<code>instr i_alu_i__opc_andi__xpr__xpr__simm12__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), xpr_1 = regop(xpr), imm_2 = immop() },</code><br>
<code>%5 = i32 regop(xpr_1);</code><br>
<code>%6 = i32 immop(imm_2,1,12);</code><br>
<code>%4 = and(%5,%6);</code><br>
<code>%7 = i1 -1;</code><br>
<code>regop(xpr_0) = %4;</code><br>
<code>,</code><br>
<code id=i_alu_i__opc_ori__x_0__x_0__simm12__>"andi" xpr_0~"," xpr_1~"," imm_2,</code><br>
<code>imm_2[11,0] xpr_1[4,0] 0b111 xpr_0[4,0] 0b0010011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu_i(el:opc_andi, el:xpr, el:xpr, el:simm12)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_alu_i(opc = opc_ori, xpr_rd = x_0, xpr_rs1 = x_0, simm = simm12(val))</code><br>
<code>instr i_alu_i__opc_ori__x_0__x_0__simm12__, ok (0),</code><br>
<code>{ imm_0 = immop() },</code><br>
<code>,</code><br>
<code id=i_alu_i__opc_ori__x_0__xpr__simm12__>"ori" "x0"~"," "x0"~"," imm_0,</code><br>
<code>imm_0[11,0] 0b00000110000000010011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu_i(el:opc_ori, el:x_0, el:x_0, el:simm12)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_alu_i(opc = opc_ori, xpr_rd = x_0, xpr_rs1 = xpr, simm = simm12(val))</code><br>
<code>instr i_alu_i__opc_ori__x_0__xpr__simm12__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), imm_1 = immop() },</code><br>
<code>,</code><br>
<code id=i_alu_i__opc_ori__xpr__x_0__simm12__>"ori" "x0"~"," xpr_0~"," imm_1,</code><br>
<code>imm_1[11,0] xpr_0[4,0] 0b110000000010011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu_i(el:opc_ori, el:x_0, el:xpr, el:simm12)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_alu_i(opc = opc_ori, xpr_rd = xpr, xpr_rs1 = x_0, simm = simm12(val))</code><br>
<code>instr i_alu_i__opc_ori__xpr__x_0__simm12__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), imm_1 = immop() },</code><br>
<code>%4 = i32 immop(imm_1,1,12);</code><br>
<code>%5 = i1 -1;</code><br>
<code>regop(xpr_0) = %4;</code><br>
<code>,</code><br>
<code id=i_alu_i__opc_ori__xpr__xpr__simm12__>"ori" xpr_0~"," "x0"~"," imm_1,</code><br>
<code>imm_1[11,0] 0b00000110 xpr_0[4,0] 0b0010011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu_i(el:opc_ori, el:xpr, el:x_0, el:simm12)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_alu_i(opc = opc_ori, xpr_rd = xpr, xpr_rs1 = xpr, simm = simm12(val))</code><br>
<code>instr i_alu_i__opc_ori__xpr__xpr__simm12__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), xpr_1 = regop(xpr), imm_2 = immop() },</code><br>
<code>%5 = i32 regop(xpr_1);</code><br>
<code>%6 = i32 immop(imm_2,1,12);</code><br>
<code>%4 = or(%5,%6);</code><br>
<code>%7 = i1 -1;</code><br>
<code>regop(xpr_0) = %4;</code><br>
<code>,</code><br>
<code id=i_alu_i__opc_xori__x_0__x_0__simm12__>"ori" xpr_0~"," xpr_1~"," imm_2,</code><br>
<code>imm_2[11,0] xpr_1[4,0] 0b110 xpr_0[4,0] 0b0010011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu_i(el:opc_ori, el:xpr, el:xpr, el:simm12)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_alu_i(opc = opc_xori, xpr_rd = x_0, xpr_rs1 = x_0, simm = simm12(val))</code><br>
<code>instr i_alu_i__opc_xori__x_0__x_0__simm12__, ok (0),</code><br>
<code>{ imm_0 = immop() },</code><br>
<code>,</code><br>
<code id=i_alu_i__opc_xori__x_0__xpr__simm12__>"xori" "x0"~"," "x0"~"," imm_0,</code><br>
<code>imm_0[11,0] 0b00000100000000010011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu_i(el:opc_xori, el:x_0, el:x_0, el:simm12)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_alu_i(opc = opc_xori, xpr_rd = x_0, xpr_rs1 = xpr, simm = simm12(val))</code><br>
<code>instr i_alu_i__opc_xori__x_0__xpr__simm12__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), imm_1 = immop() },</code><br>
<code>,</code><br>
<code id=i_alu_i__opc_xori__xpr__x_0__simm12__>"xori" "x0"~"," xpr_0~"," imm_1,</code><br>
<code>imm_1[11,0] xpr_0[4,0] 0b100000000010011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu_i(el:opc_xori, el:x_0, el:xpr, el:simm12)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_alu_i(opc = opc_xori, xpr_rd = xpr, xpr_rs1 = x_0, simm = simm12(val))</code><br>
<code>instr i_alu_i__opc_xori__xpr__x_0__simm12__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), imm_1 = immop() },</code><br>
<code>%4 = i32 immop(imm_1,1,12);</code><br>
<code>%5 = i1 -1;</code><br>
<code>regop(xpr_0) = %4;</code><br>
<code>,</code><br>
<code id=i_alu_i__opc_xori__xpr__xpr__simm12__>"xori" xpr_0~"," "x0"~"," imm_1,</code><br>
<code>imm_1[11,0] 0b00000100 xpr_0[4,0] 0b0010011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu_i(el:opc_xori, el:xpr, el:x_0, el:simm12)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_alu_i(opc = opc_xori, xpr_rd = xpr, xpr_rs1 = xpr, simm = simm12(val))</code><br>
<code>instr i_alu_i__opc_xori__xpr__xpr__simm12__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), xpr_1 = regop(xpr), imm_2 = immop() },</code><br>
<code>%5 = i32 regop(xpr_1);</code><br>
<code>%6 = i32 immop(imm_2,1,12);</code><br>
<code>%4 = xor(%5,%6);</code><br>
<code>%7 = i1 -1;</code><br>
<code>regop(xpr_0) = %4;</code><br>
<code>,</code><br>
<code id=i_branch__opc_beq__x_0__x_0__rel_addr12__>"xori" xpr_0~"," xpr_1~"," imm_2,</code><br>
<code>imm_2[11,0] xpr_1[4,0] 0b100 xpr_0[4,0] 0b0010011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu_i(el:opc_xori, el:xpr, el:xpr, el:simm12)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_branch(opc = opc_beq, xpr_rs1 = x_0, xpr_rs2 = x_0, rel_addr = rel_addr12(val))</code><br>
<code>instr i_branch__opc_beq__x_0__x_0__rel_addr12__, ok (0),</code><br>
<code>{ imm_0 = immop() },</code><br>
<code>%6 = i32 getcurrpc();</code><br>
<code>%8 = i32 immop(imm_0,1,13);</code><br>
<code>%9 = i32 -2;</code><br>
<code>%7 = and(%8,%9);</code><br>
<code>%5 = add(%6,%7);</code><br>
<code>%10 = i32 -4;</code><br>
<code>%4 = add(%5,%10);</code><br>
<code>%11 = i1 -1;</code><br>
<code>brc(%4,%11);</code><br>
<code>,</code><br>
<code id=i_branch__opc_beq__x_0__xpr__rel_addr12__>"beq" "x0"~"," "x0"~"," imm_0,</code><br>
<code>imm_0[11] imm_0[9,4] 0b0000000000000 imm_0[3,0] imm_0[10] 0b1100011 ,</code><br>
<code>"",</code><br>
<code>"el:i_branch(el:opc_beq, el:x_0, el:x_0, el:rel_addr12)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_branch(opc = opc_beq, xpr_rs1 = x_0, xpr_rs2 = xpr, rel_addr = rel_addr12(val))</code><br>
<code>instr i_branch__opc_beq__x_0__xpr__rel_addr12__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), imm_1 = immop() },</code><br>
<code>%6 = i32 getcurrpc();</code><br>
<code>%8 = i32 immop(imm_1,1,13);</code><br>
<code>%9 = i32 -2;</code><br>
<code>%7 = and(%8,%9);</code><br>
<code>%5 = add(%6,%7);</code><br>
<code>%10 = i32 -4;</code><br>
<code>%4 = add(%5,%10);</code><br>
<code>%12 = i32 regop(xpr_0);</code><br>
<code>%13 = i32 0;</code><br>
<code>%11 = seteq(%12,%13);</code><br>
<code>brc(%4,%11);</code><br>
<code>,</code><br>
<code id=i_branch__opc_beq__xpr__x_0__rel_addr12__>"beq" "x0"~"," xpr_0~"," imm_1,</code><br>
<code>imm_1[11] imm_1[9,4] xpr_0[4,0] 0b00000000 imm_1[3,0] imm_1[10] 0b1100011 ,</code><br>
<code>"",</code><br>
<code>"el:i_branch(el:opc_beq, el:x_0, el:xpr, el:rel_addr12)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_branch(opc = opc_beq, xpr_rs1 = xpr, xpr_rs2 = x_0, rel_addr = rel_addr12(val))</code><br>
<code>instr i_branch__opc_beq__xpr__x_0__rel_addr12__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), imm_1 = immop() },</code><br>
<code>%6 = i32 getcurrpc();</code><br>
<code>%8 = i32 immop(imm_1,1,13);</code><br>
<code>%9 = i32 -2;</code><br>
<code>%7 = and(%8,%9);</code><br>
<code>%5 = add(%6,%7);</code><br>
<code>%10 = i32 -4;</code><br>
<code>%4 = add(%5,%10);</code><br>
<code>%12 = i32 regop(xpr_0);</code><br>
<code>%13 = i32 0;</code><br>
<code>%11 = seteq(%12,%13);</code><br>
<code>brc(%4,%11);</code><br>
<code>,</code><br>
<code id=i_branch__opc_beq__xpr__xpr__rel_addr12__>"beq" xpr_0~"," "x0"~"," imm_1,</code><br>
<code>imm_1[11] imm_1[9,4] 0b00000 xpr_0[4,0] 0b000 imm_1[3,0] imm_1[10] 0b1100011 ,</code><br>
<code>"",</code><br>
<code>"el:i_branch(el:opc_beq, el:xpr, el:x_0, el:rel_addr12)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_branch(opc = opc_beq, xpr_rs1 = xpr, xpr_rs2 = xpr, rel_addr = rel_addr12(val))</code><br>
<code>instr i_branch__opc_beq__xpr__xpr__rel_addr12__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), xpr_1 = regop(xpr), imm_2 = immop() },</code><br>
<code>%6 = i32 getcurrpc();</code><br>
<code>%8 = i32 immop(imm_2,1,13);</code><br>
<code>%9 = i32 -2;</code><br>
<code>%7 = and(%8,%9);</code><br>
<code>%5 = add(%6,%7);</code><br>
<code>%10 = i32 -4;</code><br>
<code>%4 = add(%5,%10);</code><br>
<code>%12 = i32 regop(xpr_0);</code><br>
<code>%13 = i32 regop(xpr_1);</code><br>
<code>%11 = seteq(%12,%13);</code><br>
<code>brc(%4,%11);</code><br>
<code>,</code><br>
<code id=i_branch__opc_bne__x_0__x_0__rel_addr12__>"beq" xpr_0~"," xpr_1~"," imm_2,</code><br>
<code>imm_2[11] imm_2[9,4] xpr_1[4,0] xpr_0[4,0] 0b000 imm_2[3,0] imm_2[10] 0b1100011 ,</code><br>
<code>"",</code><br>
<code>"el:i_branch(el:opc_beq, el:xpr, el:xpr, el:rel_addr12)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_branch(opc = opc_bne, xpr_rs1 = x_0, xpr_rs2 = x_0, rel_addr = rel_addr12(val))</code><br>
<code>instr i_branch__opc_bne__x_0__x_0__rel_addr12__, ok (0),</code><br>
<code>{ imm_0 = immop() },</code><br>
<code>,</code><br>
<code id=i_branch__opc_bne__x_0__xpr__rel_addr12__>"bne" "x0"~"," "x0"~"," imm_0,</code><br>
<code>imm_0[11] imm_0[9,4] 0b0000000000001 imm_0[3,0] imm_0[10] 0b1100011 ,</code><br>
<code>"",</code><br>
<code>"el:i_branch(el:opc_bne, el:x_0, el:x_0, el:rel_addr12)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_branch(opc = opc_bne, xpr_rs1 = x_0, xpr_rs2 = xpr, rel_addr = rel_addr12(val))</code><br>
<code>instr i_branch__opc_bne__x_0__xpr__rel_addr12__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), imm_1 = immop() },</code><br>
<code>%6 = i32 getcurrpc();</code><br>
<code>%8 = i32 immop(imm_1,1,13);</code><br>
<code>%9 = i32 -2;</code><br>
<code>%7 = and(%8,%9);</code><br>
<code>%5 = add(%6,%7);</code><br>
<code>%10 = i32 -4;</code><br>
<code>%4 = add(%5,%10);</code><br>
<code>%12 = i32 regop(xpr_0);</code><br>
<code>%13 = i32 0;</code><br>
<code>%11 = setne(%12,%13);</code><br>
<code>brc(%4,%11);</code><br>
<code>,</code><br>
<code id=i_branch__opc_bne__xpr__x_0__rel_addr12__>"bne" "x0"~"," xpr_0~"," imm_1,</code><br>
<code>imm_1[11] imm_1[9,4] xpr_0[4,0] 0b00000001 imm_1[3,0] imm_1[10] 0b1100011 ,</code><br>
<code>"",</code><br>
<code>"el:i_branch(el:opc_bne, el:x_0, el:xpr, el:rel_addr12)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_branch(opc = opc_bne, xpr_rs1 = xpr, xpr_rs2 = x_0, rel_addr = rel_addr12(val))</code><br>
<code>instr i_branch__opc_bne__xpr__x_0__rel_addr12__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), imm_1 = immop() },</code><br>
<code>%6 = i32 getcurrpc();</code><br>
<code>%8 = i32 immop(imm_1,1,13);</code><br>
<code>%9 = i32 -2;</code><br>
<code>%7 = and(%8,%9);</code><br>
<code>%5 = add(%6,%7);</code><br>
<code>%10 = i32 -4;</code><br>
<code>%4 = add(%5,%10);</code><br>
<code>%12 = i32 regop(xpr_0);</code><br>
<code>%13 = i32 0;</code><br>
<code>%11 = setne(%12,%13);</code><br>
<code>brc(%4,%11);</code><br>
<code>,</code><br>
<code id=i_branch__opc_bne__xpr__xpr__rel_addr12__>"bne" xpr_0~"," "x0"~"," imm_1,</code><br>
<code>imm_1[11] imm_1[9,4] 0b00000 xpr_0[4,0] 0b001 imm_1[3,0] imm_1[10] 0b1100011 ,</code><br>
<code>"",</code><br>
<code>"el:i_branch(el:opc_bne, el:xpr, el:x_0, el:rel_addr12)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_branch(opc = opc_bne, xpr_rs1 = xpr, xpr_rs2 = xpr, rel_addr = rel_addr12(val))</code><br>
<code>instr i_branch__opc_bne__xpr__xpr__rel_addr12__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), xpr_1 = regop(xpr), imm_2 = immop() },</code><br>
<code>%6 = i32 getcurrpc();</code><br>
<code>%8 = i32 immop(imm_2,1,13);</code><br>
<code>%9 = i32 -2;</code><br>
<code>%7 = and(%8,%9);</code><br>
<code>%5 = add(%6,%7);</code><br>
<code>%10 = i32 -4;</code><br>
<code>%4 = add(%5,%10);</code><br>
<code>%12 = i32 regop(xpr_0);</code><br>
<code>%13 = i32 regop(xpr_1);</code><br>
<code>%11 = setne(%12,%13);</code><br>
<code>brc(%4,%11);</code><br>
<code>,</code><br>
<code id=i_branch__opc_blt__x_0__x_0__rel_addr12__>"bne" xpr_0~"," xpr_1~"," imm_2,</code><br>
<code>imm_2[11] imm_2[9,4] xpr_1[4,0] xpr_0[4,0] 0b001 imm_2[3,0] imm_2[10] 0b1100011 ,</code><br>
<code>"",</code><br>
<code>"el:i_branch(el:opc_bne, el:xpr, el:xpr, el:rel_addr12)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_branch(opc = opc_blt, xpr_rs1 = x_0, xpr_rs2 = x_0, rel_addr = rel_addr12(val))</code><br>
<code>instr i_branch__opc_blt__x_0__x_0__rel_addr12__, ok (0),</code><br>
<code>{ imm_0 = immop() },</code><br>
<code>,</code><br>
<code id=i_branch__opc_blt__x_0__xpr__rel_addr12__>"blt" "x0"~"," "x0"~"," imm_0,</code><br>
<code>imm_0[11] imm_0[9,4] 0b0000000000100 imm_0[3,0] imm_0[10] 0b1100011 ,</code><br>
<code>"",</code><br>
<code>"el:i_branch(el:opc_blt, el:x_0, el:x_0, el:rel_addr12)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_branch(opc = opc_blt, xpr_rs1 = x_0, xpr_rs2 = xpr, rel_addr = rel_addr12(val))</code><br>
<code>instr i_branch__opc_blt__x_0__xpr__rel_addr12__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), imm_1 = immop() },</code><br>
<code>%6 = i32 getcurrpc();</code><br>
<code>%8 = i32 immop(imm_1,1,13);</code><br>
<code>%9 = i32 -2;</code><br>
<code>%7 = and(%8,%9);</code><br>
<code>%5 = add(%6,%7);</code><br>
<code>%10 = i32 -4;</code><br>
<code>%4 = add(%5,%10);</code><br>
<code>%12 = i32 regop(xpr_0);</code><br>
<code>%13 = i32 0;</code><br>
<code>%11 = setgt(%12,%13);</code><br>
<code>brc(%4,%11);</code><br>
<code>,</code><br>
<code id=i_branch__opc_blt__xpr__x_0__rel_addr12__>"blt" "x0"~"," xpr_0~"," imm_1,</code><br>
<code>imm_1[11] imm_1[9,4] xpr_0[4,0] 0b00000100 imm_1[3,0] imm_1[10] 0b1100011 ,</code><br>
<code>"",</code><br>
<code>"el:i_branch(el:opc_blt, el:x_0, el:xpr, el:rel_addr12)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_branch(opc = opc_blt, xpr_rs1 = xpr, xpr_rs2 = x_0, rel_addr = rel_addr12(val))</code><br>
<code>instr i_branch__opc_blt__xpr__x_0__rel_addr12__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), imm_1 = immop() },</code><br>
<code>%6 = i32 getcurrpc();</code><br>
<code>%8 = i32 immop(imm_1,1,13);</code><br>
<code>%9 = i32 -2;</code><br>
<code>%7 = and(%8,%9);</code><br>
<code>%5 = add(%6,%7);</code><br>
<code>%10 = i32 -4;</code><br>
<code>%4 = add(%5,%10);</code><br>
<code>%12 = i32 regop(xpr_0);</code><br>
<code>%13 = i32 0;</code><br>
<code>%11 = setlt(%12,%13);</code><br>
<code>brc(%4,%11);</code><br>
<code>,</code><br>
<code id=i_branch__opc_blt__xpr__xpr__rel_addr12__>"blt" xpr_0~"," "x0"~"," imm_1,</code><br>
<code>imm_1[11] imm_1[9,4] 0b00000 xpr_0[4,0] 0b100 imm_1[3,0] imm_1[10] 0b1100011 ,</code><br>
<code>"",</code><br>
<code>"el:i_branch(el:opc_blt, el:xpr, el:x_0, el:rel_addr12)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_branch(opc = opc_blt, xpr_rs1 = xpr, xpr_rs2 = xpr, rel_addr = rel_addr12(val))</code><br>
<code>instr i_branch__opc_blt__xpr__xpr__rel_addr12__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), xpr_1 = regop(xpr), imm_2 = immop() },</code><br>
<code>%6 = i32 getcurrpc();</code><br>
<code>%8 = i32 immop(imm_2,1,13);</code><br>
<code>%9 = i32 -2;</code><br>
<code>%7 = and(%8,%9);</code><br>
<code>%5 = add(%6,%7);</code><br>
<code>%10 = i32 -4;</code><br>
<code>%4 = add(%5,%10);</code><br>
<code>%12 = i32 regop(xpr_0);</code><br>
<code>%13 = i32 regop(xpr_1);</code><br>
<code>%11 = setlt(%12,%13);</code><br>
<code>brc(%4,%11);</code><br>
<code>,</code><br>
<code id=i_branch__opc_bltu__x_0__x_0__rel_addr12__>"blt" xpr_0~"," xpr_1~"," imm_2,</code><br>
<code>imm_2[11] imm_2[9,4] xpr_1[4,0] xpr_0[4,0] 0b100 imm_2[3,0] imm_2[10] 0b1100011 ,</code><br>
<code>"",</code><br>
<code>"el:i_branch(el:opc_blt, el:xpr, el:xpr, el:rel_addr12)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_branch(opc = opc_bltu, xpr_rs1 = x_0, xpr_rs2 = x_0, rel_addr = rel_addr12(val))</code><br>
<code>instr i_branch__opc_bltu__x_0__x_0__rel_addr12__, ok (0),</code><br>
<code>{ imm_0 = immop() },</code><br>
<code>,</code><br>
<code id=i_branch__opc_bltu__x_0__xpr__rel_addr12__>"bltu" "x0"~"," "x0"~"," imm_0,</code><br>
<code>imm_0[11] imm_0[9,4] 0b0000000000110 imm_0[3,0] imm_0[10] 0b1100011 ,</code><br>
<code>"",</code><br>
<code>"el:i_branch(el:opc_bltu, el:x_0, el:x_0, el:rel_addr12)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_branch(opc = opc_bltu, xpr_rs1 = x_0, xpr_rs2 = xpr, rel_addr = rel_addr12(val))</code><br>
<code>instr i_branch__opc_bltu__x_0__xpr__rel_addr12__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), imm_1 = immop() },</code><br>
<code>%6 = i32 getcurrpc();</code><br>
<code>%8 = i32 immop(imm_1,1,13);</code><br>
<code>%9 = i32 -2;</code><br>
<code>%7 = and(%8,%9);</code><br>
<code>%5 = add(%6,%7);</code><br>
<code>%10 = i32 -4;</code><br>
<code>%4 = add(%5,%10);</code><br>
<code>%12 = i32 regop(xpr_0);</code><br>
<code>%13 = i32 0;</code><br>
<code>%11 = setne(%12,%13);</code><br>
<code>brc(%4,%11);</code><br>
<code>,</code><br>
<code id=i_branch__opc_bltu__xpr__x_0__rel_addr12__>"bltu" "x0"~"," xpr_0~"," imm_1,</code><br>
<code>imm_1[11] imm_1[9,4] xpr_0[4,0] 0b00000110 imm_1[3,0] imm_1[10] 0b1100011 ,</code><br>
<code>"",</code><br>
<code>"el:i_branch(el:opc_bltu, el:x_0, el:xpr, el:rel_addr12)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_branch(opc = opc_bltu, xpr_rs1 = xpr, xpr_rs2 = x_0, rel_addr = rel_addr12(val))</code><br>
<code>instr i_branch__opc_bltu__xpr__x_0__rel_addr12__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), imm_1 = immop() },</code><br>
<code>,</code><br>
<code id=i_branch__opc_bltu__xpr__xpr__rel_addr12__>"bltu" xpr_0~"," "x0"~"," imm_1,</code><br>
<code>imm_1[11] imm_1[9,4] 0b00000 xpr_0[4,0] 0b110 imm_1[3,0] imm_1[10] 0b1100011 ,</code><br>
<code>"",</code><br>
<code>"el:i_branch(el:opc_bltu, el:xpr, el:x_0, el:rel_addr12)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_branch(opc = opc_bltu, xpr_rs1 = xpr, xpr_rs2 = xpr, rel_addr = rel_addr12(val))</code><br>
<code>instr i_branch__opc_bltu__xpr__xpr__rel_addr12__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), xpr_1 = regop(xpr), imm_2 = immop() },</code><br>
<code>%6 = i32 getcurrpc();</code><br>
<code>%8 = i32 immop(imm_2,1,13);</code><br>
<code>%9 = i32 -2;</code><br>
<code>%7 = and(%8,%9);</code><br>
<code>%5 = add(%6,%7);</code><br>
<code>%10 = i32 -4;</code><br>
<code>%4 = add(%5,%10);</code><br>
<code>%12 = i32 regop(xpr_0);</code><br>
<code>%13 = i32 regop(xpr_1);</code><br>
<code>%11 = setult(%12,%13);</code><br>
<code>brc(%4,%11);</code><br>
<code>,</code><br>
<code id=i_branch__opc_bge__x_0__x_0__rel_addr12__>"bltu" xpr_0~"," xpr_1~"," imm_2,</code><br>
<code>imm_2[11] imm_2[9,4] xpr_1[4,0] xpr_0[4,0] 0b110 imm_2[3,0] imm_2[10] 0b1100011 ,</code><br>
<code>"",</code><br>
<code>"el:i_branch(el:opc_bltu, el:xpr, el:xpr, el:rel_addr12)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_branch(opc = opc_bge, xpr_rs1 = x_0, xpr_rs2 = x_0, rel_addr = rel_addr12(val))</code><br>
<code>instr i_branch__opc_bge__x_0__x_0__rel_addr12__, ok (0),</code><br>
<code>{ imm_0 = immop() },</code><br>
<code>%6 = i32 getcurrpc();</code><br>
<code>%8 = i32 immop(imm_0,1,13);</code><br>
<code>%9 = i32 -2;</code><br>
<code>%7 = and(%8,%9);</code><br>
<code>%5 = add(%6,%7);</code><br>
<code>%10 = i32 -4;</code><br>
<code>%4 = add(%5,%10);</code><br>
<code>%11 = i1 -1;</code><br>
<code>brc(%4,%11);</code><br>
<code>,</code><br>
<code id=i_branch__opc_bge__x_0__xpr__rel_addr12__>"bge" "x0"~"," "x0"~"," imm_0,</code><br>
<code>imm_0[11] imm_0[9,4] 0b0000000000101 imm_0[3,0] imm_0[10] 0b1100011 ,</code><br>
<code>"",</code><br>
<code>"el:i_branch(el:opc_bge, el:x_0, el:x_0, el:rel_addr12)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_branch(opc = opc_bge, xpr_rs1 = x_0, xpr_rs2 = xpr, rel_addr = rel_addr12(val))</code><br>
<code>instr i_branch__opc_bge__x_0__xpr__rel_addr12__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), imm_1 = immop() },</code><br>
<code>%6 = i32 getcurrpc();</code><br>
<code>%8 = i32 immop(imm_1,1,13);</code><br>
<code>%9 = i32 -2;</code><br>
<code>%7 = and(%8,%9);</code><br>
<code>%5 = add(%6,%7);</code><br>
<code>%10 = i32 -4;</code><br>
<code>%4 = add(%5,%10);</code><br>
<code>%12 = i32 regop(xpr_0);</code><br>
<code>%13 = i32 1;</code><br>
<code>%11 = setlt(%12,%13);</code><br>
<code>brc(%4,%11);</code><br>
<code>,</code><br>
<code id=i_branch__opc_bge__xpr__x_0__rel_addr12__>"bge" "x0"~"," xpr_0~"," imm_1,</code><br>
<code>imm_1[11] imm_1[9,4] xpr_0[4,0] 0b00000101 imm_1[3,0] imm_1[10] 0b1100011 ,</code><br>
<code>"",</code><br>
<code>"el:i_branch(el:opc_bge, el:x_0, el:xpr, el:rel_addr12)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_branch(opc = opc_bge, xpr_rs1 = xpr, xpr_rs2 = x_0, rel_addr = rel_addr12(val))</code><br>
<code>instr i_branch__opc_bge__xpr__x_0__rel_addr12__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), imm_1 = immop() },</code><br>
<code>%6 = i32 getcurrpc();</code><br>
<code>%8 = i32 immop(imm_1,1,13);</code><br>
<code>%9 = i32 -2;</code><br>
<code>%7 = and(%8,%9);</code><br>
<code>%5 = add(%6,%7);</code><br>
<code>%10 = i32 -4;</code><br>
<code>%4 = add(%5,%10);</code><br>
<code>%12 = i32 regop(xpr_0);</code><br>
<code>%13 = i32 -1;</code><br>
<code>%11 = setgt(%12,%13);</code><br>
<code>brc(%4,%11);</code><br>
<code>,</code><br>
<code id=i_branch__opc_bge__xpr__xpr__rel_addr12__>"bge" xpr_0~"," "x0"~"," imm_1,</code><br>
<code>imm_1[11] imm_1[9,4] 0b00000 xpr_0[4,0] 0b101 imm_1[3,0] imm_1[10] 0b1100011 ,</code><br>
<code>"",</code><br>
<code>"el:i_branch(el:opc_bge, el:xpr, el:x_0, el:rel_addr12)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_branch(opc = opc_bge, xpr_rs1 = xpr, xpr_rs2 = xpr, rel_addr = rel_addr12(val))</code><br>
<code>instr i_branch__opc_bge__xpr__xpr__rel_addr12__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), xpr_1 = regop(xpr), imm_2 = immop() },</code><br>
<code>%6 = i32 getcurrpc();</code><br>
<code>%8 = i32 immop(imm_2,1,13);</code><br>
<code>%9 = i32 -2;</code><br>
<code>%7 = and(%8,%9);</code><br>
<code>%5 = add(%6,%7);</code><br>
<code>%10 = i32 -4;</code><br>
<code>%4 = add(%5,%10);</code><br>
<code>%12 = i32 regop(xpr_0);</code><br>
<code>%13 = i32 regop(xpr_1);</code><br>
<code>%11 = setge(%12,%13);</code><br>
<code>brc(%4,%11);</code><br>
<code>,</code><br>
<code id=i_branch__opc_bgeu__x_0__x_0__rel_addr12__>"bge" xpr_0~"," xpr_1~"," imm_2,</code><br>
<code>imm_2[11] imm_2[9,4] xpr_1[4,0] xpr_0[4,0] 0b101 imm_2[3,0] imm_2[10] 0b1100011 ,</code><br>
<code>"",</code><br>
<code>"el:i_branch(el:opc_bge, el:xpr, el:xpr, el:rel_addr12)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_branch(opc = opc_bgeu, xpr_rs1 = x_0, xpr_rs2 = x_0, rel_addr = rel_addr12(val))</code><br>
<code>instr i_branch__opc_bgeu__x_0__x_0__rel_addr12__, ok (0),</code><br>
<code>{ imm_0 = immop() },</code><br>
<code>%6 = i32 getcurrpc();</code><br>
<code>%8 = i32 immop(imm_0,1,13);</code><br>
<code>%9 = i32 -2;</code><br>
<code>%7 = and(%8,%9);</code><br>
<code>%5 = add(%6,%7);</code><br>
<code>%10 = i32 -4;</code><br>
<code>%4 = add(%5,%10);</code><br>
<code>%11 = i1 -1;</code><br>
<code>brc(%4,%11);</code><br>
<code>,</code><br>
<code id=i_branch__opc_bgeu__x_0__xpr__rel_addr12__>"bgeu" "x0"~"," "x0"~"," imm_0,</code><br>
<code>imm_0[11] imm_0[9,4] 0b0000000000111 imm_0[3,0] imm_0[10] 0b1100011 ,</code><br>
<code>"",</code><br>
<code>"el:i_branch(el:opc_bgeu, el:x_0, el:x_0, el:rel_addr12)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_branch(opc = opc_bgeu, xpr_rs1 = x_0, xpr_rs2 = xpr, rel_addr = rel_addr12(val))</code><br>
<code>instr i_branch__opc_bgeu__x_0__xpr__rel_addr12__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), imm_1 = immop() },</code><br>
<code>%6 = i32 getcurrpc();</code><br>
<code>%8 = i32 immop(imm_1,1,13);</code><br>
<code>%9 = i32 -2;</code><br>
<code>%7 = and(%8,%9);</code><br>
<code>%5 = add(%6,%7);</code><br>
<code>%10 = i32 -4;</code><br>
<code>%4 = add(%5,%10);</code><br>
<code>%12 = i32 regop(xpr_0);</code><br>
<code>%13 = i32 0;</code><br>
<code>%11 = seteq(%12,%13);</code><br>
<code>brc(%4,%11);</code><br>
<code>,</code><br>
<code id=i_branch__opc_bgeu__xpr__x_0__rel_addr12__>"bgeu" "x0"~"," xpr_0~"," imm_1,</code><br>
<code>imm_1[11] imm_1[9,4] xpr_0[4,0] 0b00000111 imm_1[3,0] imm_1[10] 0b1100011 ,</code><br>
<code>"",</code><br>
<code>"el:i_branch(el:opc_bgeu, el:x_0, el:xpr, el:rel_addr12)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_branch(opc = opc_bgeu, xpr_rs1 = xpr, xpr_rs2 = x_0, rel_addr = rel_addr12(val))</code><br>
<code>instr i_branch__opc_bgeu__xpr__x_0__rel_addr12__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), imm_1 = immop() },</code><br>
<code>%6 = i32 getcurrpc();</code><br>
<code>%8 = i32 immop(imm_1,1,13);</code><br>
<code>%9 = i32 -2;</code><br>
<code>%7 = and(%8,%9);</code><br>
<code>%5 = add(%6,%7);</code><br>
<code>%10 = i32 -4;</code><br>
<code>%4 = add(%5,%10);</code><br>
<code>%11 = i1 -1;</code><br>
<code>brc(%4,%11);</code><br>
<code>,</code><br>
<code id=i_branch__opc_bgeu__xpr__xpr__rel_addr12__>"bgeu" xpr_0~"," "x0"~"," imm_1,</code><br>
<code>imm_1[11] imm_1[9,4] 0b00000 xpr_0[4,0] 0b111 imm_1[3,0] imm_1[10] 0b1100011 ,</code><br>
<code>"",</code><br>
<code>"el:i_branch(el:opc_bgeu, el:xpr, el:x_0, el:rel_addr12)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_branch(opc = opc_bgeu, xpr_rs1 = xpr, xpr_rs2 = xpr, rel_addr = rel_addr12(val))</code><br>
<code>instr i_branch__opc_bgeu__xpr__xpr__rel_addr12__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), xpr_1 = regop(xpr), imm_2 = immop() },</code><br>
<code>%6 = i32 getcurrpc();</code><br>
<code>%8 = i32 immop(imm_2,1,13);</code><br>
<code>%9 = i32 -2;</code><br>
<code>%7 = and(%8,%9);</code><br>
<code>%5 = add(%6,%7);</code><br>
<code>%10 = i32 -4;</code><br>
<code>%4 = add(%5,%10);</code><br>
<code>%12 = i32 regop(xpr_0);</code><br>
<code>%13 = i32 regop(xpr_1);</code><br>
<code>%11 = setuge(%12,%13);</code><br>
<code>brc(%4,%11);</code><br>
<code>,</code><br>
<code id=i_jal__opc_jal__x_0__rel_addr20__>"bgeu" xpr_0~"," xpr_1~"," imm_2,</code><br>
<code>imm_2[11] imm_2[9,4] xpr_1[4,0] xpr_0[4,0] 0b111 imm_2[3,0] imm_2[10] 0b1100011 ,</code><br>
<code>"",</code><br>
<code>"el:i_branch(el:opc_bgeu, el:xpr, el:xpr, el:rel_addr12)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_jal(opc = opc_jal, xpr_rd = x_0, rel_addr = rel_addr20(val))</code><br>
<code>instr i_jal__opc_jal__x_0__rel_addr20__, ok (0),</code><br>
<code>{ imm_0 = immop() },</code><br>
<code>%6 = i32 getcurrpc();</code><br>
<code>%8 = i32 immop(imm_0,1,21);</code><br>
<code>%9 = i32 -2;</code><br>
<code>%7 = and(%8,%9);</code><br>
<code>%5 = add(%6,%7);</code><br>
<code>%10 = i32 -4;</code><br>
<code>%4 = add(%5,%10);</code><br>
<code>%11 = i1 -1;</code><br>
<code>brc(%4,%11);</code><br>
<code>,</code><br>
<code id=i_jal__opc_jal__xpr__rel_addr20__>"jal" "x0"~"," imm_0,</code><br>
<code>imm_0[19] imm_0[9,0] imm_0[10] imm_0[18,11] 0b000001101111 ,</code><br>
<code>"",</code><br>
<code>"el:i_jal(el:opc_jal, el:x_0, el:rel_addr20)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_jal(opc = opc_jal, xpr_rd = xpr, rel_addr = rel_addr20(val))</code><br>
<code>instr i_jal__opc_jal__xpr__rel_addr20__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), imm_1 = immop() },</code><br>
<code>%5 = i32 getcurrpc();</code><br>
<code>%6 = i1 -1;</code><br>
<code>regop(xpr_0) = %5;</code><br>
<code>%10 = i32 immop(imm_1,1,21);</code><br>
<code>%11 = i32 -2;</code><br>
<code>%9 = and(%10,%11);</code><br>
<code>%8 = add(%5,%9);</code><br>
<code>%12 = i32 -4;</code><br>
<code>%7 = add(%8,%12);</code><br>
<code>brc(%7,%6);</code><br>
<code>,</code><br>
<code id=i_jalr__opc_jalr__x_0__rel_jalr_addr12__x_0__>"jal" xpr_0~"," imm_1,</code><br>
<code>imm_1[19] imm_1[9,0] imm_1[10] imm_1[18,11] xpr_0[4,0] 0b1101111 ,</code><br>
<code>"",</code><br>
<code>"el:i_jal(el:opc_jal, el:xpr, el:rel_addr20)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_jalr(opc = opc_jalr, xpr_rd = x_0, rel_addr = rel_jalr_addr12(val), xpr_rs1 = x_0)</code><br>
<code>instr i_jalr__opc_jalr__x_0__rel_jalr_addr12__x_0__, ok (0),</code><br>
<code>{ imm_0 = immop() },</code><br>
<code>%4 = i32 immop(imm_0,1,12);</code><br>
<code>%5 = i1 -1;</code><br>
<code>brc(%4,%5);</code><br>
<code>,</code><br>
<code id=i_jalr__opc_jalr__x_0__rel_jalr_addr12__xpr__>"jalr" "x0"~"," imm_0 "(" "x0" ")",</code><br>
<code>imm_0[11,0] 0b00000000000001100111 ,</code><br>
<code>"",</code><br>
<code>"el:i_jalr(el:opc_jalr, el:x_0, el:rel_jalr_addr12, el:x_0)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_jalr(opc = opc_jalr, xpr_rd = x_0, rel_addr = rel_jalr_addr12(val), xpr_rs1 = xpr)</code><br>
<code>instr i_jalr__opc_jalr__x_0__rel_jalr_addr12__xpr__, ok (0),</code><br>
<code>{ imm_0 = immop(), xpr_1 = regop(xpr) },</code><br>
<code>%5 = i32 regop(xpr_1);</code><br>
<code>%6 = i32 immop(imm_0,1,12);</code><br>
<code>%4 = add(%5,%6);</code><br>
<code>%7 = i1 -1;</code><br>
<code>brc(%4,%7);</code><br>
<code>,</code><br>
<code id=i_jalr__opc_jalr__xpr__rel_jalr_addr12__x_0__>"jalr" "x0"~"," imm_0 "(" xpr_1 ")",</code><br>
<code>imm_0[11,0] xpr_1[4,0] 0b000000001100111 ,</code><br>
<code>"",</code><br>
<code>"el:i_jalr(el:opc_jalr, el:x_0, el:rel_jalr_addr12, el:xpr)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_jalr(opc = opc_jalr, xpr_rd = xpr, rel_addr = rel_jalr_addr12(val), xpr_rs1 = x_0)</code><br>
<code>instr i_jalr__opc_jalr__xpr__rel_jalr_addr12__x_0__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), imm_1 = immop() },</code><br>
<code>%5 = i32 getcurrpc();</code><br>
<code>%6 = i1 -1;</code><br>
<code>regop(xpr_0) = %5;</code><br>
<code>%7 = i32 immop(imm_1,1,12);</code><br>
<code>brc(%7,%6);</code><br>
<code>,</code><br>
<code id=i_jalr__opc_jalr__xpr__rel_jalr_addr12__xpr__>"jalr" xpr_0~"," imm_1 "(" "x0" ")",</code><br>
<code>imm_1[11,0] 0b00000000 xpr_0[4,0] 0b1100111 ,</code><br>
<code>"",</code><br>
<code>"el:i_jalr(el:opc_jalr, el:xpr, el:rel_jalr_addr12, el:x_0)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_jalr(opc = opc_jalr, xpr_rd = xpr, rel_addr = rel_jalr_addr12(val), xpr_rs1 = xpr)</code><br>
<code>instr i_jalr__opc_jalr__xpr__rel_jalr_addr12__xpr__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), imm_1 = immop(), xpr_2 = regop(xpr) },</code><br>
<code>%5 = i32 getcurrpc();</code><br>
<code>%6 = i1 -1;</code><br>
<code>regop(xpr_0) = %5;</code><br>
<code>%8 = i32 regop(xpr_2);</code><br>
<code>%9 = i32 immop(imm_1,1,12);</code><br>
<code>%7 = add(%8,%9);</code><br>
<code>brc(%7,%6);</code><br>
<code>,</code><br>
<code id=i_upper_imm__opc_lui__x_0__simm20__>"jalr" xpr_0~"," imm_1 "(" xpr_2 ")",</code><br>
<code>imm_1[11,0] xpr_2[4,0] 0b000 xpr_0[4,0] 0b1100111 ,</code><br>
<code>"",</code><br>
<code>"el:i_jalr(el:opc_jalr, el:xpr, el:rel_jalr_addr12, el:xpr)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_upper_imm(opc = opc_lui, xpr_rd = x_0, simm = simm20(val))</code><br>
<code>instr i_upper_imm__opc_lui__x_0__simm20__, ok (0),</code><br>
<code>{ imm_0 = immop() },</code><br>
<code>,</code><br>
<code id=i_upper_imm__opc_lui__xpr__simm20__>"lui" "x0"~"," imm_0,</code><br>
<code>imm_0[19,0] 0b000000110111 ,</code><br>
<code>"",</code><br>
<code>"el:i_upper_imm(el:opc_lui, el:x_0, el:simm20)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_upper_imm(opc = opc_lui, xpr_rd = xpr, simm = simm20(val))</code><br>
<code>instr i_upper_imm__opc_lui__xpr__simm20__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), imm_1 = immop() },</code><br>
<code>%5 = i32 immop(imm_1,0,20);</code><br>
<code>%6 = i32 12;</code><br>
<code>%4 = shl(%5,%6);</code><br>
<code>%7 = i1 -1;</code><br>
<code>regop(xpr_0) = %4;</code><br>
<code>,</code><br>
<code id=i_upper_imm__opc_auipc__x_0__simm20__>"lui" xpr_0~"," imm_1,</code><br>
<code>imm_1[19,0] xpr_0[4,0] 0b0110111 ,</code><br>
<code>"",</code><br>
<code>"el:i_upper_imm(el:opc_lui, el:xpr, el:simm20)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_upper_imm(opc = opc_auipc, xpr_rd = x_0, simm = simm20(val))</code><br>
<code>instr i_upper_imm__opc_auipc__x_0__simm20__, ok (0),</code><br>
<code>{ imm_0 = immop() },</code><br>
<code>,</code><br>
<code id=i_upper_imm__opc_auipc__xpr__simm20__>"auipc" "x0"~"," imm_0,</code><br>
<code>imm_0[19,0] 0b000000010111 ,</code><br>
<code>"",</code><br>
<code>"el:i_upper_imm(el:opc_auipc, el:x_0, el:simm20)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_upper_imm(opc = opc_auipc, xpr_rd = xpr, simm = simm20(val))</code><br>
<code>instr i_upper_imm__opc_auipc__xpr__simm20__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), imm_1 = immop() },</code><br>
<code>%6 = i32 getcurrpc();</code><br>
<code>%8 = i32 immop(imm_1,0,20);</code><br>
<code>%9 = i32 12;</code><br>
<code>%7 = shl(%8,%9);</code><br>
<code>%5 = add(%6,%7);</code><br>
<code>%10 = i32 -4;</code><br>
<code>%4 = add(%5,%10);</code><br>
<code>%11 = i1 -1;</code><br>
<code>regop(xpr_0) = %4;</code><br>
<code>,</code><br>
<code id=i_load__opc_lb__x_0__simm12__x_0__>"auipc" xpr_0~"," imm_1,</code><br>
<code>imm_1[19,0] xpr_0[4,0] 0b0010111 ,</code><br>
<code>"",</code><br>
<code>"el:i_upper_imm(el:opc_auipc, el:xpr, el:simm20)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_load(opc = opc_lb, xpr_rd = x_0, simm = simm12(val), xpr_rs1 = x_0)</code><br>
<code>instr i_load__opc_lb__x_0__simm12__x_0__, ok (0),</code><br>
<code>{ imm_0 = immop() },</code><br>
<code>%4 = i32 immop(imm_0,1,12);</code><br>
<code>%2 = load(i8, %4, 0);</code><br>
<code>,</code><br>
<code id=i_load__opc_lb__x_0__simm12__xpr__>"lb" "x0"~"," imm_0 "(" "x0" ")",</code><br>
<code>imm_0[11,0] 0b00000000000000000011 ,</code><br>
<code>"",</code><br>
<code>"el:i_load(el:opc_lb, el:x_0, el:simm12, el:x_0)",</code><br>
<code>"sc_load"</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_load(opc = opc_lb, xpr_rd = x_0, simm = simm12(val), xpr_rs1 = xpr)</code><br>
<code>instr i_load__opc_lb__x_0__simm12__xpr__, ok (0),</code><br>
<code>{ imm_0 = immop(), xpr_1 = regop(xpr) },</code><br>
<code>%5 = i32 regop(xpr_1);</code><br>
<code>%6 = i32 immop(imm_0,1,12);</code><br>
<code>%4 = add(%5,%6);</code><br>
<code>%2 = load(i8, %4, 0);</code><br>
<code>,</code><br>
<code id=i_load__opc_lb__xpr__simm12__x_0__>"lb" "x0"~"," imm_0 "(" xpr_1 ")",</code><br>
<code>imm_0[11,0] xpr_1[4,0] 0b000000000000011 ,</code><br>
<code>"",</code><br>
<code>"el:i_load(el:opc_lb, el:x_0, el:simm12, el:xpr)",</code><br>
<code>"sc_load"</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_load(opc = opc_lb, xpr_rd = xpr, simm = simm12(val), xpr_rs1 = x_0)</code><br>
<code>instr i_load__opc_lb__xpr__simm12__x_0__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), imm_1 = immop() },</code><br>
<code>%5 = i32 immop(imm_1,1,12);</code><br>
<code>%3 = load(i8, %5, 0);</code><br>
<code>%6 = i32 sign_extend(%3);</code><br>
<code>%7 = i1 -1;</code><br>
<code>regop(xpr_0) = %6;</code><br>
<code>,</code><br>
<code id=i_load__opc_lb__xpr__simm12__xpr__>"lb" xpr_0~"," imm_1 "(" "x0" ")",</code><br>
<code>imm_1[11,0] 0b00000000 xpr_0[4,0] 0b0000011 ,</code><br>
<code>"",</code><br>
<code>"el:i_load(el:opc_lb, el:xpr, el:simm12, el:x_0)",</code><br>
<code>"sc_load"</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_load(opc = opc_lb, xpr_rd = xpr, simm = simm12(val), xpr_rs1 = xpr)</code><br>
<code>instr i_load__opc_lb__xpr__simm12__xpr__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), imm_1 = immop(), xpr_2 = regop(xpr) },</code><br>
<code>%6 = i32 regop(xpr_2);</code><br>
<code>%7 = i32 immop(imm_1,1,12);</code><br>
<code>%5 = add(%6,%7);</code><br>
<code>%3 = load(i8, %5, 0);</code><br>
<code>%8 = i32 sign_extend(%3);</code><br>
<code>%9 = i1 -1;</code><br>
<code>regop(xpr_0) = %8;</code><br>
<code>,</code><br>
<code id=i_load__opc_lh__x_0__simm12__x_0__>"lb" xpr_0~"," imm_1 "(" xpr_2 ")",</code><br>
<code>imm_1[11,0] xpr_2[4,0] 0b000 xpr_0[4,0] 0b0000011 ,</code><br>
<code>"",</code><br>
<code>"el:i_load(el:opc_lb, el:xpr, el:simm12, el:xpr)",</code><br>
<code>"sc_load"</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_load(opc = opc_lh, xpr_rd = x_0, simm = simm12(val), xpr_rs1 = x_0)</code><br>
<code>instr i_load__opc_lh__x_0__simm12__x_0__, ok (0),</code><br>
<code>{ imm_0 = immop() },</code><br>
<code>%4 = i32 immop(imm_0,1,12);</code><br>
<code>%2 = load(i16, %4, 0);</code><br>
<code>,</code><br>
<code id=i_load__opc_lh__x_0__simm12__xpr__>"lh" "x0"~"," imm_0 "(" "x0" ")",</code><br>
<code>imm_0[11,0] 0b00000001000000000011 ,</code><br>
<code>"",</code><br>
<code>"el:i_load(el:opc_lh, el:x_0, el:simm12, el:x_0)",</code><br>
<code>"sc_load"</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_load(opc = opc_lh, xpr_rd = x_0, simm = simm12(val), xpr_rs1 = xpr)</code><br>
<code>instr i_load__opc_lh__x_0__simm12__xpr__, ok (0),</code><br>
<code>{ imm_0 = immop(), xpr_1 = regop(xpr) },</code><br>
<code>%5 = i32 regop(xpr_1);</code><br>
<code>%6 = i32 immop(imm_0,1,12);</code><br>
<code>%4 = add(%5,%6);</code><br>
<code>%2 = load(i16, %4, 0);</code><br>
<code>,</code><br>
<code id=i_load__opc_lh__xpr__simm12__x_0__>"lh" "x0"~"," imm_0 "(" xpr_1 ")",</code><br>
<code>imm_0[11,0] xpr_1[4,0] 0b001000000000011 ,</code><br>
<code>"",</code><br>
<code>"el:i_load(el:opc_lh, el:x_0, el:simm12, el:xpr)",</code><br>
<code>"sc_load"</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_load(opc = opc_lh, xpr_rd = xpr, simm = simm12(val), xpr_rs1 = x_0)</code><br>
<code>instr i_load__opc_lh__xpr__simm12__x_0__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), imm_1 = immop() },</code><br>
<code>%5 = i32 immop(imm_1,1,12);</code><br>
<code>%3 = load(i16, %5, 0);</code><br>
<code>%6 = i32 sign_extend(%3);</code><br>
<code>%7 = i1 -1;</code><br>
<code>regop(xpr_0) = %6;</code><br>
<code>,</code><br>
<code id=i_load__opc_lh__xpr__simm12__xpr__>"lh" xpr_0~"," imm_1 "(" "x0" ")",</code><br>
<code>imm_1[11,0] 0b00000001 xpr_0[4,0] 0b0000011 ,</code><br>
<code>"",</code><br>
<code>"el:i_load(el:opc_lh, el:xpr, el:simm12, el:x_0)",</code><br>
<code>"sc_load"</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_load(opc = opc_lh, xpr_rd = xpr, simm = simm12(val), xpr_rs1 = xpr)</code><br>
<code>instr i_load__opc_lh__xpr__simm12__xpr__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), imm_1 = immop(), xpr_2 = regop(xpr) },</code><br>
<code>%6 = i32 regop(xpr_2);</code><br>
<code>%7 = i32 immop(imm_1,1,12);</code><br>
<code>%5 = add(%6,%7);</code><br>
<code>%3 = load(i16, %5, 0);</code><br>
<code>%8 = i32 sign_extend(%3);</code><br>
<code>%9 = i1 -1;</code><br>
<code>regop(xpr_0) = %8;</code><br>
<code>,</code><br>
<code id=i_load__opc_lw__x_0__simm12__x_0__>"lh" xpr_0~"," imm_1 "(" xpr_2 ")",</code><br>
<code>imm_1[11,0] xpr_2[4,0] 0b001 xpr_0[4,0] 0b0000011 ,</code><br>
<code>"",</code><br>
<code>"el:i_load(el:opc_lh, el:xpr, el:simm12, el:xpr)",</code><br>
<code>"sc_load"</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_load(opc = opc_lw, xpr_rd = x_0, simm = simm12(val), xpr_rs1 = x_0)</code><br>
<code>instr i_load__opc_lw__x_0__simm12__x_0__, ok (0),</code><br>
<code>{ imm_0 = immop() },</code><br>
<code>%4 = i32 immop(imm_0,1,12);</code><br>
<code>%2 = load(i32, %4, 0);</code><br>
<code>,</code><br>
<code id=i_load__opc_lw__x_0__simm12__xpr__>"lw" "x0"~"," imm_0 "(" "x0" ")",</code><br>
<code>imm_0[11,0] 0b00000010000000000011 ,</code><br>
<code>"",</code><br>
<code>"el:i_load(el:opc_lw, el:x_0, el:simm12, el:x_0)",</code><br>
<code>"sc_load"</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_load(opc = opc_lw, xpr_rd = x_0, simm = simm12(val), xpr_rs1 = xpr)</code><br>
<code>instr i_load__opc_lw__x_0__simm12__xpr__, ok (0),</code><br>
<code>{ imm_0 = immop(), xpr_1 = regop(xpr) },</code><br>
<code>%5 = i32 regop(xpr_1);</code><br>
<code>%6 = i32 immop(imm_0,1,12);</code><br>
<code>%4 = add(%5,%6);</code><br>
<code>%2 = load(i32, %4, 0);</code><br>
<code>,</code><br>
<code id=i_load__opc_lw__xpr__simm12__x_0__>"lw" "x0"~"," imm_0 "(" xpr_1 ")",</code><br>
<code>imm_0[11,0] xpr_1[4,0] 0b010000000000011 ,</code><br>
<code>"",</code><br>
<code>"el:i_load(el:opc_lw, el:x_0, el:simm12, el:xpr)",</code><br>
<code>"sc_load"</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_load(opc = opc_lw, xpr_rd = xpr, simm = simm12(val), xpr_rs1 = x_0)</code><br>
<code>instr i_load__opc_lw__xpr__simm12__x_0__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), imm_1 = immop() },</code><br>
<code>%5 = i32 immop(imm_1,1,12);</code><br>
<code>%3 = load(i32, %5, 0);</code><br>
<code>%6 = i1 -1;</code><br>
<code>regop(xpr_0) = %3;</code><br>
<code>,</code><br>
<code id=i_load__opc_lw__xpr__simm12__xpr__>"lw" xpr_0~"," imm_1 "(" "x0" ")",</code><br>
<code>imm_1[11,0] 0b00000010 xpr_0[4,0] 0b0000011 ,</code><br>
<code>"",</code><br>
<code>"el:i_load(el:opc_lw, el:xpr, el:simm12, el:x_0)",</code><br>
<code>"sc_load"</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_load(opc = opc_lw, xpr_rd = xpr, simm = simm12(val), xpr_rs1 = xpr)</code><br>
<code>instr i_load__opc_lw__xpr__simm12__xpr__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), imm_1 = immop(), xpr_2 = regop(xpr) },</code><br>
<code>%6 = i32 regop(xpr_2);</code><br>
<code>%7 = i32 immop(imm_1,1,12);</code><br>
<code>%5 = add(%6,%7);</code><br>
<code>%3 = load(i32, %5, 0);</code><br>
<code>%8 = i1 -1;</code><br>
<code>regop(xpr_0) = %3;</code><br>
<code>,</code><br>
<code id=i_load__opc_lbu__x_0__simm12__x_0__>"lw" xpr_0~"," imm_1 "(" xpr_2 ")",</code><br>
<code>imm_1[11,0] xpr_2[4,0] 0b010 xpr_0[4,0] 0b0000011 ,</code><br>
<code>"",</code><br>
<code>"el:i_load(el:opc_lw, el:xpr, el:simm12, el:xpr)",</code><br>
<code>"sc_load"</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_load(opc = opc_lbu, xpr_rd = x_0, simm = simm12(val), xpr_rs1 = x_0)</code><br>
<code>instr i_load__opc_lbu__x_0__simm12__x_0__, ok (0),</code><br>
<code>{ imm_0 = immop() },</code><br>
<code>%4 = i32 immop(imm_0,1,12);</code><br>
<code>%2 = load(i8, %4, 0);</code><br>
<code>,</code><br>
<code id=i_load__opc_lbu__x_0__simm12__xpr__>"lbu" "x0"~"," imm_0 "(" "x0" ")",</code><br>
<code>imm_0[11,0] 0b00000100000000000011 ,</code><br>
<code>"",</code><br>
<code>"el:i_load(el:opc_lbu, el:x_0, el:simm12, el:x_0)",</code><br>
<code>"sc_load"</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_load(opc = opc_lbu, xpr_rd = x_0, simm = simm12(val), xpr_rs1 = xpr)</code><br>
<code>instr i_load__opc_lbu__x_0__simm12__xpr__, ok (0),</code><br>
<code>{ imm_0 = immop(), xpr_1 = regop(xpr) },</code><br>
<code>%5 = i32 regop(xpr_1);</code><br>
<code>%6 = i32 immop(imm_0,1,12);</code><br>
<code>%4 = add(%5,%6);</code><br>
<code>%2 = load(i8, %4, 0);</code><br>
<code>,</code><br>
<code id=i_load__opc_lbu__xpr__simm12__x_0__>"lbu" "x0"~"," imm_0 "(" xpr_1 ")",</code><br>
<code>imm_0[11,0] xpr_1[4,0] 0b100000000000011 ,</code><br>
<code>"",</code><br>
<code>"el:i_load(el:opc_lbu, el:x_0, el:simm12, el:xpr)",</code><br>
<code>"sc_load"</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_load(opc = opc_lbu, xpr_rd = xpr, simm = simm12(val), xpr_rs1 = x_0)</code><br>
<code>instr i_load__opc_lbu__xpr__simm12__x_0__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), imm_1 = immop() },</code><br>
<code>%5 = i32 immop(imm_1,1,12);</code><br>
<code>%3 = load(i8, %5, 0);</code><br>
<code>%6 = i32 zero_extend(%3);</code><br>
<code>%7 = i1 -1;</code><br>
<code>regop(xpr_0) = %6;</code><br>
<code>,</code><br>
<code id=i_load__opc_lbu__xpr__simm12__xpr__>"lbu" xpr_0~"," imm_1 "(" "x0" ")",</code><br>
<code>imm_1[11,0] 0b00000100 xpr_0[4,0] 0b0000011 ,</code><br>
<code>"",</code><br>
<code>"el:i_load(el:opc_lbu, el:xpr, el:simm12, el:x_0)",</code><br>
<code>"sc_load"</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_load(opc = opc_lbu, xpr_rd = xpr, simm = simm12(val), xpr_rs1 = xpr)</code><br>
<code>instr i_load__opc_lbu__xpr__simm12__xpr__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), imm_1 = immop(), xpr_2 = regop(xpr) },</code><br>
<code>%6 = i32 regop(xpr_2);</code><br>
<code>%7 = i32 immop(imm_1,1,12);</code><br>
<code>%5 = add(%6,%7);</code><br>
<code>%3 = load(i8, %5, 0);</code><br>
<code>%8 = i32 zero_extend(%3);</code><br>
<code>%9 = i1 -1;</code><br>
<code>regop(xpr_0) = %8;</code><br>
<code>,</code><br>
<code id=i_load__opc_lhu__x_0__simm12__x_0__>"lbu" xpr_0~"," imm_1 "(" xpr_2 ")",</code><br>
<code>imm_1[11,0] xpr_2[4,0] 0b100 xpr_0[4,0] 0b0000011 ,</code><br>
<code>"",</code><br>
<code>"el:i_load(el:opc_lbu, el:xpr, el:simm12, el:xpr)",</code><br>
<code>"sc_load"</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_load(opc = opc_lhu, xpr_rd = x_0, simm = simm12(val), xpr_rs1 = x_0)</code><br>
<code>instr i_load__opc_lhu__x_0__simm12__x_0__, ok (0),</code><br>
<code>{ imm_0 = immop() },</code><br>
<code>%4 = i32 immop(imm_0,1,12);</code><br>
<code>%2 = load(i16, %4, 0);</code><br>
<code>,</code><br>
<code id=i_load__opc_lhu__x_0__simm12__xpr__>"lhu" "x0"~"," imm_0 "(" "x0" ")",</code><br>
<code>imm_0[11,0] 0b00000101000000000011 ,</code><br>
<code>"",</code><br>
<code>"el:i_load(el:opc_lhu, el:x_0, el:simm12, el:x_0)",</code><br>
<code>"sc_load"</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_load(opc = opc_lhu, xpr_rd = x_0, simm = simm12(val), xpr_rs1 = xpr)</code><br>
<code>instr i_load__opc_lhu__x_0__simm12__xpr__, ok (0),</code><br>
<code>{ imm_0 = immop(), xpr_1 = regop(xpr) },</code><br>
<code>%5 = i32 regop(xpr_1);</code><br>
<code>%6 = i32 immop(imm_0,1,12);</code><br>
<code>%4 = add(%5,%6);</code><br>
<code>%2 = load(i16, %4, 0);</code><br>
<code>,</code><br>
<code id=i_load__opc_lhu__xpr__simm12__x_0__>"lhu" "x0"~"," imm_0 "(" xpr_1 ")",</code><br>
<code>imm_0[11,0] xpr_1[4,0] 0b101000000000011 ,</code><br>
<code>"",</code><br>
<code>"el:i_load(el:opc_lhu, el:x_0, el:simm12, el:xpr)",</code><br>
<code>"sc_load"</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_load(opc = opc_lhu, xpr_rd = xpr, simm = simm12(val), xpr_rs1 = x_0)</code><br>
<code>instr i_load__opc_lhu__xpr__simm12__x_0__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), imm_1 = immop() },</code><br>
<code>%5 = i32 immop(imm_1,1,12);</code><br>
<code>%3 = load(i16, %5, 0);</code><br>
<code>%6 = i32 zero_extend(%3);</code><br>
<code>%7 = i1 -1;</code><br>
<code>regop(xpr_0) = %6;</code><br>
<code>,</code><br>
<code id=i_load__opc_lhu__xpr__simm12__xpr__>"lhu" xpr_0~"," imm_1 "(" "x0" ")",</code><br>
<code>imm_1[11,0] 0b00000101 xpr_0[4,0] 0b0000011 ,</code><br>
<code>"",</code><br>
<code>"el:i_load(el:opc_lhu, el:xpr, el:simm12, el:x_0)",</code><br>
<code>"sc_load"</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_load(opc = opc_lhu, xpr_rd = xpr, simm = simm12(val), xpr_rs1 = xpr)</code><br>
<code>instr i_load__opc_lhu__xpr__simm12__xpr__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), imm_1 = immop(), xpr_2 = regop(xpr) },</code><br>
<code>%6 = i32 regop(xpr_2);</code><br>
<code>%7 = i32 immop(imm_1,1,12);</code><br>
<code>%5 = add(%6,%7);</code><br>
<code>%3 = load(i16, %5, 0);</code><br>
<code>%8 = i32 zero_extend(%3);</code><br>
<code>%9 = i1 -1;</code><br>
<code>regop(xpr_0) = %8;</code><br>
<code>,</code><br>
<code id=i_store__opc_sb__x_0__simm12__x_0__>"lhu" xpr_0~"," imm_1 "(" xpr_2 ")",</code><br>
<code>imm_1[11,0] xpr_2[4,0] 0b101 xpr_0[4,0] 0b0000011 ,</code><br>
<code>"",</code><br>
<code>"el:i_load(el:opc_lhu, el:xpr, el:simm12, el:xpr)",</code><br>
<code>"sc_load"</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_store(opc = opc_sb, xpr_rs2 = x_0, simm = simm12(val), xpr_rs1 = x_0)</code><br>
<code>instr i_store__opc_sb__x_0__simm12__x_0__, ok (0),</code><br>
<code>{ imm_0 = immop() },</code><br>
<code>%4 = i8 0;</code><br>
<code>%5 = i32 immop(imm_0,1,12);</code><br>
<code>store(%4, %5, 0);</code><br>
<code>,</code><br>
<code id=i_store__opc_sb__x_0__simm12__xpr__>"sb" "x0"~"," imm_0 "(" "x0" ")",</code><br>
<code>imm_0[11,5] 0b0000000000000 imm_0[4,0] 0b0100011 ,</code><br>
<code>"",</code><br>
<code>"el:i_store(el:opc_sb, el:x_0, el:simm12, el:x_0)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_store(opc = opc_sb, xpr_rs2 = x_0, simm = simm12(val), xpr_rs1 = xpr)</code><br>
<code>instr i_store__opc_sb__x_0__simm12__xpr__, ok (0),</code><br>
<code>{ imm_0 = immop(), xpr_1 = regop(xpr) },</code><br>
<code>%4 = i8 0;</code><br>
<code>%6 = i32 regop(xpr_1);</code><br>
<code>%7 = i32 immop(imm_0,1,12);</code><br>
<code>%5 = add(%6,%7);</code><br>
<code>store(%4, %5, 0);</code><br>
<code>,</code><br>
<code id=i_store__opc_sb__xpr__simm12__x_0__>"sb" "x0"~"," imm_0 "(" xpr_1 ")",</code><br>
<code>imm_0[11,5] 0b00000 xpr_1[4,0] 0b000 imm_0[4,0] 0b0100011 ,</code><br>
<code>"",</code><br>
<code>"el:i_store(el:opc_sb, el:x_0, el:simm12, el:xpr)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_store(opc = opc_sb, xpr_rs2 = xpr, simm = simm12(val), xpr_rs1 = x_0)</code><br>
<code>instr i_store__opc_sb__xpr__simm12__x_0__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), imm_1 = immop() },</code><br>
<code>%5 = i32 regop(xpr_0);</code><br>
<code>%4 = i8 truncate(%5);</code><br>
<code>%6 = i32 immop(imm_1,1,12);</code><br>
<code>store(%4, %6, 0);</code><br>
<code>,</code><br>
<code id=i_store__opc_sb__xpr__simm12__xpr__>"sb" xpr_0~"," imm_1 "(" "x0" ")",</code><br>
<code>imm_1[11,5] xpr_0[4,0] 0b00000000 imm_1[4,0] 0b0100011 ,</code><br>
<code>"",</code><br>
<code>"el:i_store(el:opc_sb, el:xpr, el:simm12, el:x_0)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_store(opc = opc_sb, xpr_rs2 = xpr, simm = simm12(val), xpr_rs1 = xpr)</code><br>
<code>instr i_store__opc_sb__xpr__simm12__xpr__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), imm_1 = immop(), xpr_2 = regop(xpr) },</code><br>
<code>%5 = i32 regop(xpr_0);</code><br>
<code>%4 = i8 truncate(%5);</code><br>
<code>%7 = i32 regop(xpr_2);</code><br>
<code>%8 = i32 immop(imm_1,1,12);</code><br>
<code>%6 = add(%7,%8);</code><br>
<code>store(%4, %6, 0);</code><br>
<code>,</code><br>
<code id=i_store__opc_sh__x_0__simm12__x_0__>"sb" xpr_0~"," imm_1 "(" xpr_2 ")",</code><br>
<code>imm_1[11,5] xpr_0[4,0] xpr_2[4,0] 0b000 imm_1[4,0] 0b0100011 ,</code><br>
<code>"",</code><br>
<code>"el:i_store(el:opc_sb, el:xpr, el:simm12, el:xpr)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_store(opc = opc_sh, xpr_rs2 = x_0, simm = simm12(val), xpr_rs1 = x_0)</code><br>
<code>instr i_store__opc_sh__x_0__simm12__x_0__, ok (0),</code><br>
<code>{ imm_0 = immop() },</code><br>
<code>%4 = i16 0;</code><br>
<code>%5 = i32 immop(imm_0,1,12);</code><br>
<code>store(%4, %5, 0);</code><br>
<code>,</code><br>
<code id=i_store__opc_sh__x_0__simm12__xpr__>"sh" "x0"~"," imm_0 "(" "x0" ")",</code><br>
<code>imm_0[11,5] 0b0000000000001 imm_0[4,0] 0b0100011 ,</code><br>
<code>"",</code><br>
<code>"el:i_store(el:opc_sh, el:x_0, el:simm12, el:x_0)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_store(opc = opc_sh, xpr_rs2 = x_0, simm = simm12(val), xpr_rs1 = xpr)</code><br>
<code>instr i_store__opc_sh__x_0__simm12__xpr__, ok (0),</code><br>
<code>{ imm_0 = immop(), xpr_1 = regop(xpr) },</code><br>
<code>%4 = i16 0;</code><br>
<code>%6 = i32 regop(xpr_1);</code><br>
<code>%7 = i32 immop(imm_0,1,12);</code><br>
<code>%5 = add(%6,%7);</code><br>
<code>store(%4, %5, 0);</code><br>
<code>,</code><br>
<code id=i_store__opc_sh__xpr__simm12__x_0__>"sh" "x0"~"," imm_0 "(" xpr_1 ")",</code><br>
<code>imm_0[11,5] 0b00000 xpr_1[4,0] 0b001 imm_0[4,0] 0b0100011 ,</code><br>
<code>"",</code><br>
<code>"el:i_store(el:opc_sh, el:x_0, el:simm12, el:xpr)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_store(opc = opc_sh, xpr_rs2 = xpr, simm = simm12(val), xpr_rs1 = x_0)</code><br>
<code>instr i_store__opc_sh__xpr__simm12__x_0__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), imm_1 = immop() },</code><br>
<code>%5 = i32 regop(xpr_0);</code><br>
<code>%4 = i16 truncate(%5);</code><br>
<code>%6 = i32 immop(imm_1,1,12);</code><br>
<code>store(%4, %6, 0);</code><br>
<code>,</code><br>
<code id=i_store__opc_sh__xpr__simm12__xpr__>"sh" xpr_0~"," imm_1 "(" "x0" ")",</code><br>
<code>imm_1[11,5] xpr_0[4,0] 0b00000001 imm_1[4,0] 0b0100011 ,</code><br>
<code>"",</code><br>
<code>"el:i_store(el:opc_sh, el:xpr, el:simm12, el:x_0)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_store(opc = opc_sh, xpr_rs2 = xpr, simm = simm12(val), xpr_rs1 = xpr)</code><br>
<code>instr i_store__opc_sh__xpr__simm12__xpr__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), imm_1 = immop(), xpr_2 = regop(xpr) },</code><br>
<code>%5 = i32 regop(xpr_0);</code><br>
<code>%4 = i16 truncate(%5);</code><br>
<code>%7 = i32 regop(xpr_2);</code><br>
<code>%8 = i32 immop(imm_1,1,12);</code><br>
<code>%6 = add(%7,%8);</code><br>
<code>store(%4, %6, 0);</code><br>
<code>,</code><br>
<code id=i_store__opc_sw__x_0__simm12__x_0__>"sh" xpr_0~"," imm_1 "(" xpr_2 ")",</code><br>
<code>imm_1[11,5] xpr_0[4,0] xpr_2[4,0] 0b001 imm_1[4,0] 0b0100011 ,</code><br>
<code>"",</code><br>
<code>"el:i_store(el:opc_sh, el:xpr, el:simm12, el:xpr)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_store(opc = opc_sw, xpr_rs2 = x_0, simm = simm12(val), xpr_rs1 = x_0)</code><br>
<code>instr i_store__opc_sw__x_0__simm12__x_0__, ok (0),</code><br>
<code>{ imm_0 = immop() },</code><br>
<code>%4 = i32 0;</code><br>
<code>%5 = i32 immop(imm_0,1,12);</code><br>
<code>store(%4, %5, 0);</code><br>
<code>,</code><br>
<code id=i_store__opc_sw__x_0__simm12__xpr__>"sw" "x0"~"," imm_0 "(" "x0" ")",</code><br>
<code>imm_0[11,5] 0b0000000000010 imm_0[4,0] 0b0100011 ,</code><br>
<code>"",</code><br>
<code>"el:i_store(el:opc_sw, el:x_0, el:simm12, el:x_0)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_store(opc = opc_sw, xpr_rs2 = x_0, simm = simm12(val), xpr_rs1 = xpr)</code><br>
<code>instr i_store__opc_sw__x_0__simm12__xpr__, ok (0),</code><br>
<code>{ imm_0 = immop(), xpr_1 = regop(xpr) },</code><br>
<code>%4 = i32 0;</code><br>
<code>%6 = i32 regop(xpr_1);</code><br>
<code>%7 = i32 immop(imm_0,1,12);</code><br>
<code>%5 = add(%6,%7);</code><br>
<code>store(%4, %5, 0);</code><br>
<code>,</code><br>
<code id=i_store__opc_sw__xpr__simm12__x_0__>"sw" "x0"~"," imm_0 "(" xpr_1 ")",</code><br>
<code>imm_0[11,5] 0b00000 xpr_1[4,0] 0b010 imm_0[4,0] 0b0100011 ,</code><br>
<code>"",</code><br>
<code>"el:i_store(el:opc_sw, el:x_0, el:simm12, el:xpr)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_store(opc = opc_sw, xpr_rs2 = xpr, simm = simm12(val), xpr_rs1 = x_0)</code><br>
<code>instr i_store__opc_sw__xpr__simm12__x_0__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), imm_1 = immop() },</code><br>
<code>%4 = i32 regop(xpr_0);</code><br>
<code>%5 = i32 immop(imm_1,1,12);</code><br>
<code>store(%4, %5, 0);</code><br>
<code>,</code><br>
<code id=i_store__opc_sw__xpr__simm12__xpr__>"sw" xpr_0~"," imm_1 "(" "x0" ")",</code><br>
<code>imm_1[11,5] xpr_0[4,0] 0b00000010 imm_1[4,0] 0b0100011 ,</code><br>
<code>"",</code><br>
<code>"el:i_store(el:opc_sw, el:xpr, el:simm12, el:x_0)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_store(opc = opc_sw, xpr_rs2 = xpr, simm = simm12(val), xpr_rs1 = xpr)</code><br>
<code>instr i_store__opc_sw__xpr__simm12__xpr__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), imm_1 = immop(), xpr_2 = regop(xpr) },</code><br>
<code>%4 = i32 regop(xpr_0);</code><br>
<code>%6 = i32 regop(xpr_2);</code><br>
<code>%7 = i32 immop(imm_1,1,12);</code><br>
<code>%5 = add(%6,%7);</code><br>
<code>store(%4, %5, 0);</code><br>
<code>,</code><br>
<code id=i_li_alias__x_0__simm12__>"sw" xpr_0~"," imm_1 "(" xpr_2 ")",</code><br>
<code>imm_1[11,5] xpr_0[4,0] xpr_2[4,0] 0b010 imm_1[4,0] 0b0100011 ,</code><br>
<code>"",</code><br>
<code>"el:i_store(el:opc_sw, el:xpr, el:simm12, el:xpr)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_li_alias(xpr_rd = x_0, simm = simm12(val))</code><br>
<code>instr i_li_alias__x_0__simm12__, ok (0),</code><br>
<code>{ imm_0 = immop() },</code><br>
<code>,</code><br>
<code id=i_li_alias__xpr__simm12__>"li" "x0"~"," imm_0,</code><br>
<code>imm_0[11,0] 0b00000000000000010011 ,</code><br>
<code>"",</code><br>
<code>"el:i_li_alias(el:x_0, el:simm12)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_li_alias(xpr_rd = xpr, simm = simm12(val))</code><br>
<code>instr i_li_alias__xpr__simm12__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), imm_1 = immop() },</code><br>
<code>%4 = i32 immop(imm_1,1,12);</code><br>
<code>%5 = i1 -1;</code><br>
<code>regop(xpr_0) = %4;</code><br>
<code>,</code><br>
<code id=i_mv_alias__x_0__x_0__>"li" xpr_0~"," imm_1,</code><br>
<code>imm_1[11,0] 0b00000000 xpr_0[4,0] 0b0010011 ,</code><br>
<code>"",</code><br>
<code>"el:i_li_alias(el:xpr, el:simm12)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_mv_alias(xpr_rd = x_0, xpr_rs1 = x_0)</code><br>
<code>instr i_mv_alias__x_0__x_0__, ok (0),</code><br>
<code>{ },</code><br>
<code>,</code><br>
<code id=i_mv_alias__x_0__xpr__>"mv" "x0"~"," "x0",</code><br>
<code>0b00000000000000000000000000010011 ,</code><br>
<code>"",</code><br>
<code>"el:i_mv_alias(el:x_0, el:x_0)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_mv_alias(xpr_rd = x_0, xpr_rs1 = xpr)</code><br>
<code>instr i_mv_alias__x_0__xpr__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr) },</code><br>
<code>,</code><br>
<code id=i_mv_alias__xpr__x_0__>"mv" "x0"~"," xpr_0,</code><br>
<code>0b000000000000 xpr_0[4,0] 0b000000000010011 ,</code><br>
<code>"",</code><br>
<code>"el:i_mv_alias(el:x_0, el:xpr)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_mv_alias(xpr_rd = xpr, xpr_rs1 = x_0)</code><br>
<code>instr i_mv_alias__xpr__x_0__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr) },</code><br>
<code>%4 = i32 0;</code><br>
<code>%5 = i1 -1;</code><br>
<code>regop(xpr_0) = %4;</code><br>
<code>,</code><br>
<code id=i_mv_alias__xpr__xpr__>"mv" xpr_0~"," "x0",</code><br>
<code>0b00000000000000000000 xpr_0[4,0] 0b0010011 ,</code><br>
<code>"",</code><br>
<code>"el:i_mv_alias(el:xpr, el:x_0)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_mv_alias(xpr_rd = xpr, xpr_rs1 = xpr)</code><br>
<code>instr i_mv_alias__xpr__xpr__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), xpr_1 = regop(xpr) },</code><br>
<code>%4 = i32 regop(xpr_1);</code><br>
<code>%5 = i1 -1;</code><br>
<code>regop(xpr_0) = %4;</code><br>
<code>,</code><br>
<code id=i_not_alias__x_0__x_0__>"mv" xpr_0~"," xpr_1,</code><br>
<code>0b000000000000 xpr_1[4,0] 0b000 xpr_0[4,0] 0b0010011 ,</code><br>
<code>"",</code><br>
<code>"el:i_mv_alias(el:xpr, el:xpr)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_not_alias(xpr_rd = x_0, xpr_rs1 = x_0)</code><br>
<code>instr i_not_alias__x_0__x_0__, ok (0),</code><br>
<code>{ },</code><br>
<code>,</code><br>
<code id=i_not_alias__x_0__xpr__>"not" "x0"~"," "x0",</code><br>
<code>0b11111111111100000100000000010011 ,</code><br>
<code>"",</code><br>
<code>"el:i_not_alias(el:x_0, el:x_0)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_not_alias(xpr_rd = x_0, xpr_rs1 = xpr)</code><br>
<code>instr i_not_alias__x_0__xpr__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr) },</code><br>
<code>,</code><br>
<code id=i_not_alias__xpr__x_0__>"not" "x0"~"," xpr_0,</code><br>
<code>0b111111111111 xpr_0[4,0] 0b100000000010011 ,</code><br>
<code>"",</code><br>
<code>"el:i_not_alias(el:x_0, el:xpr)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_not_alias(xpr_rd = xpr, xpr_rs1 = x_0)</code><br>
<code>instr i_not_alias__xpr__x_0__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr) },</code><br>
<code>%4 = i32 -1;</code><br>
<code>%5 = i1 -1;</code><br>
<code>regop(xpr_0) = %4;</code><br>
<code>,</code><br>
<code id=i_not_alias__xpr__xpr__>"not" xpr_0~"," "x0",</code><br>
<code>0b11111111111100000100 xpr_0[4,0] 0b0010011 ,</code><br>
<code>"",</code><br>
<code>"el:i_not_alias(el:xpr, el:x_0)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_not_alias(xpr_rd = xpr, xpr_rs1 = xpr)</code><br>
<code>instr i_not_alias__xpr__xpr__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), xpr_1 = regop(xpr) },</code><br>
<code>%5 = i32 regop(xpr_1);</code><br>
<code>%6 = i32 -1;</code><br>
<code>%4 = xor(%5,%6);</code><br>
<code>%7 = i1 -1;</code><br>
<code>regop(xpr_0) = %4;</code><br>
<code>,</code><br>
<code id=i_neg_alias__x_0__x_0__>"not" xpr_0~"," xpr_1,</code><br>
<code>0b111111111111 xpr_1[4,0] 0b100 xpr_0[4,0] 0b0010011 ,</code><br>
<code>"",</code><br>
<code>"el:i_not_alias(el:xpr, el:xpr)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_neg_alias(xpr_rd = x_0, xpr_rs2 = x_0)</code><br>
<code>instr i_neg_alias__x_0__x_0__, ok (0),</code><br>
<code>{ },</code><br>
<code>,</code><br>
<code id=i_neg_alias__x_0__xpr__>"neg" "x0"~"," "x0",</code><br>
<code>0b01000000000000000000000000110011 ,</code><br>
<code>"",</code><br>
<code>"el:i_neg_alias(el:x_0, el:x_0)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_neg_alias(xpr_rd = x_0, xpr_rs2 = xpr)</code><br>
<code>instr i_neg_alias__x_0__xpr__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr) },</code><br>
<code>,</code><br>
<code id=i_neg_alias__xpr__x_0__>"neg" "x0"~"," xpr_0,</code><br>
<code>0b0100000 xpr_0[4,0] 0b00000000000000110011 ,</code><br>
<code>"",</code><br>
<code>"el:i_neg_alias(el:x_0, el:xpr)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_neg_alias(xpr_rd = xpr, xpr_rs2 = x_0)</code><br>
<code>instr i_neg_alias__xpr__x_0__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr) },</code><br>
<code>%4 = i32 0;</code><br>
<code>%5 = i1 -1;</code><br>
<code>regop(xpr_0) = %4;</code><br>
<code>,</code><br>
<code id=i_neg_alias__xpr__xpr__>"neg" xpr_0~"," "x0",</code><br>
<code>0b01000000000000000000 xpr_0[4,0] 0b0110011 ,</code><br>
<code>"",</code><br>
<code>"el:i_neg_alias(el:xpr, el:x_0)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_neg_alias(xpr_rd = xpr, xpr_rs2 = xpr)</code><br>
<code>instr i_neg_alias__xpr__xpr__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), xpr_1 = regop(xpr) },</code><br>
<code>%5 = i32 0;</code><br>
<code>%6 = i32 regop(xpr_1);</code><br>
<code>%4 = sub(%5,%6);</code><br>
<code>%7 = i1 -1;</code><br>
<code>regop(xpr_0) = %4;</code><br>
<code>,</code><br>
<code id=i_seqz_alias__x_0__x_0__>"neg" xpr_0~"," xpr_1,</code><br>
<code>0b0100000 xpr_1[4,0] 0b00000000 xpr_0[4,0] 0b0110011 ,</code><br>
<code>"",</code><br>
<code>"el:i_neg_alias(el:xpr, el:xpr)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_seqz_alias(xpr_rd = x_0, xpr_rs1 = x_0)</code><br>
<code>instr i_seqz_alias__x_0__x_0__, ok (0),</code><br>
<code>{ },</code><br>
<code>,</code><br>
<code id=i_seqz_alias__x_0__xpr__>"seqz" "x0"~"," "x0",</code><br>
<code>0b00000000000100000011000000010011 ,</code><br>
<code>"",</code><br>
<code>"el:i_seqz_alias(el:x_0, el:x_0)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_seqz_alias(xpr_rd = x_0, xpr_rs1 = xpr)</code><br>
<code>instr i_seqz_alias__x_0__xpr__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr) },</code><br>
<code>,</code><br>
<code id=i_seqz_alias__xpr__x_0__>"seqz" "x0"~"," xpr_0,</code><br>
<code>0b000000000001 xpr_0[4,0] 0b011000000010011 ,</code><br>
<code>"",</code><br>
<code>"el:i_seqz_alias(el:x_0, el:xpr)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_seqz_alias(xpr_rd = xpr, xpr_rs1 = x_0)</code><br>
<code>instr i_seqz_alias__xpr__x_0__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr) },</code><br>
<code>%4 = i32 1;</code><br>
<code>%5 = i1 -1;</code><br>
<code>regop(xpr_0) = %4;</code><br>
<code>,</code><br>
<code id=i_seqz_alias__xpr__xpr__>"seqz" xpr_0~"," "x0",</code><br>
<code>0b00000000000100000011 xpr_0[4,0] 0b0010011 ,</code><br>
<code>"",</code><br>
<code>"el:i_seqz_alias(el:xpr, el:x_0)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_seqz_alias(xpr_rd = xpr, xpr_rs1 = xpr)</code><br>
<code>instr i_seqz_alias__xpr__xpr__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), xpr_1 = regop(xpr) },</code><br>
<code>%6 = i32 regop(xpr_1);</code><br>
<code>%7 = i32 0;</code><br>
<code>%5 = seteq(%6,%7);</code><br>
<code>%4 = i32 zero_extend(%5);</code><br>
<code>%8 = i1 -1;</code><br>
<code>regop(xpr_0) = %4;</code><br>
<code>,</code><br>
<code id=i_snez_alias__x_0__x_0__>"seqz" xpr_0~"," xpr_1,</code><br>
<code>0b000000000001 xpr_1[4,0] 0b011 xpr_0[4,0] 0b0010011 ,</code><br>
<code>"",</code><br>
<code>"el:i_seqz_alias(el:xpr, el:xpr)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_snez_alias(xpr_rd = x_0, xpr_rs1 = x_0)</code><br>
<code>instr i_snez_alias__x_0__x_0__, ok (0),</code><br>
<code>{ },</code><br>
<code>,</code><br>
<code id=i_snez_alias__x_0__xpr__>"snez" "x0"~"," "x0",</code><br>
<code>0b00000000000000000011000000110011 ,</code><br>
<code>"",</code><br>
<code>"el:i_snez_alias(el:x_0, el:x_0)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_snez_alias(xpr_rd = x_0, xpr_rs1 = xpr)</code><br>
<code>instr i_snez_alias__x_0__xpr__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr) },</code><br>
<code>,</code><br>
<code id=i_snez_alias__xpr__x_0__>"snez" "x0"~"," xpr_0,</code><br>
<code>0b0000000 xpr_0[4,0] 0b00000011000000110011 ,</code><br>
<code>"",</code><br>
<code>"el:i_snez_alias(el:x_0, el:xpr)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_snez_alias(xpr_rd = xpr, xpr_rs1 = x_0)</code><br>
<code>instr i_snez_alias__xpr__x_0__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr) },</code><br>
<code>%4 = i32 0;</code><br>
<code>%5 = i1 -1;</code><br>
<code>regop(xpr_0) = %4;</code><br>
<code>,</code><br>
<code id=i_snez_alias__xpr__xpr__>"snez" xpr_0~"," "x0",</code><br>
<code>0b00000000000000000011 xpr_0[4,0] 0b0110011 ,</code><br>
<code>"",</code><br>
<code>"el:i_snez_alias(el:xpr, el:x_0)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_snez_alias(xpr_rd = xpr, xpr_rs1 = xpr)</code><br>
<code>instr i_snez_alias__xpr__xpr__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), xpr_1 = regop(xpr) },</code><br>
<code>%6 = i32 regop(xpr_1);</code><br>
<code>%7 = i32 0;</code><br>
<code>%5 = setne(%6,%7);</code><br>
<code>%4 = i32 zero_extend(%5);</code><br>
<code>%8 = i1 -1;</code><br>
<code>regop(xpr_0) = %4;</code><br>
<code>,</code><br>
<code id=i_sltz_alias__x_0__x_0__>"snez" xpr_0~"," xpr_1,</code><br>
<code>0b0000000 xpr_1[4,0] 0b00000011 xpr_0[4,0] 0b0110011 ,</code><br>
<code>"",</code><br>
<code>"el:i_snez_alias(el:xpr, el:xpr)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_sltz_alias(xpr_rd = x_0, xpr_rs1 = x_0)</code><br>
<code>instr i_sltz_alias__x_0__x_0__, ok (0),</code><br>
<code>{ },</code><br>
<code>,</code><br>
<code id=i_sltz_alias__x_0__xpr__>"sltz" "x0"~"," "x0",</code><br>
<code>0b00000000000000000010000000110011 ,</code><br>
<code>"",</code><br>
<code>"el:i_sltz_alias(el:x_0, el:x_0)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_sltz_alias(xpr_rd = x_0, xpr_rs1 = xpr)</code><br>
<code>instr i_sltz_alias__x_0__xpr__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr) },</code><br>
<code>,</code><br>
<code id=i_sltz_alias__xpr__x_0__>"sltz" "x0"~"," xpr_0,</code><br>
<code>0b000000000000 xpr_0[4,0] 0b010000000110011 ,</code><br>
<code>"",</code><br>
<code>"el:i_sltz_alias(el:x_0, el:xpr)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_sltz_alias(xpr_rd = xpr, xpr_rs1 = x_0)</code><br>
<code>instr i_sltz_alias__xpr__x_0__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr) },</code><br>
<code>%4 = i32 0;</code><br>
<code>%5 = i1 -1;</code><br>
<code>regop(xpr_0) = %4;</code><br>
<code>,</code><br>
<code id=i_sltz_alias__xpr__xpr__>"sltz" xpr_0~"," "x0",</code><br>
<code>0b00000000000000000010 xpr_0[4,0] 0b0110011 ,</code><br>
<code>"",</code><br>
<code>"el:i_sltz_alias(el:xpr, el:x_0)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_sltz_alias(xpr_rd = xpr, xpr_rs1 = xpr)</code><br>
<code>instr i_sltz_alias__xpr__xpr__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), xpr_1 = regop(xpr) },</code><br>
<code>%5 = i32 regop(xpr_1);</code><br>
<code>%6 = i32 31;</code><br>
<code>%4 = srl(%5,%6);</code><br>
<code>%7 = i1 -1;</code><br>
<code>regop(xpr_0) = %4;</code><br>
<code>,</code><br>
<code id=i_sgtz_alias__x_0__x_0__>"sltz" xpr_0~"," xpr_1,</code><br>
<code>0b000000000000 xpr_1[4,0] 0b010 xpr_0[4,0] 0b0110011 ,</code><br>
<code>"",</code><br>
<code>"el:i_sltz_alias(el:xpr, el:xpr)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_sgtz_alias(xpr_rd = x_0, xpr_rs1 = x_0)</code><br>
<code>instr i_sgtz_alias__x_0__x_0__, ok (0),</code><br>
<code>{ },</code><br>
<code>,</code><br>
<code id=i_sgtz_alias__x_0__xpr__>"sgtz" "x0"~"," "x0",</code><br>
<code>0b00000000000000000010000000110011 ,</code><br>
<code>"",</code><br>
<code>"el:i_sgtz_alias(el:x_0, el:x_0)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_sgtz_alias(xpr_rd = x_0, xpr_rs1 = xpr)</code><br>
<code>instr i_sgtz_alias__x_0__xpr__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr) },</code><br>
<code>,</code><br>
<code id=i_sgtz_alias__xpr__x_0__>"sgtz" "x0"~"," xpr_0,</code><br>
<code>0b0000000 xpr_0[4,0] 0b00000010000000110011 ,</code><br>
<code>"",</code><br>
<code>"el:i_sgtz_alias(el:x_0, el:xpr)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_sgtz_alias(xpr_rd = xpr, xpr_rs1 = x_0)</code><br>
<code>instr i_sgtz_alias__xpr__x_0__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr) },</code><br>
<code>%4 = i32 0;</code><br>
<code>%5 = i1 -1;</code><br>
<code>regop(xpr_0) = %4;</code><br>
<code>,</code><br>
<code id=i_sgtz_alias__xpr__xpr__>"sgtz" xpr_0~"," "x0",</code><br>
<code>0b00000000000000000010 xpr_0[4,0] 0b0110011 ,</code><br>
<code>"",</code><br>
<code>"el:i_sgtz_alias(el:xpr, el:x_0)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_sgtz_alias(xpr_rd = xpr, xpr_rs1 = xpr)</code><br>
<code>instr i_sgtz_alias__xpr__xpr__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), xpr_1 = regop(xpr) },</code><br>
<code>%6 = i32 regop(xpr_1);</code><br>
<code>%7 = i32 0;</code><br>
<code>%5 = setgt(%6,%7);</code><br>
<code>%4 = i32 zero_extend(%5);</code><br>
<code>%8 = i1 -1;</code><br>
<code>regop(xpr_0) = %4;</code><br>
<code>,</code><br>
<code id=i_beqz_alias__x_0__rel_addr12__>"sgtz" xpr_0~"," xpr_1,</code><br>
<code>0b0000000 xpr_1[4,0] 0b00000010 xpr_0[4,0] 0b0110011 ,</code><br>
<code>"",</code><br>
<code>"el:i_sgtz_alias(el:xpr, el:xpr)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_beqz_alias(xpr_rs1 = x_0, rel_addr = rel_addr12(val))</code><br>
<code>instr i_beqz_alias__x_0__rel_addr12__, ok (0),</code><br>
<code>{ imm_0 = immop() },</code><br>
<code>%6 = i32 getcurrpc();</code><br>
<code>%8 = i32 immop(imm_0,1,13);</code><br>
<code>%9 = i32 -2;</code><br>
<code>%7 = and(%8,%9);</code><br>
<code>%5 = add(%6,%7);</code><br>
<code>%10 = i32 -4;</code><br>
<code>%4 = add(%5,%10);</code><br>
<code>%11 = i1 -1;</code><br>
<code>brc(%4,%11);</code><br>
<code>,</code><br>
<code id=i_beqz_alias__xpr__rel_addr12__>"beqz" "x0"~"," imm_0,</code><br>
<code>imm_0[11] imm_0[9,4] 0b0000000000000 imm_0[3,0] imm_0[10] 0b1100011 ,</code><br>
<code>"",</code><br>
<code>"el:i_beqz_alias(el:x_0, el:rel_addr12)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_beqz_alias(xpr_rs1 = xpr, rel_addr = rel_addr12(val))</code><br>
<code>instr i_beqz_alias__xpr__rel_addr12__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), imm_1 = immop() },</code><br>
<code>%6 = i32 getcurrpc();</code><br>
<code>%8 = i32 immop(imm_1,1,13);</code><br>
<code>%9 = i32 -2;</code><br>
<code>%7 = and(%8,%9);</code><br>
<code>%5 = add(%6,%7);</code><br>
<code>%10 = i32 -4;</code><br>
<code>%4 = add(%5,%10);</code><br>
<code>%12 = i32 regop(xpr_0);</code><br>
<code>%13 = i32 0;</code><br>
<code>%11 = seteq(%12,%13);</code><br>
<code>brc(%4,%11);</code><br>
<code>,</code><br>
<code id=i_bnez_alias__x_0__rel_addr12__>"beqz" xpr_0~"," imm_1,</code><br>
<code>imm_1[11] imm_1[9,4] 0b00000 xpr_0[4,0] 0b000 imm_1[3,0] imm_1[10] 0b1100011 ,</code><br>
<code>"",</code><br>
<code>"el:i_beqz_alias(el:xpr, el:rel_addr12)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_bnez_alias(xpr_rs1 = x_0, rel_addr = rel_addr12(val))</code><br>
<code>instr i_bnez_alias__x_0__rel_addr12__, ok (0),</code><br>
<code>{ imm_0 = immop() },</code><br>
<code>,</code><br>
<code id=i_bnez_alias__xpr__rel_addr12__>"bnez" "x0"~"," imm_0,</code><br>
<code>imm_0[11] imm_0[9,4] 0b0000000000001 imm_0[3,0] imm_0[10] 0b1100011 ,</code><br>
<code>"",</code><br>
<code>"el:i_bnez_alias(el:x_0, el:rel_addr12)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_bnez_alias(xpr_rs1 = xpr, rel_addr = rel_addr12(val))</code><br>
<code>instr i_bnez_alias__xpr__rel_addr12__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), imm_1 = immop() },</code><br>
<code>%6 = i32 getcurrpc();</code><br>
<code>%8 = i32 immop(imm_1,1,13);</code><br>
<code>%9 = i32 -2;</code><br>
<code>%7 = and(%8,%9);</code><br>
<code>%5 = add(%6,%7);</code><br>
<code>%10 = i32 -4;</code><br>
<code>%4 = add(%5,%10);</code><br>
<code>%12 = i32 regop(xpr_0);</code><br>
<code>%13 = i32 0;</code><br>
<code>%11 = setne(%12,%13);</code><br>
<code>brc(%4,%11);</code><br>
<code>,</code><br>
<code id=i_blez_alias__x_0__rel_addr12__>"bnez" xpr_0~"," imm_1,</code><br>
<code>imm_1[11] imm_1[9,4] 0b00000 xpr_0[4,0] 0b001 imm_1[3,0] imm_1[10] 0b1100011 ,</code><br>
<code>"",</code><br>
<code>"el:i_bnez_alias(el:xpr, el:rel_addr12)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_blez_alias(xpr_rs1 = x_0, rel_addr = rel_addr12(val))</code><br>
<code>instr i_blez_alias__x_0__rel_addr12__, ok (0),</code><br>
<code>{ imm_0 = immop() },</code><br>
<code>%6 = i32 getcurrpc();</code><br>
<code>%8 = i32 immop(imm_0,1,13);</code><br>
<code>%9 = i32 -2;</code><br>
<code>%7 = and(%8,%9);</code><br>
<code>%5 = add(%6,%7);</code><br>
<code>%10 = i32 -4;</code><br>
<code>%4 = add(%5,%10);</code><br>
<code>%11 = i1 -1;</code><br>
<code>brc(%4,%11);</code><br>
<code>,</code><br>
<code id=i_blez_alias__xpr__rel_addr12__>"blez" "x0"~"," imm_0,</code><br>
<code>imm_0[11] imm_0[9,4] 0b0000000000101 imm_0[3,0] imm_0[10] 0b1100011 ,</code><br>
<code>"",</code><br>
<code>"el:i_blez_alias(el:x_0, el:rel_addr12)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_blez_alias(xpr_rs1 = xpr, rel_addr = rel_addr12(val))</code><br>
<code>instr i_blez_alias__xpr__rel_addr12__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), imm_1 = immop() },</code><br>
<code>%6 = i32 getcurrpc();</code><br>
<code>%8 = i32 immop(imm_1,1,13);</code><br>
<code>%9 = i32 -2;</code><br>
<code>%7 = and(%8,%9);</code><br>
<code>%5 = add(%6,%7);</code><br>
<code>%10 = i32 -4;</code><br>
<code>%4 = add(%5,%10);</code><br>
<code>%12 = i32 regop(xpr_0);</code><br>
<code>%13 = i32 1;</code><br>
<code>%11 = setlt(%12,%13);</code><br>
<code>brc(%4,%11);</code><br>
<code>,</code><br>
<code id=i_bgez_alias__x_0__rel_addr12__>"blez" xpr_0~"," imm_1,</code><br>
<code>imm_1[11] imm_1[9,4] xpr_0[4,0] 0b00000101 imm_1[3,0] imm_1[10] 0b1100011 ,</code><br>
<code>"",</code><br>
<code>"el:i_blez_alias(el:xpr, el:rel_addr12)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_bgez_alias(xpr_rs1 = x_0, rel_addr = rel_addr12(val))</code><br>
<code>instr i_bgez_alias__x_0__rel_addr12__, ok (0),</code><br>
<code>{ imm_0 = immop() },</code><br>
<code>%6 = i32 getcurrpc();</code><br>
<code>%8 = i32 immop(imm_0,1,13);</code><br>
<code>%9 = i32 -2;</code><br>
<code>%7 = and(%8,%9);</code><br>
<code>%5 = add(%6,%7);</code><br>
<code>%10 = i32 -4;</code><br>
<code>%4 = add(%5,%10);</code><br>
<code>%11 = i1 -1;</code><br>
<code>brc(%4,%11);</code><br>
<code>,</code><br>
<code id=i_bgez_alias__xpr__rel_addr12__>"bgez" "x0"~"," imm_0,</code><br>
<code>imm_0[11] imm_0[9,4] 0b0000000000101 imm_0[3,0] imm_0[10] 0b1100011 ,</code><br>
<code>"",</code><br>
<code>"el:i_bgez_alias(el:x_0, el:rel_addr12)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_bgez_alias(xpr_rs1 = xpr, rel_addr = rel_addr12(val))</code><br>
<code>instr i_bgez_alias__xpr__rel_addr12__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), imm_1 = immop() },</code><br>
<code>%6 = i32 getcurrpc();</code><br>
<code>%8 = i32 immop(imm_1,1,13);</code><br>
<code>%9 = i32 -2;</code><br>
<code>%7 = and(%8,%9);</code><br>
<code>%5 = add(%6,%7);</code><br>
<code>%10 = i32 -4;</code><br>
<code>%4 = add(%5,%10);</code><br>
<code>%12 = i32 regop(xpr_0);</code><br>
<code>%13 = i32 -1;</code><br>
<code>%11 = setgt(%12,%13);</code><br>
<code>brc(%4,%11);</code><br>
<code>,</code><br>
<code id=i_bltz_alias__x_0__rel_addr12__>"bgez" xpr_0~"," imm_1,</code><br>
<code>imm_1[11] imm_1[9,4] 0b00000 xpr_0[4,0] 0b101 imm_1[3,0] imm_1[10] 0b1100011 ,</code><br>
<code>"",</code><br>
<code>"el:i_bgez_alias(el:xpr, el:rel_addr12)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_bltz_alias(xpr_rs1 = x_0, rel_addr = rel_addr12(val))</code><br>
<code>instr i_bltz_alias__x_0__rel_addr12__, ok (0),</code><br>
<code>{ imm_0 = immop() },</code><br>
<code>,</code><br>
<code id=i_bltz_alias__xpr__rel_addr12__>"bltz" "x0"~"," imm_0,</code><br>
<code>imm_0[11] imm_0[9,4] 0b0000000000100 imm_0[3,0] imm_0[10] 0b1100011 ,</code><br>
<code>"",</code><br>
<code>"el:i_bltz_alias(el:x_0, el:rel_addr12)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_bltz_alias(xpr_rs1 = xpr, rel_addr = rel_addr12(val))</code><br>
<code>instr i_bltz_alias__xpr__rel_addr12__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), imm_1 = immop() },</code><br>
<code>%6 = i32 getcurrpc();</code><br>
<code>%8 = i32 immop(imm_1,1,13);</code><br>
<code>%9 = i32 -2;</code><br>
<code>%7 = and(%8,%9);</code><br>
<code>%5 = add(%6,%7);</code><br>
<code>%10 = i32 -4;</code><br>
<code>%4 = add(%5,%10);</code><br>
<code>%12 = i32 regop(xpr_0);</code><br>
<code>%13 = i32 0;</code><br>
<code>%11 = setlt(%12,%13);</code><br>
<code>brc(%4,%11);</code><br>
<code>,</code><br>
<code id=i_bgtz_alias__x_0__rel_addr12__>"bltz" xpr_0~"," imm_1,</code><br>
<code>imm_1[11] imm_1[9,4] 0b00000 xpr_0[4,0] 0b100 imm_1[3,0] imm_1[10] 0b1100011 ,</code><br>
<code>"",</code><br>
<code>"el:i_bltz_alias(el:xpr, el:rel_addr12)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_bgtz_alias(xpr_rs2 = x_0, rel_addr = rel_addr12(val))</code><br>
<code>instr i_bgtz_alias__x_0__rel_addr12__, ok (0),</code><br>
<code>{ imm_0 = immop() },</code><br>
<code>,</code><br>
<code id=i_bgtz_alias__xpr__rel_addr12__>"bgtz" "x0"~"," imm_0,</code><br>
<code>imm_0[11] imm_0[9,4] 0b0000000000100 imm_0[3,0] imm_0[10] 0b1100011 ,</code><br>
<code>"",</code><br>
<code>"el:i_bgtz_alias(el:x_0, el:rel_addr12)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_bgtz_alias(xpr_rs2 = xpr, rel_addr = rel_addr12(val))</code><br>
<code>instr i_bgtz_alias__xpr__rel_addr12__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), imm_1 = immop() },</code><br>
<code>%6 = i32 getcurrpc();</code><br>
<code>%8 = i32 immop(imm_1,1,13);</code><br>
<code>%9 = i32 -2;</code><br>
<code>%7 = and(%8,%9);</code><br>
<code>%5 = add(%6,%7);</code><br>
<code>%10 = i32 -4;</code><br>
<code>%4 = add(%5,%10);</code><br>
<code>%12 = i32 regop(xpr_0);</code><br>
<code>%13 = i32 0;</code><br>
<code>%11 = setgt(%12,%13);</code><br>
<code>brc(%4,%11);</code><br>
<code>,</code><br>
<code id=i_bgt_alias__x_0__x_0__rel_addr12__>"bgtz" xpr_0~"," imm_1,</code><br>
<code>imm_1[11] imm_1[9,4] xpr_0[4,0] 0b00000100 imm_1[3,0] imm_1[10] 0b1100011 ,</code><br>
<code>"",</code><br>
<code>"el:i_bgtz_alias(el:xpr, el:rel_addr12)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_bgt_alias(xpr_rs1 = x_0, xpr_rs2 = x_0, rel_addr = rel_addr12(val))</code><br>
<code>instr i_bgt_alias__x_0__x_0__rel_addr12__, ok (0),</code><br>
<code>{ imm_0 = immop() },</code><br>
<code>,</code><br>
<code id=i_bgt_alias__x_0__xpr__rel_addr12__>"bgt" "x0"~"," "x0"~"," imm_0,</code><br>
<code>imm_0[11] imm_0[9,4] 0b0000000000100 imm_0[3,0] imm_0[10] 0b1100011 ,</code><br>
<code>"",</code><br>
<code>"el:i_bgt_alias(el:x_0, el:x_0, el:rel_addr12)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_bgt_alias(xpr_rs1 = x_0, xpr_rs2 = xpr, rel_addr = rel_addr12(val))</code><br>
<code>instr i_bgt_alias__x_0__xpr__rel_addr12__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), imm_1 = immop() },</code><br>
<code>%6 = i32 getcurrpc();</code><br>
<code>%8 = i32 immop(imm_1,1,13);</code><br>
<code>%9 = i32 -2;</code><br>
<code>%7 = and(%8,%9);</code><br>
<code>%5 = add(%6,%7);</code><br>
<code>%10 = i32 -4;</code><br>
<code>%4 = add(%5,%10);</code><br>
<code>%12 = i32 regop(xpr_0);</code><br>
<code>%13 = i32 0;</code><br>
<code>%11 = setlt(%12,%13);</code><br>
<code>brc(%4,%11);</code><br>
<code>,</code><br>
<code id=i_bgt_alias__xpr__x_0__rel_addr12__>"bgt" "x0"~"," xpr_0~"," imm_1,</code><br>
<code>imm_1[11] imm_1[9,4] 0b00000 xpr_0[4,0] 0b100 imm_1[3,0] imm_1[10] 0b1100011 ,</code><br>
<code>"",</code><br>
<code>"el:i_bgt_alias(el:x_0, el:xpr, el:rel_addr12)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_bgt_alias(xpr_rs1 = xpr, xpr_rs2 = x_0, rel_addr = rel_addr12(val))</code><br>
<code>instr i_bgt_alias__xpr__x_0__rel_addr12__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), imm_1 = immop() },</code><br>
<code>%6 = i32 getcurrpc();</code><br>
<code>%8 = i32 immop(imm_1,1,13);</code><br>
<code>%9 = i32 -2;</code><br>
<code>%7 = and(%8,%9);</code><br>
<code>%5 = add(%6,%7);</code><br>
<code>%10 = i32 -4;</code><br>
<code>%4 = add(%5,%10);</code><br>
<code>%12 = i32 regop(xpr_0);</code><br>
<code>%13 = i32 0;</code><br>
<code>%11 = setgt(%12,%13);</code><br>
<code>brc(%4,%11);</code><br>
<code>,</code><br>
<code id=i_bgt_alias__xpr__xpr__rel_addr12__>"bgt" xpr_0~"," "x0"~"," imm_1,</code><br>
<code>imm_1[11] imm_1[9,4] xpr_0[4,0] 0b00000100 imm_1[3,0] imm_1[10] 0b1100011 ,</code><br>
<code>"",</code><br>
<code>"el:i_bgt_alias(el:xpr, el:x_0, el:rel_addr12)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_bgt_alias(xpr_rs1 = xpr, xpr_rs2 = xpr, rel_addr = rel_addr12(val))</code><br>
<code>instr i_bgt_alias__xpr__xpr__rel_addr12__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), xpr_1 = regop(xpr), imm_2 = immop() },</code><br>
<code>%6 = i32 getcurrpc();</code><br>
<code>%8 = i32 immop(imm_2,1,13);</code><br>
<code>%9 = i32 -2;</code><br>
<code>%7 = and(%8,%9);</code><br>
<code>%5 = add(%6,%7);</code><br>
<code>%10 = i32 -4;</code><br>
<code>%4 = add(%5,%10);</code><br>
<code>%12 = i32 regop(xpr_0);</code><br>
<code>%13 = i32 regop(xpr_1);</code><br>
<code>%11 = setgt(%12,%13);</code><br>
<code>brc(%4,%11);</code><br>
<code>,</code><br>
<code id=i_ble_alias__x_0__x_0__rel_addr12__>"bgt" xpr_0~"," xpr_1~"," imm_2,</code><br>
<code>imm_2[11] imm_2[9,4] xpr_0[4,0] xpr_1[4,0] 0b100 imm_2[3,0] imm_2[10] 0b1100011 ,</code><br>
<code>"",</code><br>
<code>"el:i_bgt_alias(el:xpr, el:xpr, el:rel_addr12)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_ble_alias(xpr_rs1 = x_0, xpr_rs2 = x_0, rel_addr = rel_addr12(val))</code><br>
<code>instr i_ble_alias__x_0__x_0__rel_addr12__, ok (0),</code><br>
<code>{ imm_0 = immop() },</code><br>
<code>%6 = i32 getcurrpc();</code><br>
<code>%8 = i32 immop(imm_0,1,13);</code><br>
<code>%9 = i32 -2;</code><br>
<code>%7 = and(%8,%9);</code><br>
<code>%5 = add(%6,%7);</code><br>
<code>%10 = i32 -4;</code><br>
<code>%4 = add(%5,%10);</code><br>
<code>%11 = i1 -1;</code><br>
<code>brc(%4,%11);</code><br>
<code>,</code><br>
<code id=i_ble_alias__x_0__xpr__rel_addr12__>"ble" "x0"~"," "x0"~"," imm_0,</code><br>
<code>imm_0[11] imm_0[9,4] 0b0000000000101 imm_0[3,0] imm_0[10] 0b1100011 ,</code><br>
<code>"",</code><br>
<code>"el:i_ble_alias(el:x_0, el:x_0, el:rel_addr12)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_ble_alias(xpr_rs1 = x_0, xpr_rs2 = xpr, rel_addr = rel_addr12(val))</code><br>
<code>instr i_ble_alias__x_0__xpr__rel_addr12__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), imm_1 = immop() },</code><br>
<code>%6 = i32 getcurrpc();</code><br>
<code>%8 = i32 immop(imm_1,1,13);</code><br>
<code>%9 = i32 -2;</code><br>
<code>%7 = and(%8,%9);</code><br>
<code>%5 = add(%6,%7);</code><br>
<code>%10 = i32 -4;</code><br>
<code>%4 = add(%5,%10);</code><br>
<code>%12 = i32 regop(xpr_0);</code><br>
<code>%13 = i32 -1;</code><br>
<code>%11 = setgt(%12,%13);</code><br>
<code>brc(%4,%11);</code><br>
<code>,</code><br>
<code id=i_ble_alias__xpr__x_0__rel_addr12__>"ble" "x0"~"," xpr_0~"," imm_1,</code><br>
<code>imm_1[11] imm_1[9,4] 0b00000 xpr_0[4,0] 0b101 imm_1[3,0] imm_1[10] 0b1100011 ,</code><br>
<code>"",</code><br>
<code>"el:i_ble_alias(el:x_0, el:xpr, el:rel_addr12)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_ble_alias(xpr_rs1 = xpr, xpr_rs2 = x_0, rel_addr = rel_addr12(val))</code><br>
<code>instr i_ble_alias__xpr__x_0__rel_addr12__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), imm_1 = immop() },</code><br>
<code>%6 = i32 getcurrpc();</code><br>
<code>%8 = i32 immop(imm_1,1,13);</code><br>
<code>%9 = i32 -2;</code><br>
<code>%7 = and(%8,%9);</code><br>
<code>%5 = add(%6,%7);</code><br>
<code>%10 = i32 -4;</code><br>
<code>%4 = add(%5,%10);</code><br>
<code>%12 = i32 regop(xpr_0);</code><br>
<code>%13 = i32 1;</code><br>
<code>%11 = setlt(%12,%13);</code><br>
<code>brc(%4,%11);</code><br>
<code>,</code><br>
<code id=i_ble_alias__xpr__xpr__rel_addr12__>"ble" xpr_0~"," "x0"~"," imm_1,</code><br>
<code>imm_1[11] imm_1[9,4] xpr_0[4,0] 0b00000101 imm_1[3,0] imm_1[10] 0b1100011 ,</code><br>
<code>"",</code><br>
<code>"el:i_ble_alias(el:xpr, el:x_0, el:rel_addr12)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_ble_alias(xpr_rs1 = xpr, xpr_rs2 = xpr, rel_addr = rel_addr12(val))</code><br>
<code>instr i_ble_alias__xpr__xpr__rel_addr12__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), xpr_1 = regop(xpr), imm_2 = immop() },</code><br>
<code>%6 = i32 getcurrpc();</code><br>
<code>%8 = i32 immop(imm_2,1,13);</code><br>
<code>%9 = i32 -2;</code><br>
<code>%7 = and(%8,%9);</code><br>
<code>%5 = add(%6,%7);</code><br>
<code>%10 = i32 -4;</code><br>
<code>%4 = add(%5,%10);</code><br>
<code>%12 = i32 regop(xpr_0);</code><br>
<code>%13 = i32 regop(xpr_1);</code><br>
<code>%11 = setle(%12,%13);</code><br>
<code>brc(%4,%11);</code><br>
<code>,</code><br>
<code id=i_bgtu_alias__x_0__x_0__rel_addr12__>"ble" xpr_0~"," xpr_1~"," imm_2,</code><br>
<code>imm_2[11] imm_2[9,4] xpr_0[4,0] xpr_1[4,0] 0b101 imm_2[3,0] imm_2[10] 0b1100011 ,</code><br>
<code>"",</code><br>
<code>"el:i_ble_alias(el:xpr, el:xpr, el:rel_addr12)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_bgtu_alias(xpr_rs1 = x_0, xpr_rs2 = x_0, rel_addr = rel_addr12(val))</code><br>
<code>instr i_bgtu_alias__x_0__x_0__rel_addr12__, ok (0),</code><br>
<code>{ imm_0 = immop() },</code><br>
<code>,</code><br>
<code id=i_bgtu_alias__x_0__xpr__rel_addr12__>"bgtu" "x0"~"," "x0"~"," imm_0,</code><br>
<code>imm_0[11] imm_0[9,4] 0b0000000000110 imm_0[3,0] imm_0[10] 0b1100011 ,</code><br>
<code>"",</code><br>
<code>"el:i_bgtu_alias(el:x_0, el:x_0, el:rel_addr12)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_bgtu_alias(xpr_rs1 = x_0, xpr_rs2 = xpr, rel_addr = rel_addr12(val))</code><br>
<code>instr i_bgtu_alias__x_0__xpr__rel_addr12__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), imm_1 = immop() },</code><br>
<code>,</code><br>
<code id=i_bgtu_alias__xpr__x_0__rel_addr12__>"bgtu" "x0"~"," xpr_0~"," imm_1,</code><br>
<code>imm_1[11] imm_1[9,4] 0b00000 xpr_0[4,0] 0b110 imm_1[3,0] imm_1[10] 0b1100011 ,</code><br>
<code>"",</code><br>
<code>"el:i_bgtu_alias(el:x_0, el:xpr, el:rel_addr12)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_bgtu_alias(xpr_rs1 = xpr, xpr_rs2 = x_0, rel_addr = rel_addr12(val))</code><br>
<code>instr i_bgtu_alias__xpr__x_0__rel_addr12__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), imm_1 = immop() },</code><br>
<code>%6 = i32 getcurrpc();</code><br>
<code>%8 = i32 immop(imm_1,1,13);</code><br>
<code>%9 = i32 -2;</code><br>
<code>%7 = and(%8,%9);</code><br>
<code>%5 = add(%6,%7);</code><br>
<code>%10 = i32 -4;</code><br>
<code>%4 = add(%5,%10);</code><br>
<code>%12 = i32 regop(xpr_0);</code><br>
<code>%13 = i32 0;</code><br>
<code>%11 = setne(%12,%13);</code><br>
<code>brc(%4,%11);</code><br>
<code>,</code><br>
<code id=i_bgtu_alias__xpr__xpr__rel_addr12__>"bgtu" xpr_0~"," "x0"~"," imm_1,</code><br>
<code>imm_1[11] imm_1[9,4] xpr_0[4,0] 0b00000110 imm_1[3,0] imm_1[10] 0b1100011 ,</code><br>
<code>"",</code><br>
<code>"el:i_bgtu_alias(el:xpr, el:x_0, el:rel_addr12)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_bgtu_alias(xpr_rs1 = xpr, xpr_rs2 = xpr, rel_addr = rel_addr12(val))</code><br>
<code>instr i_bgtu_alias__xpr__xpr__rel_addr12__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), xpr_1 = regop(xpr), imm_2 = immop() },</code><br>
<code>%6 = i32 getcurrpc();</code><br>
<code>%8 = i32 immop(imm_2,1,13);</code><br>
<code>%9 = i32 -2;</code><br>
<code>%7 = and(%8,%9);</code><br>
<code>%5 = add(%6,%7);</code><br>
<code>%10 = i32 -4;</code><br>
<code>%4 = add(%5,%10);</code><br>
<code>%12 = i32 regop(xpr_0);</code><br>
<code>%13 = i32 regop(xpr_1);</code><br>
<code>%11 = setugt(%12,%13);</code><br>
<code>brc(%4,%11);</code><br>
<code>,</code><br>
<code id=i_bleu_alias__x_0__x_0__rel_addr12__>"bgtu" xpr_0~"," xpr_1~"," imm_2,</code><br>
<code>imm_2[11] imm_2[9,4] xpr_0[4,0] xpr_1[4,0] 0b110 imm_2[3,0] imm_2[10] 0b1100011 ,</code><br>
<code>"",</code><br>
<code>"el:i_bgtu_alias(el:xpr, el:xpr, el:rel_addr12)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_bleu_alias(xpr_rs1 = x_0, xpr_rs2 = x_0, rel_addr = rel_addr12(val))</code><br>
<code>instr i_bleu_alias__x_0__x_0__rel_addr12__, ok (0),</code><br>
<code>{ imm_0 = immop() },</code><br>
<code>,</code><br>
<code id=i_bleu_alias__x_0__xpr__rel_addr12__>"bleu" "x0"~"," "x0"~"," imm_0,</code><br>
<code>imm_0[11] imm_0[9,4] 0b0000000000111 imm_0[3,0] imm_0[10] 0b1100011 ,</code><br>
<code>"",</code><br>
<code>"el:i_bleu_alias(el:x_0, el:x_0, el:rel_addr12)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_bleu_alias(xpr_rs1 = x_0, xpr_rs2 = xpr, rel_addr = rel_addr12(val))</code><br>
<code>instr i_bleu_alias__x_0__xpr__rel_addr12__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), imm_1 = immop() },</code><br>
<code>%6 = i32 getcurrpc();</code><br>
<code>%8 = i32 immop(imm_1,1,13);</code><br>
<code>%9 = i32 -2;</code><br>
<code>%7 = and(%8,%9);</code><br>
<code>%5 = add(%6,%7);</code><br>
<code>%10 = i32 -4;</code><br>
<code>%4 = add(%5,%10);</code><br>
<code>%12 = i32 regop(xpr_0);</code><br>
<code>%13 = i32 0;</code><br>
<code>%11 = setne(%12,%13);</code><br>
<code>brc(%4,%11);</code><br>
<code>,</code><br>
<code id=i_bleu_alias__xpr__x_0__rel_addr12__>"bleu" "x0"~"," xpr_0~"," imm_1,</code><br>
<code>imm_1[11] imm_1[9,4] 0b00000 xpr_0[4,0] 0b111 imm_1[3,0] imm_1[10] 0b1100011 ,</code><br>
<code>"",</code><br>
<code>"el:i_bleu_alias(el:x_0, el:xpr, el:rel_addr12)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_bleu_alias(xpr_rs1 = xpr, xpr_rs2 = x_0, rel_addr = rel_addr12(val))</code><br>
<code>instr i_bleu_alias__xpr__x_0__rel_addr12__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), imm_1 = immop() },</code><br>
<code>,</code><br>
<code id=i_bleu_alias__xpr__xpr__rel_addr12__>"bleu" xpr_0~"," "x0"~"," imm_1,</code><br>
<code>imm_1[11] imm_1[9,4] xpr_0[4,0] 0b00000111 imm_1[3,0] imm_1[10] 0b1100011 ,</code><br>
<code>"",</code><br>
<code>"el:i_bleu_alias(el:xpr, el:x_0, el:rel_addr12)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_bleu_alias(xpr_rs1 = xpr, xpr_rs2 = xpr, rel_addr = rel_addr12(val))</code><br>
<code>instr i_bleu_alias__xpr__xpr__rel_addr12__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), xpr_1 = regop(xpr), imm_2 = immop() },</code><br>
<code>%6 = i32 getcurrpc();</code><br>
<code>%8 = i32 immop(imm_2,1,13);</code><br>
<code>%9 = i32 -2;</code><br>
<code>%7 = and(%8,%9);</code><br>
<code>%5 = add(%6,%7);</code><br>
<code>%10 = i32 -4;</code><br>
<code>%4 = add(%5,%10);</code><br>
<code>%12 = i32 regop(xpr_0);</code><br>
<code>%13 = i32 regop(xpr_1);</code><br>
<code>%11 = setult(%12,%13);</code><br>
<code>brc(%4,%11);</code><br>
<code>,</code><br>
<code id=i_j_alias__rel_addr20__>"bleu" xpr_0~"," xpr_1~"," imm_2,</code><br>
<code>imm_2[11] imm_2[9,4] xpr_0[4,0] xpr_1[4,0] 0b111 imm_2[3,0] imm_2[10] 0b1100011 ,</code><br>
<code>"",</code><br>
<code>"el:i_bleu_alias(el:xpr, el:xpr, el:rel_addr12)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_j_alias(rel_addr = rel_addr20(val))</code><br>
<code>instr i_j_alias__rel_addr20__, ok (0),</code><br>
<code>{ imm_0 = immop() },</code><br>
<code>%6 = i32 getcurrpc();</code><br>
<code>%8 = i32 immop(imm_0,1,21);</code><br>
<code>%9 = i32 -2;</code><br>
<code>%7 = and(%8,%9);</code><br>
<code>%5 = add(%6,%7);</code><br>
<code>%10 = i32 -4;</code><br>
<code>%4 = add(%5,%10);</code><br>
<code>%11 = i1 -1;</code><br>
<code>brc(%4,%11);</code><br>
<code>,</code><br>
<code id=i_jr_alias__x_0__>"j" imm_0,</code><br>
<code>imm_0[19] imm_0[9,0] imm_0[10] imm_0[18,11] 0b000001101111 ,</code><br>
<code>"",</code><br>
<code>"el:i_j_alias(el:rel_addr20)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_jr_alias(xpr_rs1 = x_0)</code><br>
<code>instr i_jr_alias__x_0__, ok (0),</code><br>
<code>{ },</code><br>
<code>%4 = i32 0;</code><br>
<code>%5 = i1 -1;</code><br>
<code>brc(%4,%5);</code><br>
<code>,</code><br>
<code id=i_jr_alias__xpr__>"jr" "x0",</code><br>
<code>0b00000000000000000000000001100111 ,</code><br>
<code>"",</code><br>
<code>"el:i_jr_alias(el:x_0)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_jr_alias(xpr_rs1 = xpr)</code><br>
<code>instr i_jr_alias__xpr__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr) },</code><br>
<code>%4 = i32 regop(xpr_0);</code><br>
<code>%5 = i1 -1;</code><br>
<code>brc(%4,%5);</code><br>
<code>,</code><br>
<code id=i_ret_alias__>"jr" xpr_0,</code><br>
<code>0b000000000000 xpr_0[4,0] 0b000000001100111 ,</code><br>
<code>"",</code><br>
<code>"el:i_jr_alias(el:xpr)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_ret_alias</code><br>
<code>instr i_ret_alias__, ok (0),</code><br>
<code>{ },</code><br>
<code>%5 = i32 35;</code><br>
<code>%6 = i32 1;</code><br>
<code>%4 = i32 reg(rf_xpr, 1);</code><br>
<code>%7 = i1 -1;</code><br>
<code>brc(%4,%7);</code><br>
<code>,</code><br>
<code id=i_call_alias__rel_addr20__>"ret",</code><br>
<code>0b00000000000000001000000001100111 ,</code><br>
<code>"",</code><br>
<code>"el:i_ret_alias",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_call_alias(rel_addr = rel_addr20(val))</code><br>
<code>instr i_call_alias__rel_addr20__, ok (0),</code><br>
<code>{ imm_0 = immop() },</code><br>
<code>%5 = i32 getcurrpc();</code><br>
<code>%6 = i1 -1;</code><br>
<code>reg(rf_xpr, 1) = %5;</code><br>
<code>%10 = i32 immop(imm_0,1,21);</code><br>
<code>%11 = i32 -2;</code><br>
<code>%9 = and(%10,%11);</code><br>
<code>%8 = add(%5,%9);</code><br>
<code>%12 = i32 -4;</code><br>
<code>%7 = add(%8,%12);</code><br>
<code>brc(%7,%6);</code><br>
<code>,</code><br>
<code id=i_call_reg_alias__x_0__>"call" imm_0,</code><br>
<code>imm_0[19] imm_0[9,0] imm_0[10] imm_0[18,11] 0b000011101111 ,</code><br>
<code>"",</code><br>
<code>"el:i_call_alias(el:rel_addr20)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_call_reg_alias(xpr_rs1 = x_0)</code><br>
<code>instr i_call_reg_alias__x_0__, ok (0),</code><br>
<code>{ },</code><br>
<code>%5 = i32 getcurrpc();</code><br>
<code>%6 = i1 -1;</code><br>
<code>reg(rf_xpr, 1) = %5;</code><br>
<code>%7 = i32 0;</code><br>
<code>brc(%7,%6);</code><br>
<code>,</code><br>
<code id=i_call_reg_alias__xpr__>"call_reg" "x0",</code><br>
<code>0b00000000000000000000000011100111 ,</code><br>
<code>"",</code><br>
<code>"el:i_call_reg_alias(el:x_0)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// i_call_reg_alias(xpr_rs1 = xpr)</code><br>
<code>instr i_call_reg_alias__xpr__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr) },</code><br>
<code>%5 = i32 getcurrpc();</code><br>
<code>%6 = i1 -1;</code><br>
<code>reg(rf_xpr, 1) = %5;</code><br>
<code>%8 = i32 regop(xpr_0);</code><br>
<code>%9 = i32 -4;</code><br>
<code>%7 = and(%8,%9);</code><br>
<code>brc(%7,%6);</code><br>
<code>,</code><br>
<code>"call_reg" xpr_0,</code><br>
<code>0b000000000000 xpr_0[4,0] 0b000000011100111 ,</code><br>
<code>"",</code><br>
<code>"el:i_call_reg_alias(el:xpr)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>emul e_movi32__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), imm_1 = immop() },</code><br>
<code>%4 = i32 immop(imm_1,0,0);</code><br>
<code>%5 = i1 -1;</code><br>
<code id=i_alu__opc_slt__xpr__xpr__xpr__swappedCmpClone0__>regop(xpr_0) = %4;</code><br>
<code>,</code><br>
<code>i_upper_imm__opc_lui__xpr__simm20__ xpr_0 = %0, imm_1 = imm_1 " >> 12 & 0xfffff";</code><br>
<code>i_alu_i__opc_ori__xpr__x_0__simm12__ xpr_0 = reg(rf_xpr,28), imm_1 = imm_1 " & 0xfff";</code><br>
<code>i_shift__opc_slli__xpr__xpr__shamt__ xpr_0 = reg(rf_xpr,28), xpr_1 = reg(rf_xpr,28), imm_2 = 20;</code><br>
<code>i_shift__opc_srli__xpr__xpr__shamt__ xpr_0 = reg(rf_xpr,28), xpr_1 = reg(rf_xpr,28), imm_2 = 20;</code><br>
<code>i_alu__opc_or__xpr__xpr__xpr__ xpr_0 = xpr_0, xpr_1 = %0, xpr_2 = reg(rf_xpr,28);</code><br>
<code></code><br>
<code>// swapped compare   %cmp.i7 = icmp slt i32 %u0, %u1, !dbg !17 to   %cmp.i7 = icmp sgt i32 %u1, %u0, !dbg !17</code><br>
<code>instr i_alu__opc_slt__xpr__xpr__xpr__swappedCmpClone0__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), xpr_1 = regop(xpr), xpr_2 = regop(xpr) },</code><br>
<code>%6 = i32 regop(xpr_2);</code><br>
<code>%7 = i32 regop(xpr_1);</code><br>
<code>%5 = setgt(%6,%7);</code><br>
<code>%4 = i32 zero_extend(%5);</code><br>
<code>%8 = i1 -1;</code><br>
<code>regop(xpr_0) = %4;</code><br>
<code>,</code><br>
<code id=i_alu__opc_sltu__xpr__xpr__xpr__swappedCmpClone0__>"slt" xpr_0~"," xpr_1~"," xpr_2,</code><br>
<code>0b0000000 xpr_2[4,0] xpr_1[4,0] 0b010 xpr_0[4,0] 0b0110011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu(el:opc_slt, el:xpr, el:xpr, el:xpr)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// swapped compare   %cmp3.i = icmp ult i32 %u0, %u1, !dbg !17 to   %cmp3.i = icmp ugt i32 %u1, %u0, !dbg !17</code><br>
<code>instr i_alu__opc_sltu__xpr__xpr__xpr__swappedCmpClone0__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), xpr_1 = regop(xpr), xpr_2 = regop(xpr) },</code><br>
<code>%6 = i32 regop(xpr_2);</code><br>
<code>%7 = i32 regop(xpr_1);</code><br>
<code>%5 = setugt(%6,%7);</code><br>
<code>%4 = i32 zero_extend(%5);</code><br>
<code>%8 = i1 -1;</code><br>
<code>regop(xpr_0) = %4;</code><br>
<code>,</code><br>
<code id=i_alu_i__opc_slti__xpr__x_0__simm12__immSpecClone__imm_1__1__>"sltu" xpr_0~"," xpr_1~"," xpr_2,</code><br>
<code>0b0000000 xpr_2[4,0] xpr_1[4,0] 0b011 xpr_0[4,0] 0b0110011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu(el:opc_sltu, el:xpr, el:xpr, el:xpr)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// immediate specialization of i_alu_i__opc_slti__xpr__x_0__simm12__</code><br>
<code>instr i_alu_i__opc_slti__xpr__x_0__simm12__immSpecClone__imm_1__1__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), imm_1 = immop() },</code><br>
<code>%4 = i32 1;</code><br>
<code>%5 = i1 -1;</code><br>
<code>regop(xpr_0) = %4;</code><br>
<code>,</code><br>
<code id=i_alu_i__opc_slti__xpr__x_0__simm12__immSpecClone__imm_1__0__>"slti" xpr_0~"," "x0"~"," "1",</code><br>
<code>imm_1[11,0] 0b00000010 xpr_0[4,0] 0b0010011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu_i(el:opc_slti, el:xpr, el:x_0, el:simm12)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// immediate specialization of i_alu_i__opc_slti__xpr__x_0__simm12__</code><br>
<code>instr i_alu_i__opc_slti__xpr__x_0__simm12__immSpecClone__imm_1__0__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), imm_1 = immop() },</code><br>
<code>%4 = i32 0;</code><br>
<code>%5 = i1 -1;</code><br>
<code>regop(xpr_0) = %4;</code><br>
<code>,</code><br>
<code id=i_alu_i__opc_sltiu__xpr__x_0__simm12__immSpecClone__imm_1__1__>"slti" xpr_0~"," "x0"~"," "0",</code><br>
<code>imm_1[11,0] 0b00000010 xpr_0[4,0] 0b0010011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu_i(el:opc_slti, el:xpr, el:x_0, el:simm12)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// immediate specialization of i_alu_i__opc_sltiu__xpr__x_0__simm12__</code><br>
<code>instr i_alu_i__opc_sltiu__xpr__x_0__simm12__immSpecClone__imm_1__1__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), imm_1 = immop() },</code><br>
<code>%4 = i32 1;</code><br>
<code>%5 = i1 -1;</code><br>
<code>regop(xpr_0) = %4;</code><br>
<code>,</code><br>
<code id=i_alu_i__opc_sltiu__xpr__x_0__simm12__immSpecClone__imm_1__0__>"sltiu" xpr_0~"," "x0"~"," "1",</code><br>
<code>imm_1[11,0] 0b00000011 xpr_0[4,0] 0b0010011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu_i(el:opc_sltiu, el:xpr, el:x_0, el:simm12)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// immediate specialization of i_alu_i__opc_sltiu__xpr__x_0__simm12__</code><br>
<code>instr i_alu_i__opc_sltiu__xpr__x_0__simm12__immSpecClone__imm_1__0__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), imm_1 = immop() },</code><br>
<code>%4 = i32 0;</code><br>
<code>%5 = i1 -1;</code><br>
<code>regop(xpr_0) = %4;</code><br>
<code>,</code><br>
<code id=i_branch__opc_blt__xpr__xpr__rel_addr12__swappedCmpClone0__>"sltiu" xpr_0~"," "x0"~"," "0",</code><br>
<code>imm_1[11,0] 0b00000011 xpr_0[4,0] 0b0010011 ,</code><br>
<code>"",</code><br>
<code>"el:i_alu_i(el:opc_sltiu, el:xpr, el:x_0, el:simm12)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// swapped compare   %cmp32.i = icmp slt i32 %u0, %u1, !dbg !17 to   %cmp32.i = icmp sgt i32 %u1, %u0, !dbg !17</code><br>
<code>instr i_branch__opc_blt__xpr__xpr__rel_addr12__swappedCmpClone0__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), xpr_1 = regop(xpr), imm_2 = immop() },</code><br>
<code>%6 = i32 getcurrpc();</code><br>
<code>%8 = i32 immop(imm_2,1,13);</code><br>
<code>%9 = i32 -2;</code><br>
<code>%7 = and(%8,%9);</code><br>
<code>%5 = add(%6,%7);</code><br>
<code>%10 = i32 -4;</code><br>
<code>%4 = add(%5,%10);</code><br>
<code>%12 = i32 regop(xpr_1);</code><br>
<code>%13 = i32 regop(xpr_0);</code><br>
<code>%11 = setgt(%12,%13);</code><br>
<code>brc(%4,%11);</code><br>
<code>,</code><br>
<code id=i_branch__opc_bltu__xpr__xpr__rel_addr12__swappedCmpClone0__>"blt" xpr_0~"," xpr_1~"," imm_2,</code><br>
<code>imm_2[11] imm_2[9,4] xpr_1[4,0] xpr_0[4,0] 0b100 imm_2[3,0] imm_2[10] 0b1100011 ,</code><br>
<code>"",</code><br>
<code>"el:i_branch(el:opc_blt, el:xpr, el:xpr, el:rel_addr12)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// swapped compare   %cmp38.i = icmp ult i32 %u0, %u1, !dbg !17 to   %cmp38.i = icmp ugt i32 %u1, %u0, !dbg !17</code><br>
<code>instr i_branch__opc_bltu__xpr__xpr__rel_addr12__swappedCmpClone0__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), xpr_1 = regop(xpr), imm_2 = immop() },</code><br>
<code>%6 = i32 getcurrpc();</code><br>
<code>%8 = i32 immop(imm_2,1,13);</code><br>
<code>%9 = i32 -2;</code><br>
<code>%7 = and(%8,%9);</code><br>
<code>%5 = add(%6,%7);</code><br>
<code>%10 = i32 -4;</code><br>
<code>%4 = add(%5,%10);</code><br>
<code>%12 = i32 regop(xpr_1);</code><br>
<code>%13 = i32 regop(xpr_0);</code><br>
<code>%11 = setugt(%12,%13);</code><br>
<code>brc(%4,%11);</code><br>
<code>,</code><br>
<code id=i_branch__opc_bge__xpr__xpr__rel_addr12__swappedCmpClone0__>"bltu" xpr_0~"," xpr_1~"," imm_2,</code><br>
<code>imm_2[11] imm_2[9,4] xpr_1[4,0] xpr_0[4,0] 0b110 imm_2[3,0] imm_2[10] 0b1100011 ,</code><br>
<code>"",</code><br>
<code>"el:i_branch(el:opc_bltu, el:xpr, el:xpr, el:rel_addr12)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// swapped compare   %cmp44.i = icmp sge i32 %u0, %u1, !dbg !17 to   %cmp44.i = icmp sle i32 %u1, %u0, !dbg !17</code><br>
<code>instr i_branch__opc_bge__xpr__xpr__rel_addr12__swappedCmpClone0__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), xpr_1 = regop(xpr), imm_2 = immop() },</code><br>
<code>%6 = i32 getcurrpc();</code><br>
<code>%8 = i32 immop(imm_2,1,13);</code><br>
<code>%9 = i32 -2;</code><br>
<code>%7 = and(%8,%9);</code><br>
<code>%5 = add(%6,%7);</code><br>
<code>%10 = i32 -4;</code><br>
<code>%4 = add(%5,%10);</code><br>
<code>%12 = i32 regop(xpr_1);</code><br>
<code>%13 = i32 regop(xpr_0);</code><br>
<code>%11 = setle(%12,%13);</code><br>
<code>brc(%4,%11);</code><br>
<code>,</code><br>
<code id=i_branch__opc_bgeu__xpr__xpr__rel_addr12__swappedCmpClone0__>"bge" xpr_0~"," xpr_1~"," imm_2,</code><br>
<code>imm_2[11] imm_2[9,4] xpr_1[4,0] xpr_0[4,0] 0b101 imm_2[3,0] imm_2[10] 0b1100011 ,</code><br>
<code>"",</code><br>
<code>"el:i_branch(el:opc_bge, el:xpr, el:xpr, el:rel_addr12)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// swapped compare   %cmp50.i = icmp uge i32 %u0, %u1, !dbg !17 to   %cmp50.i = icmp ule i32 %u1, %u0, !dbg !17</code><br>
<code>instr i_branch__opc_bgeu__xpr__xpr__rel_addr12__swappedCmpClone0__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), xpr_1 = regop(xpr), imm_2 = immop() },</code><br>
<code>%6 = i32 getcurrpc();</code><br>
<code>%8 = i32 immop(imm_2,1,13);</code><br>
<code>%9 = i32 -2;</code><br>
<code>%7 = and(%8,%9);</code><br>
<code>%5 = add(%6,%7);</code><br>
<code>%10 = i32 -4;</code><br>
<code>%4 = add(%5,%10);</code><br>
<code>%12 = i32 regop(xpr_1);</code><br>
<code>%13 = i32 regop(xpr_0);</code><br>
<code>%11 = setule(%12,%13);</code><br>
<code>brc(%4,%11);</code><br>
<code>,</code><br>
<code id=i_bgt_alias__xpr__xpr__rel_addr12__swappedCmpClone0__>"bgeu" xpr_0~"," xpr_1~"," imm_2,</code><br>
<code>imm_2[11] imm_2[9,4] xpr_1[4,0] xpr_0[4,0] 0b111 imm_2[3,0] imm_2[10] 0b1100011 ,</code><br>
<code>"",</code><br>
<code>"el:i_branch(el:opc_bgeu, el:xpr, el:xpr, el:rel_addr12)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// swapped compare   %cmp = icmp sgt i32 %u0, %u1, !dbg !17 to   %cmp = icmp slt i32 %u1, %u0, !dbg !17</code><br>
<code>instr i_bgt_alias__xpr__xpr__rel_addr12__swappedCmpClone0__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), xpr_1 = regop(xpr), imm_2 = immop() },</code><br>
<code>%6 = i32 getcurrpc();</code><br>
<code>%8 = i32 immop(imm_2,1,13);</code><br>
<code>%9 = i32 -2;</code><br>
<code>%7 = and(%8,%9);</code><br>
<code>%5 = add(%6,%7);</code><br>
<code>%10 = i32 -4;</code><br>
<code>%4 = add(%5,%10);</code><br>
<code>%12 = i32 regop(xpr_1);</code><br>
<code>%13 = i32 regop(xpr_0);</code><br>
<code>%11 = setlt(%12,%13);</code><br>
<code>brc(%4,%11);</code><br>
<code>,</code><br>
<code id=i_ble_alias__xpr__xpr__rel_addr12__swappedCmpClone0__>"bgt" xpr_0~"," xpr_1~"," imm_2,</code><br>
<code>imm_2[11] imm_2[9,4] xpr_0[4,0] xpr_1[4,0] 0b100 imm_2[3,0] imm_2[10] 0b1100011 ,</code><br>
<code>"",</code><br>
<code>"el:i_bgt_alias(el:xpr, el:xpr, el:rel_addr12)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// swapped compare   %cmp = icmp sle i32 %u0, %u1, !dbg !17 to   %cmp = icmp sge i32 %u1, %u0, !dbg !17</code><br>
<code>instr i_ble_alias__xpr__xpr__rel_addr12__swappedCmpClone0__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), xpr_1 = regop(xpr), imm_2 = immop() },</code><br>
<code>%6 = i32 getcurrpc();</code><br>
<code>%8 = i32 immop(imm_2,1,13);</code><br>
<code>%9 = i32 -2;</code><br>
<code>%7 = and(%8,%9);</code><br>
<code>%5 = add(%6,%7);</code><br>
<code>%10 = i32 -4;</code><br>
<code>%4 = add(%5,%10);</code><br>
<code>%12 = i32 regop(xpr_1);</code><br>
<code>%13 = i32 regop(xpr_0);</code><br>
<code>%11 = setge(%12,%13);</code><br>
<code>brc(%4,%11);</code><br>
<code>,</code><br>
<code id=i_bgtu_alias__xpr__xpr__rel_addr12__swappedCmpClone0__>"ble" xpr_0~"," xpr_1~"," imm_2,</code><br>
<code>imm_2[11] imm_2[9,4] xpr_0[4,0] xpr_1[4,0] 0b101 imm_2[3,0] imm_2[10] 0b1100011 ,</code><br>
<code>"",</code><br>
<code>"el:i_ble_alias(el:xpr, el:xpr, el:rel_addr12)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// swapped compare   %cmp = icmp ugt i32 %u0, %u1, !dbg !17 to   %cmp = icmp ult i32 %u1, %u0, !dbg !17</code><br>
<code>instr i_bgtu_alias__xpr__xpr__rel_addr12__swappedCmpClone0__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), xpr_1 = regop(xpr), imm_2 = immop() },</code><br>
<code>%6 = i32 getcurrpc();</code><br>
<code>%8 = i32 immop(imm_2,1,13);</code><br>
<code>%9 = i32 -2;</code><br>
<code>%7 = and(%8,%9);</code><br>
<code>%5 = add(%6,%7);</code><br>
<code>%10 = i32 -4;</code><br>
<code>%4 = add(%5,%10);</code><br>
<code>%12 = i32 regop(xpr_1);</code><br>
<code>%13 = i32 regop(xpr_0);</code><br>
<code>%11 = setult(%12,%13);</code><br>
<code>brc(%4,%11);</code><br>
<code>,</code><br>
<code id=i_bleu_alias__xpr__xpr__rel_addr12__swappedCmpClone0__>"bgtu" xpr_0~"," xpr_1~"," imm_2,</code><br>
<code>imm_2[11] imm_2[9,4] xpr_0[4,0] xpr_1[4,0] 0b110 imm_2[3,0] imm_2[10] 0b1100011 ,</code><br>
<code>"",</code><br>
<code>"el:i_bgtu_alias(el:xpr, el:xpr, el:rel_addr12)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// swapped compare   %cmp = icmp ult i32 %u0, %u1, !dbg !17 to   %cmp = icmp ugt i32 %u1, %u0, !dbg !17</code><br>
<code>instr i_bleu_alias__xpr__xpr__rel_addr12__swappedCmpClone0__, ok (0),</code><br>
<code>{ xpr_0 = regop(xpr), xpr_1 = regop(xpr), imm_2 = immop() },</code><br>
<code>%6 = i32 getcurrpc();</code><br>
<code>%8 = i32 immop(imm_2,1,13);</code><br>
<code>%9 = i32 -2;</code><br>
<code>%7 = and(%8,%9);</code><br>
<code>%5 = add(%6,%7);</code><br>
<code>%10 = i32 -4;</code><br>
<code>%4 = add(%5,%10);</code><br>
<code>%12 = i32 regop(xpr_1);</code><br>
<code>%13 = i32 regop(xpr_0);</code><br>
<code>%11 = setugt(%12,%13);</code><br>
<code>brc(%4,%11);</code><br>
<code>,</code><br>
<code id=i_store__opc_sb__x_0__simm12__x_0__legalConstClonei32__>"bleu" xpr_0~"," xpr_1~"," imm_2,</code><br>
<code>imm_2[11] imm_2[9,4] xpr_0[4,0] xpr_1[4,0] 0b111 imm_2[3,0] imm_2[10] 0b1100011 ,</code><br>
<code>"",</code><br>
<code>"el:i_bleu_alias(el:xpr, el:xpr, el:rel_addr12)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// legalized stored constant i8 0 to i32 0</code><br>
<code>instr i_store__opc_sb__x_0__simm12__x_0__legalConstClonei32__, ok (0),</code><br>
<code>{ imm_0 = immop() },</code><br>
<code>%5 = i32 0;</code><br>
<code>%4 = i8 truncate(%5);</code><br>
<code>%6 = i32 immop(imm_0,1,12);</code><br>
<code>store(%4, %6, 0);</code><br>
<code>,</code><br>
<code id=i_store__opc_sb__x_0__simm12__xpr__legalConstClonei32__>"sb" "x0"~"," imm_0 "(" "x0" ")",</code><br>
<code>imm_0[11,5] 0b0000000000000 imm_0[4,0] 0b0100011 ,</code><br>
<code>"",</code><br>
<code>"el:i_store(el:opc_sb, el:x_0, el:simm12, el:x_0)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// legalized stored constant i8 0 to i32 0</code><br>
<code>instr i_store__opc_sb__x_0__simm12__xpr__legalConstClonei32__, ok (0),</code><br>
<code>{ imm_0 = immop(), xpr_1 = regop(xpr) },</code><br>
<code>%5 = i32 0;</code><br>
<code>%4 = i8 truncate(%5);</code><br>
<code>%7 = i32 regop(xpr_1);</code><br>
<code>%8 = i32 immop(imm_0,1,12);</code><br>
<code>%6 = add(%7,%8);</code><br>
<code>store(%4, %6, 0);</code><br>
<code>,</code><br>
<code id=i_store__opc_sh__x_0__simm12__x_0__legalConstClonei32__>"sb" "x0"~"," imm_0 "(" xpr_1 ")",</code><br>
<code>imm_0[11,5] 0b00000 xpr_1[4,0] 0b000 imm_0[4,0] 0b0100011 ,</code><br>
<code>"",</code><br>
<code>"el:i_store(el:opc_sb, el:x_0, el:simm12, el:xpr)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// legalized stored constant i16 0 to i32 0</code><br>
<code>instr i_store__opc_sh__x_0__simm12__x_0__legalConstClonei32__, ok (0),</code><br>
<code>{ imm_0 = immop() },</code><br>
<code>%5 = i32 0;</code><br>
<code>%4 = i16 truncate(%5);</code><br>
<code>%6 = i32 immop(imm_0,1,12);</code><br>
<code>store(%4, %6, 0);</code><br>
<code>,</code><br>
<code id=i_store__opc_sh__x_0__simm12__xpr__legalConstClonei32__>"sh" "x0"~"," imm_0 "(" "x0" ")",</code><br>
<code>imm_0[11,5] 0b0000000000001 imm_0[4,0] 0b0100011 ,</code><br>
<code>"",</code><br>
<code>"el:i_store(el:opc_sh, el:x_0, el:simm12, el:x_0)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>
<code>// legalized stored constant i16 0 to i32 0</code><br>
<code>instr i_store__opc_sh__x_0__simm12__xpr__legalConstClonei32__, ok (0),</code><br>
<code>{ imm_0 = immop(), xpr_1 = regop(xpr) },</code><br>
<code>%5 = i32 0;</code><br>
<code>%4 = i16 truncate(%5);</code><br>
<code>%7 = i32 regop(xpr_1);</code><br>
<code>%8 = i32 immop(imm_0,1,12);</code><br>
<code>%6 = add(%7,%8);</code><br>
<code>store(%4, %6, 0);</code><br>
<code>,</code><br>
<code>"sh" "x0"~"," imm_0 "(" xpr_1 ")",</code><br>
<code>imm_0[11,5] 0b00000 xpr_1[4,0] 0b001 imm_0[4,0] 0b0100011 ,</code><br>
<code>"",</code><br>
<code>"el:i_store(el:opc_sh, el:x_0, el:simm12, el:xpr)",</code><br>
<code>""</code><br>
<code>,</code><br>
<code>{{0}}</code><br>
<code></code><br>


<!--CONTENT_END-->

</body>
</html>

