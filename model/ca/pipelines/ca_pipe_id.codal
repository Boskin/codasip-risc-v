#include "config.hcodal"
#include "ca_defines.hcodal"
#include "opcodes.hcodal"
#include "debug.hcodal"

event id : pipeline(pipe.ID) {
    use isa_hw;
    use id_hazards;
    use id_output;

    semantics {
        uint32 id_instr_temp;
        if(!r_id_stall) {
            if_code.finish(CP_CMD_READ, id_instr_temp);
            s_id_instr = r_id_clear == 1 ? (uint32)0 : id_instr_temp;
        } else {
            s_id_instr = r_id_instr;
        }


        s_id_opcode = s_id_instr[6..0];
        s_id_rtype_opcode = s_id_instr[31..25] :: s_id_instr[14..12] ::
            s_id_instr[6..0];

        switch(s_id_opcode) {
        // R-type
        case 0b0010011:
        case 0b0110011:
            if(FUNCT3(s_id_rtype_opcode) == FUNCT3_SLLI ||
               FUNCT3(s_id_rtype_opcode) == FUNCT3_SRLI ||
               FUNCT3(s_id_rtype_opcode) == FUNCT3_SRAI) {

                s_id_extended_opcode = ISB_OP_MASK(s_id_rtype_opcode);
            } else {
                s_id_extended_opcode = R_OP_MASK(s_id_rtype_opcode);
            }
            break;

        // I-type and B-type
        case 0b1100011:
        case 0b0000011:
        case 0b0100011:
        case 0b1100111:
            s_id_extended_opcode = ISB_OP_MASK(s_id_rtype_opcode);
            break;

        // U-type and J-type
        case 0b0011111:
        case 0b0111111:
        case 0b1011111:
        case 0b0110111:
        case 0b0010111:
        case 0b1101111:
            s_id_extended_opcode = UJ_OP_MASK(s_id_rtype_opcode);
            break;

        default:
            s_id_extended_opcode = OPC_ADD;
            // codasip_assert(false, "Default case in event id: %d", s_id_opcode);
        }

        s_id_shamnt5 = s_id_instr[24..20];
        s_id_itype_simm12 = s_id_instr[31..20];
        s_id_stype_simm12 = s_id_instr[31..25] :: s_id_instr[11..7];
        s_id_btype_simm12 = s_id_instr[31..31] :: s_id_instr[7..7] ::
            s_id_instr[30..25] :: s_id_instr[11..8];
        s_id_jtype_simm20 = s_id_instr[31..31] :: s_id_instr[19..12] ::
            s_id_instr[20..20] :: s_id_instr[30..21];
        s_id_utype_uimm20 = s_id_instr[31..12];

        s_id_xpr_a = s_id_instr[19..15];
        s_id_xpr_b = s_id_instr[24..20];
        s_id_xpr_dest = s_id_instr[11..7];


    };

    decoders {isa_hw(s_id_extended_opcode);};

    timing {
        id_hazards();
        id_output();
    };
};

event id_hazards : pipeline(pipe.ID) {
    semantics {
        uint1 stall_a;
        uint1 stall_b;

        if(s_id_xpr_a != 0) {
            if(s_id_xpr_a == r_ex_xpr_dest) {
                if(r_ex_xpr_dest_src == WRITE_ALU) {
                    s_id_xpr_data_a = s_ex_alu_out;
                    stall_a = 0;
                } else if(r_ex_xpr_dest_src == WRITE_MEM) {
                    s_id_xpr_data_a = 0;
                    stall_a = 1;
                } else {
                    s_id_xpr_data_a = rf_xpr[s_id_xpr_a];
                    stall_a = 0;
                }
            } else if(s_id_xpr_a == r_me_xpr_dest) {
                if(r_me_xpr_dest_src == WRITE_ALU) {
                    s_id_xpr_data_a = r_me_alu_out;
                    stall_a = 0;
                } else if(r_me_xpr_dest_src == WRITE_MEM) {
                    s_id_xpr_data_a = 0;
                    stall_a = 1;
                } else {
                    s_id_xpr_data_a = rf_xpr[s_id_xpr_a];
                    stall_a = 0;
                }
            } else if(s_id_xpr_a == r_wb_xpr_dest) {
                if(r_wb_xpr_dest_src == WRITE_ALU) {
                    s_id_xpr_data_a = r_wb_alu_out;
                    stall_a = 0;
                } else if(r_wb_xpr_dest_src == WRITE_MEM) {
                    s_id_xpr_data_a = s_wb_mem_read;
                    stall_a = 0;
                } else {
                    s_id_xpr_data_a = rf_xpr[s_id_xpr_a];
                    stall_a = 0;
                }
            } else {
                s_id_xpr_data_a = rf_xpr[s_id_xpr_a];
                stall_a = 0;
            }
        } else {
            s_id_xpr_data_a = rf_xpr[s_id_xpr_a];
            stall_a = 0;
        }

        if(s_id_xpr_b != 0) {
            if(s_id_xpr_b == r_ex_xpr_dest) {
                if(r_ex_xpr_dest_src == WRITE_ALU) {
                    s_id_xpr_data_b = s_ex_alu_out;
                    stall_b = 0;
                } else if(r_ex_xpr_dest_src == WRITE_MEM) {
                    s_id_xpr_data_b = 0;
                    stall_b = 1;
                } else {
                    s_id_xpr_data_b = rf_xpr[s_id_xpr_b];
                    stall_b = 0;
                }
            } else if(s_id_xpr_b == r_me_xpr_dest) {
                if(r_me_xpr_dest_src == WRITE_ALU) {
                    s_id_xpr_data_b = r_me_alu_out;
                    stall_b = 0;
                } else if(r_me_xpr_dest_src == WRITE_MEM) {
                    s_id_xpr_data_b = 0;
                    stall_b = 1;
                } else {
                    s_id_xpr_data_b = rf_xpr[s_id_xpr_b];
                    stall_b = 0;
                }
            } else if(s_id_xpr_b == r_wb_xpr_dest) {
                if(r_wb_xpr_dest_src == WRITE_ALU) {
                    s_id_xpr_data_b = r_wb_alu_out;
                    stall_b = 0;
                } else if(r_wb_xpr_dest_src == WRITE_MEM) {
                    s_id_xpr_data_b = s_wb_mem_read;
                    stall_b = 0;
                } else {
                    s_id_xpr_data_b = rf_xpr[s_id_xpr_b];
                    stall_b = 0;
                }
            } else {
                s_id_xpr_data_b = rf_xpr[s_id_xpr_b];
                stall_b = 0;
            }
        } else {
            s_id_xpr_data_b = rf_xpr[s_id_xpr_b];
            stall_b = 0;
        }

        s_id_stall = stall_a | stall_b;
        r_id_stall = stall_a | stall_b;
    };
};

event id_output : pipeline(pipe.ID) {
    semantics {
        if(!s_id_stall) {
            r_ex_pc = r_id_pc;
            r_ex_instr = s_id_instr;

            r_ex_xpr_a = s_id_xpr_a;
            r_ex_xpr_b = s_id_xpr_b;

            r_ex_src_a_mux = s_id_src_a_mux;
            r_ex_src_b_mux = s_id_src_b_mux;
            r_ex_br_alu_src_mux = s_id_br_alu_src_mux;

            r_ex_xpr_dest = s_id_xpr_dest;
            r_ex_xpr_dest_src = s_id_xpr_dest_src;

            r_ex_alu_op = s_id_alu_op;
            r_ex_mem_op = s_id_mem_op;
            r_ex_jump_op = s_id_jump_op;

            r_ex_xpr_data_a = s_id_xpr_data_a;
            r_ex_xpr_data_b = s_id_xpr_data_b;

            r_ex_imm = s_id_imm;
        } else {
            r_ex_pc = 0;
            r_ex_instr = 0;

            r_ex_xpr_a = 0;
            r_ex_xpr_b = 0;

            r_ex_src_a_mux = SRC_A_XPR;
            r_ex_src_b_mux = SRC_B_IMM;

            r_ex_xpr_dest = 0;
            r_ex_xpr_dest_src = WRITE_DISABLE;

            r_ex_alu_op = ALU_ADD;
            r_ex_mem_op = MEM_NOP;
            r_ex_jump_op = JUMP_FALSE;

            r_ex_xpr_data_a = 0;
            r_ex_xpr_data_b = 0;

            r_id_instr = s_id_instr;
        }

    };
};


