#include "config.hcodal"
#include "ca_defines.hcodal"

event me : pipeline(pipe.ME) {
    use me_output;

    semantics {
        uint32 data_mem;

        uint3 request_cmd;
        uint3 byte_count;

        s_me_stall = s_wb_stall;
        switch(r_me_mem_op) {
        case MEM_NOP:
            request_cmd = CP_CMD_NONE;
            byte_count = 0;
            break;

        case MEM_ST:
            request_cmd = CP_CMD_WRITE;
            byte_count = 4;
            break;

        case MEM_STH:
            request_cmd = CP_CMD_WRITE;
            byte_count = 2;
            break;

        case MEM_STB:
            request_cmd = CP_CMD_WRITE;
            byte_count = 1;
            break;

        case MEM_LD:
            request_cmd = CP_CMD_READ;
            byte_count = 4;
            break;

        case MEM_LDHS:
        case MEM_LDHU:
            request_cmd = CP_CMD_READ;
            byte_count = 2;
            break;

        case MEM_LDBS:
        case MEM_LDBU:
            request_cmd = CP_CMD_READ;
            byte_count = 1;
            break;

        default:
            request_cmd = CP_CMD_NONE;
            byte_count = 0;
            codasip_assert(false, "Default case in event me in mem op: %d",
                r_me_mem_op);
        }

        if(request_cmd == CP_CMD_READ) {
            if_data.request(CP_CMD_READ, r_me_alu_out, 0, byte_count);
            if_data.finish(CP_CMD_READ, data_mem);
            if(request_cmd == MEM_LDHS) {
                s_me_mem_read = (int32)(int16)data_mem;
            } else if(request_cmd == MEM_LDBS) {
                s_me_mem_read = (int32)(int8)data_mem;
            } else {
                s_me_mem_read = data_mem;
            }
        } else if(request_cmd == CP_CMD_WRITE) {
            if_data.request(CP_CMD_WRITE, r_me_alu_out, 0, byte_count);
            if_data.finish(CP_CMD_WRITE, r_me_alu_data_b);
            s_me_mem_read = 0;
        } else {
            s_me_mem_read = 0;
        }

        switch(r_me_xpr_dest_src) {
        case WRITE_DISABLE:
            s_me_data_out = 0;
            break;

        case WRITE_ALU:
            s_me_data_out = r_me_alu_out;
            break;

        case WRITE_MEM:
            s_me_data_out = s_me_mem_read;
            break;

        default:
            s_me_data_out = 0;
            codasip_assert(false, "Default case in xpr_dest_src in me: %d",
                r_me_xpr_dest_src);
        }
    };

    timing {
        me_output();
    };
};

event me_output : pipeline(pipe.ME) {
    semantics {
        r_wb_pc = r_me_pc;
        r_wb_instr = r_me_instr;
        r_wb_xpr_dest = r_me_xpr_dest;
        r_wb_xpr_dest_src = r_me_xpr_dest_src;
        r_wb_alu_out = r_me_alu_out;
        r_wb_mem_read = s_me_mem_read;
        r_wb_data_out = s_me_data_out;
    };
};
