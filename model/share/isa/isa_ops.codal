/**
* Copyright (c) 2017 Keith Graham
*
* Permission is granted to anyone to use this software for any purpose,
* including commercial applications, and to alter it and redistribute it
* freely, subject to the following restrictions:
*
* 1. The origin of this software must not be misrepresented; you must not
*    claim that you wrote the original software.
* 2. Altered source versions must be plainly marked as such, and must not be
*    misrepresented as being the original software.
* 3. This notice may not be removed or altered from any source distribution.
*/

// -------------------------------------------------------------
// Include statements
// -------------------------------------------------------------

#include "utils.hcodal"
#include "config.hcodal"


// -------------------------------------------------------------
// Register operand elements
// -------------------------------------------------------------

DEF_XPR( 0) DEF_XPR( 1) DEF_XPR( 2) DEF_XPR( 3) DEF_XPR( 4) DEF_XPR( 5) DEF_XPR( 6) DEF_XPR( 7)
DEF_XPR( 8) DEF_XPR( 9) DEF_XPR(10) DEF_XPR(11) DEF_XPR(12) DEF_XPR(13) DEF_XPR(14) DEF_XPR(15)
DEF_XPR(16) DEF_XPR(17) DEF_XPR(18) DEF_XPR(19) DEF_XPR(20) DEF_XPR(21) DEF_XPR(22) DEF_XPR(23)
DEF_XPR(24) DEF_XPR(25) DEF_XPR(26) DEF_XPR(27) DEF_XPR(28) DEF_XPR(29) DEF_XPR(30) DEF_XPR(31)

// Register operand class
set xpr : register_class(rf_xpr);
set xpr = x_1, x_2, x_3, x_4, x_5, x_6, x_7, x_8, x_9, x_10, x_11, x_12, x_13, x_14, x_15, x_16,
                x_17, x_18, x_19, x_20, x_21, x_22, x_23, x_24, x_25, x_26, x_27, x_28, x_29,
                x_30, x_31;

set xpr_all : register_operand (rf_xpr);
set xpr_all = x_0, xpr;

// ---------------------------------------------------------------
// Relative address elements
// ---------------------------------------------------------------

element rel_addr12
{
    signed attribute bit[IMM12_W] val
    {
        label = true;

        encoding = (val - current_address) >> HALF_ALIGN;
        decoding = (val + current_address) << HALF_ALIGN;
    };

    assembler { val };
    binary { val };
    return { val };
};

element rel_jalr_addr12         // jalr jumps are not half_word aligned, but LAU / byte aligned
{
    signed attribute bit[IMM12_W] val
    {
        label = true;

        encoding = (val - current_address);
        decoding = (val + current_address);
    };

    assembler { val };
    binary { val };
    return { val };
};

element rel_addr20
{
    signed attribute bit[IMM20_W] val
    {
        label = true;

        encoding = (val - current_address) >> HALF_ALIGN;
        decoding = (val + current_address) << HALF_ALIGN;
    };

    assembler { val };
    binary { val };
    return { val };
};


// -------------------------------------------------------------
// Immediate elements
// -------------------------------------------------------------

element simm12
{
    signed attribute bit[IMM12_W] val;

    assembler { val };
    binary { val };

    return { val };
};

element simm20
{
    unsigned attribute bit[IMM20_W] val;

    assembler { val };
    binary { val };

    return { val };
};


// -------------------------------------------------------------
// Shift amount element
// -------------------------------------------------------------

element shamt
{
    unsigned attribute bit[SHAMT5_W] val;

    assembler { val };
    binary { val };

    return { val };
};


